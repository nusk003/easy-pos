/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from '@azure/core-client';

export interface FolioListModel {
  /** List of folios. */
  folios: FolioItemModel[];
  /** Total count of items */
  count: number;
}

export interface FolioItemModel {
  /** The id of the folio */
  id: string;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  /** Date of update<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  updated: Date;
  /** The folio type */
  type?: FolioItemModelType;
  debitor?: FolioDebitorModel;
  /** The date when the folio has been closed */
  closingDate?: Date;
  /** Set to {true} if this is the main folio for the reservation */
  isMainFolio?: boolean;
  /** Set to {true} if the folio has no unmoved [transitory] charges, unmoved payments, and allowances. */
  isEmpty?: boolean;
  reservation?: EmbeddedReservationModel;
  company?: EmbeddedCompanyModel;
  balance: MonetaryValueModel;
  /** Set to true, if the folio has been checked out on accounts receivable */
  checkedOutOnAccountsReceivable?: boolean;
  /**
   * Depending on the state of the folio, certain warnings are shown.
   * This list includes all folio warnings.
   */
  folioWarnings?: string[];
  /**
   * Depending on the state of the folio, certain actions are allowed or not.
   * This list includes all actions you can perform on this folio.
   */
  allowedActions?: FolioItemModelAllowedActionsItem[];
  /** All invoices that have been created for this folio. This is only set on folios of type 'guest' */
  relatedInvoices?: EmbeddedInvoiceModel[];
  /** Status of the folio */
  status: FolioItemModelStatus;
  /** The list of charges */
  charges?: ChargeModel[];
  /** The list of allowances */
  allowances?: AllowanceModel[];
  /** The list of transitory charges */
  transitoryCharges?: TransitoryChargeModel[];
}

export interface FolioDebitorModel {
  /**
   * Whether the debitor is the booker, the primary guest, an additional guest, or the company.
   * When the folio has a company, the only possible value is 'Company'. 'Property' is a reserved type for the house folio.
   */
  type?: FolioDebitorModelType;
  /** Title */
  title?: FolioDebitorModelTitle;
  /** First name */
  firstName?: string;
  /** Last name */
  name?: string;
  address?: NonStrictAddressModel;
  company?: CompanyInfoModel;
  /** Any additional information about the debitor that should be present on the invoice */
  reference?: string;
  /** Debitor's email */
  email?: string;
}

export interface NonStrictAddressModel {
  addressLine1?: string;
  addressLine2?: string;
  postalCode?: string;
  city?: string;
  regionCode?: string;
  countryCode?: string;
}

export interface CompanyInfoModel {
  /** Name of the company */
  name: string;
  /** Tax or Vat ID of the company */
  taxId?: string;
}

export interface EmbeddedReservationModel {
  /** Reservation id */
  id: string;
  /** Booking id */
  bookingId: string;
}

export interface EmbeddedCompanyModel {
  /** The company ID */
  id: string;
  /** The code of the company */
  code?: string;
  /** The name of the company */
  name?: string;
  /** Whether or not the company can check out on AR */
  canCheckOutOnAr?: boolean;
}

export interface MonetaryValueModel {
  amount: number;
  currency: string;
}

export interface EmbeddedInvoiceModel {
  /** Invoice id */
  id: string;
}

export interface ChargeModel {
  /** ID for charges. This is unique within one folio. */
  id: string;
  /** The type of the service or good */
  serviceType: ChargeModelServiceType;
  /** The name, article number, or other description of this charge */
  name: string;
  /**
   * The name, article number, or other description of this charge
   * translated in different languages
   */
  translatedNames?: { [propertyName: string]: string };
  /** Status: is this already posted? */
  isPosted: boolean;
  /** The day when the line item is (or was) due to be charged. */
  serviceDate: Date;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  movedFrom?: EmbeddedFolioModel;
  movedTo?: EmbeddedFolioModel;
  /** A reason why move operation was performed */
  movedReason?: string;
  amount: AmountModel;
  /** Receipt for this transaction */
  receipt?: string;
  /** Identifier used for grouping related charges together */
  groupId?: string;
  /** ID of the custom sub-account the charge has been posted to */
  subAccountId?: string;
  /** The count of services provided */
  quantity: number;
}

export interface EmbeddedFolioModel {
  /** Folio ID */
  id: string;
  /** Name of the debitor - the one who will pay the bill */
  debitor?: string;
}

export interface AmountModel {
  grossAmount: number;
  netAmount: number;
  vatType: AmountModelVatType;
  vatPercent: number;
  currency: string;
}

export interface AllowanceModel {
  /** ID for allowances. This is unique within one folio. */
  id: string;
  amount: AmountModel;
  /** Reason why this allowance was posted */
  reason: string;
  serviceType: AllowanceModelServiceType;
  serviceDate: Date;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  movedFrom?: EmbeddedFolioModel;
  movedTo?: EmbeddedFolioModel;
  /** A reason why move operation was performed */
  movedReason?: string;
  /** ID of a charge allowance posted for. `Null` if posted for folio */
  sourceChargeId?: string;
  /** ID of the custom sub-account the allowance has been posted to */
  subAccountId?: string;
}

export interface TransitoryChargeModel {
  /** ID for transitory charge. This is unique within one folio. */
  id: string;
  /** The name, article number, or other description of this item */
  name: string;
  amount: MonetaryValueModel;
  /** The service type of this transitory charge. As revenue and VAT of transitory charges are not recorded for the hotel, this is just FYI. */
  serviceType?: TransitoryChargeModelServiceType;
  /** The date when this charge was added. */
  serviceDate: Date;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  /** Receipt for this transaction */
  receipt?: string;
  movedFrom?: EmbeddedFolioModel;
  movedTo?: EmbeddedFolioModel;
  /** A reason why move operation was performed */
  movedReason?: string;
  /** The count of services provided */
  quantity: number;
}

export interface MessageItemCollection {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly messages?: string[];
}

export interface CreateFolioModel {
  /** The ID of the reservation for which a guest folio should be created */
  reservationId?: string;
  /** The ID of the company for which a folio should be created */
  companyId?: string;
  debitor: FolioDebitorModel;
  /**
   * The type of the folio to create. Default is the guest folio.
   * This field will become required 01.11.2019.
   */
  type?: CreateFolioModelType;
  /** The ID of the property for which an external folio should be created. */
  propertyId?: string;
  /**
   * Optional code for external folios.
   * If present, the id of the folio will be propertyId-code (MUC-SOMETHING);
   * If no code is provided, the id of the folio will be propertyId-ext-number (MUC-EXT-282).
   */
  code?: string;
}

export interface FolioCreatedModel {
  /** The folio id */
  id: string;
}

export interface CountModel {
  count: number;
}

export interface FolioModel {
  /** The id of the folio */
  id: string;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  /** Date of update<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  updated: Date;
  /** The folio type */
  type?: FolioModelType;
  debitor?: FolioDebitorModel;
  /** The date when the folio has been closed */
  closingDate?: Date;
  reservation?: EmbeddedReservationModel;
  company?: EmbeddedCompanyModel;
  property: EmbeddedPropertyModel;
  /** The list of charges */
  charges?: ChargeModel[];
  /** The list of charges */
  transitoryCharges?: TransitoryChargeModel[];
  /** The list of payments - <b>DEPRECATED: This field will be removed on July 3rd 2020. Use GET /finance/v1/folios/{folioId}/payments or GET /finance/v1/folios/{folioId}/refunds instead.</b> */
  payments?: PaymentModel[];
  /** The list of pending payments - <b>DEPRECATED: This field will be removed on July 3rd 2020. Use GET /finance/v1/folios/{folioId}/payments instead.</b> */
  pendingPayments?: PendingPaymentModel[];
  /** The list of allowances */
  allowances?: AllowanceModel[];
  balance: MonetaryValueModel;
  /**
   * Set to {true}, if the folio has been checked out on accounts receivable.
   * If you create an invoice from this folio, it will display the outstanding payments
   */
  checkedOutOnAccountsReceivable?: boolean;
  /** Set to {true} if this is a main folio for the reservation */
  isMainFolio?: boolean;
  /** Set to {true} if the folio has no unmoved [transitory] charges, unmoved payments, and allowances. */
  isEmpty?: boolean;
  /**
   * All folios that are related to this folio. Either because they belong to the same reservation, or because charges where moved
   * between them. This is only set on folios of type 'guest'
   */
  relatedFolios?: EmbeddedFolioModel[];
  /** All invoices that have been created for this folio. This is only set on folios of type 'guest' */
  relatedInvoices?: EmbeddedInvoiceModel[];
  /**
   * Depending on the state of the folio, certain warnings are shown.
   * This list includes all folio warnings.
   */
  folioWarnings?: string[];
  /**
   * Depending on the state of the folio, certain actions are allowed or not.
   * This list includes all actions you can perform on this folio.
   */
  allowedActions?: FolioModelAllowedActionsItem[];
  /** The maximum payment that can be posted on this folio */
  allowedPayment?: number;
  /** The maximum allowance (gross) that can be posted on this folio */
  maximumAllowance?: number;
  /** Status of the folio */
  status: FolioModelStatus;
}

export interface EmbeddedPropertyModel {
  /** The property id */
  id: string;
  /** The code for the property that can be shown in reports and table views */
  code?: string;
  /** The name for the property */
  name?: string;
  /**
   * The description for the property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

export interface PaymentModel {
  /** Id of the payment. This is unique within one folio. */
  id: string;
  /** The Payment Method. */
  method: PaymentModelMethod;
  amount: MonetaryValueModel;
  externalReference?: ExternalReference;
  /** Receipt for the payment. For payments done by the payment service provider integration, this is the same as the pspReference. */
  receipt?: string;
  /** The date when the payment was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  paymentDate?: Date;
  movedFrom?: EmbeddedFolioModel;
  movedTo?: EmbeddedFolioModel;
  /** A reason why move operation was performed */
  movedReason?: string;
  /** A link to the original payment in case of splitting payments */
  sourcePaymentId?: string;
  /** The business date of the payment */
  businessDate: Date;
}

export interface ExternalReference {
  /** The merchant reference ('order number') */
  merchantReference: string;
  /** The globally unique identifier of this payment in the reports of the payment service */
  pspReference: string;
}

export interface PendingPaymentModel {
  /** Id of the payment task. */
  id: string;
  amount: MonetaryValueModel;
  /** The terminal used for the payment. */
  terminalId?: string;
}

export interface Operation {
  /** Anything */
  value?: any;
  path?: string;
  op?: string;
  from?: string;
}

export interface CreateChargeModel {
  /** The service type, used by accounting to determine the correct revenue account */
  serviceType: CreateChargeModelServiceType;
  /** The VAT type, used by accounting to determine the correct vat amount and account */
  vatType: CreateChargeModelVatType;
  /** ID of the custom sub-account to post the charge to, used by accounting to determine the correct revenue account */
  subAccountId?: string;
  /** The name, article number, or other description of this charge */
  name: string;
  amount: MonetaryValueModel;
  /** Receipt for this transaction */
  receipt?: string;
  /**
   * The count of services provided. Defaults to 1.
   * NOTE: this field will become required 07.05.2020.
   */
  quantity?: number;
  /**
   * The business date of the charge. Defaults to the current date.
   * In some cases you might want to post the charges to the previous business date, this is only possible until 6 AM of the current day.
   */
  businessDate?: Date;
}

export interface AddedChargeModel {
  /** The id of the added charge */
  id: string;
  /** The fee charges ids */
  feeChargeIds?: string[];
}

export interface CreateTransitoryChargeModel {
  /** The name, article number, or other description of this item */
  name: string;
  amount: MonetaryValueModel;
  /** Receipt for this transaction */
  receipt?: string;
  /** Identifier used for grouping related charges together */
  groupId?: string;
  /** The service type. This is not used by accounting, but can be entered and stored on the charge. */
  serviceType?: CreateTransitoryChargeModelServiceType;
  /**
   * The count of services provided. Defaults to 1.
   * NOTE: this field will become required 07.05.2020.
   */
  quantity?: number;
  /**
   * The business date of the charge. Defaults to the current date.
   * In some cases you might want to post the charges to the previous business date, this is only possible until 6 AM of the current day.
   */
  businessDate?: Date;
}

export interface CreatedSubResourceIdModel {
  id: string;
}

export interface MoveChargesRequest {
  /** ID of the target folio */
  targetFolioId: string;
  /** Description of why the move is performed */
  reason: string;
  /** The IDs of the charges that should be moved */
  chargeIds?: string[];
  /**
   * The IDs of the allowances that should be moved.
   * Only moving global allowances is supported
   */
  allowanceIds?: string[];
  /** The IDs of the transitory charges that should be moved */
  transitoryChargeIds?: string[];
}

export interface BulkMoveRequest {
  /** The list of actions to perform */
  items: BulkMoveItemRequest[];
  /** Description of why the move is performed */
  reason: string;
}

export interface BulkMoveItemRequest {
  /** ID of the source folio */
  sourceFolioId: string;
  /** ID of the target folio */
  targetFolioId: string;
  /** The IDs of the charges that should be moved */
  chargeIds?: string[];
}

export interface MoveAllChargesRequest {
  /** ID of the target folio */
  targetFolioId: string;
  /** Description of why the move is performed */
  reason: string;
}

export interface CreateAllowanceForChargeModel {
  /** Reason why this allowance is posted */
  reason: string;
  amount: MonetaryValueModel;
  /**
   * The business date of the allowance. Defaults to the current date.
   * In some cases you might want to post the allowances to the previous business date, this is only possible until 6 AM of the current day.
   */
  businessDate?: Date;
}

export interface CreateAllowanceForFolioModel {
  /** The service type, used by accounting to determine the correct revenue account */
  serviceType: CreateAllowanceForFolioModelServiceType;
  /** The VAT type, used by accounting to determine the correct vat amount and account */
  vatType: CreateAllowanceForFolioModelVatType;
  /** ID of the custom sub-account to post the allowance to, used by accounting to determine the correct revenue account */
  subAccountId?: string;
  /** Reason why this allowance is posted */
  reason: string;
  amount: MonetaryValueModel;
  /**
   * The business date of the allowance. Defaults to the current date.
   * In some cases you might want to post the allowances to the previous business date, this is only possible until 6 AM of the current day.
   */
  businessDate?: Date;
}

export interface CreateAllowanceBulkModel {
  /** The list of actions to perform */
  items: CreateAllowanceBulkItemModel[];
  /** Description of why allowances are added */
  reason: string;
  /**
   * The business date of the allowance. Defaults to the current date.
   * In some cases you might want to post the allowances to the previous business date, this is only possible until 6 AM of the current day.
   */
  businessDate?: Date;
}

export interface CreateAllowanceBulkItemModel {
  /** The ID of the charge */
  chargeId: string;
  amount: MonetaryValueModel;
}

export interface BulkAllowanceCreatedModel {
  /** Allowances that have been created */
  items: BulkAllowanceCreatedItemModel[];
}

export interface BulkAllowanceCreatedItemModel {
  /** The id of the created allowance */
  id: string;
  /** The id of the charge the allowance has been added to */
  sourceChargeId: string;
}

export interface MovePaymentsRequest {
  /** ID of the target folio */
  targetFolioId: string;
  /** Description of why the move is performed */
  reason: string;
  /** The IDs of the payments that should be moved */
  paymentIds: string[];
}

export interface CorrectFolioRequest {
  /** Description of why the correction is performed */
  reason: string;
  /** The IDs of the charges that should be moved */
  chargeIds?: string[];
  /**
   * The IDs of the allowances that should be moved
   * Only moving global allowances is supported
   */
  allowanceIds?: string[];
  /** The IDs of the transitory charges that should be moved */
  transitoryChargeIds?: string[];
}

export interface SplitChargeRequest {
  /** The percent to split charge (between 0 and 100) */
  percent?: number;
  amount?: MonetaryValueModel;
  /** How to split the charge: by percent value, or by absolute amount */
  type: SplitChargeRequestType;
}

export interface SplitPaymentRequest {
  /** The percent to split payment (between 0 and 100) */
  percent?: number;
  amount?: MonetaryValueModel;
  /** How to split the payment: by percent value, or by absolute amount */
  type: SplitPaymentRequestType;
}

export interface PaymentListModel {
  /** List of payments */
  payments: FolioPaymentModel[];
  /** Total count of items */
  count: number;
}

export interface FolioPaymentModel {
  /** Id of the payment. This is unique within one folio */
  id: string;
  /** The payment method */
  method?: FolioPaymentModelMethod;
  amount: MonetaryValueModel;
  externalReference?: ExternalReference;
  /** Receipt for the payment */
  receipt?: string;
  /** The date and time when the payment was created<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  paymentDate: Date;
  movedFrom?: EmbeddedFolioModel;
  movedTo?: EmbeddedFolioModel;
  /** A reason why the move operation was performed */
  movedReason?: string;
  /** A link to the original payment in case of splitting payments */
  sourcePaymentId?: string;
  /** Status of the payment */
  status: FolioPaymentModelStatus;
  /** Human readable failure reason */
  failureReason?: string;
  /** Machine-readable failure code */
  failureCode?: FolioPaymentModelFailureCode;
  /** Type of the payment */
  type: FolioPaymentModelType;
  /** The date and time a payment link expires<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  expiresAt?: Date;
  /** Payment link description */
  description?: string;
  /** Payment link url */
  url?: string;
  /** The list of actions for this payment */
  actions?: ActionModelPaymentActionNotAllowedPaymentActionReason[];
  /** The business date of the payment */
  businessDate: Date;
}

export interface ActionModelPaymentActionNotAllowedPaymentActionReason {
  action: ActionModelPaymentActionNotAllowedPaymentActionReasonAction;
  isAllowed: boolean;
  reasons?: ActionReasonModelNotAllowedPaymentActionReason[];
}

export interface ActionReasonModelNotAllowedPaymentActionReason {
  code: ActionReasonModelNotAllowedPaymentActionReasonCode;
  message: string;
}

export interface CreateCustomPaymentRequest {
  /**
   * The payment method. Use 'CreditCard', if none of the specific credit cards types matches. 'Booking.com' only makes sense, if
   * the property (hotel) configured Booking.com > Finance to be 'Payments by Booking.com'
   */
  method: CreateCustomPaymentRequestMethod;
  /**
   * The optional receipt you want to store for the payment. It defaults to the reservation or external folio id.
   * This field is required if you are adding payment to the house account
   */
  receipt?: string;
  /**
   * The business date of the payment. Defaults to the current date.
   * In some cases you might want to post the payments to the previous business date, this is only possible until 6 AM of the current day.
   */
  businessDate?: Date;
  amount: MonetaryValueModel;
  /** List of charges and amount being covered by this payment. */
  paidCharges?: PaymentPaidChargesRequest[];
}

export interface PaymentPaidChargesRequest {
  /** The ID of the charge being paid */
  chargeId: string;
  /** The amount being covered with the payment. If not provided it is assumed that the payment is covering the full amount of the charge */
  amount: number;
}

export interface PaymentCreatedModel {
  id: string;
}

export interface CreateTerminalPaymentRequest {
  /** Terminal to be used for the payment */
  terminalId: string;
  amount: MonetaryValueModel;
  /** List of charges and amount being covered by this payment. */
  paidCharges?: PaymentPaidChargesRequest[];
}

export interface CreateAuthorizationPaymentRequest {
  /** Reference to the original authorization transaction */
  transactionReference: string;
  amount: MonetaryValueModel;
  /** List of charges and amount being covered by this payment. */
  paidCharges?: PaymentPaidChargesRequest[];
}

export interface CreateAccountPaymentRequest {
  /** Account owner of the payment account, default is `Guest` */
  accountOwner?: CreateAccountPaymentRequestAccountOwner;
  amount: MonetaryValueModel;
  /** List of charges and amount being covered by this payment. */
  paidCharges?: PaymentPaidChargesRequest[];
}

export interface CreatePaymentLinkRequest {
  /** The date that the link expires<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  expiresAt: Date;
  /** The payer's country code. Used to provide suitable for the payer payment methods and use default country language */
  countryCode: string;
  /** Payment description. It will be shown on the payment form of the link */
  description?: string;
  /**
   * The email address of the payer or cardholder. It can be used to verify the identity of the payer and
   * allow to catch a fraudulent usage of the payment account if the email address does not match the one
   * on file at the bank
   */
  payerEmail?: string;
  amount: MonetaryValueModel;
  /** List of charges and amount being covered by this payment. */
  paidCharges?: PaymentPaidChargesRequest[];
}

export interface RefundListModel {
  /** List of refunds */
  refunds: RefundModel[];
  /** Total count of items */
  count: number;
}

export interface RefundModel {
  /** Id of the refund */
  id: string;
  /** The payment method */
  method: RefundModelMethod;
  amount: MonetaryValueModel;
  externalReference?: ExternalReference;
  /** Receipt for the payment. For payments run through the apaleo payment services it is set to the pspReference */
  receipt?: string;
  /** The date when the refund was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  refundDate: Date;
  /** A link to the payment that the refund was done for */
  sourcePaymentId?: string;
  /** Status of the refund */
  status: RefundModelStatus;
  failureReason?: string;
  failureCode?: RefundModelFailureCode;
  movedFrom?: EmbeddedFolioModel;
  movedTo?: EmbeddedFolioModel;
  /** A reason why the move operation was performed */
  movedReason?: string;
  /** The business date of the refund */
  businessDate: Date;
}

export interface CreateFolioRefundRequest {
  /** The payment method the refund will be accounted to */
  method: CreateFolioRefundRequestMethod;
  amount: MonetaryValueModel;
  /** The receipt for the refund */
  receipt?: string;
  /**
   * The business date of the refund. Defaults to the current date.
   * In some cases you might want to post the refunds to the previous business date, this is only possible until 6 AM of the current day.
   */
  businessDate?: Date;
}

export interface RefundCreatedModel {
  id: string;
}

export interface CreatePaymentRefundRequest {
  amount: MonetaryValueModel;
  /**
   * The business date of the refund. Defaults to the current date.
   * In some cases you might want to post the refunds to the previous business date, this is only possible until 6 AM of the current day.
   */
  businessDate?: Date;
}

export interface PreviewInvoiceModel {
  to?: InvoiceRecipientModel;
  /** Describes what will happen, when you try to create an invoice with the folio in the state it is in now. */
  createInvoiceAction: PreviewInvoiceModelCreateInvoiceAction;
  /** A warning about what would fail if you would try to create an invoice with the current folio. */
  createInvoiceWarning?: CreateInvoiceWarningModel;
  /** Date the invoice has been created */
  invoiceDate: Date;
  /** The folio this invoice was requested for */
  folioId: string;
  from: InvoiceSenderModel;
  commercialInformation: CommercialInfoModel;
  bankAccount?: BankAccountModel;
  /** Specification of the payment terms, as defined in the property */
  paymentTerms?: string;
  lineItems: InvoiceLineItemsModel;
  /** A list of all payments */
  payments?: InvoicePaymentModel[];
  outstandingPayment?: MonetaryValueModel;
  /** The subtotal, displaying net and tax amount for each VAT type */
  taxDetails?: TaxDetailModel[];
  total: MonetaryValueModel;
  stayInfo?: StayInfoModel;
  /** The ID of the property */
  propertyId: string;
  /** The country code of the property */
  propertyCountryCode: string;
  /** Language which was used to create the invoice */
  languageCode: string;
  company?: EmbeddedCompanyModel;
}

export interface InvoiceRecipientModel {
  name?: string;
  address?: NonStrictAddressModel;
  companyName?: string;
  companyTaxId?: string;
  reference?: string;
}

/** A warning about what would fail if you would try to create an invoice with the current folio. */
export interface CreateInvoiceWarningModel {
  /** The general classification of the warning, why an invoice would not be created if you would try to create it for the current folio. */
  type: CreateInvoiceWarningModelType;
  /** Optionally, additional information about the warning */
  message?: string;
}

export interface InvoiceSenderModel {
  name: string;
  address?: AddressModel;
}

export interface AddressModel {
  addressLine1: string;
  addressLine2?: string;
  postalCode: string;
  city: string;
  regionCode?: string;
  countryCode: string;
}

export interface CommercialInfoModel {
  registerEntry: string;
  taxId: string;
  managingDirectors?: string;
}

export interface BankAccountModel {
  iban?: string;
  bic?: string;
  bank?: string;
}

export interface InvoiceLineItemsModel {
  lineItems?: InvoiceLineItemModel[];
  subTotal: MonetaryValueModel;
}

export interface InvoiceLineItemModel {
  /** The date on which this item or service is delivered */
  date: Date;
  /** The description of the item or service */
  description: string;
  price: MonetaryValueModel;
  /** The applied VAT type. */
  vatType?: InvoiceLineItemModelVatType;
  /** The applied VAT percent */
  vatPercent?: number;
  /** Whether this line item represents a no-show fee */
  isNoShowFee: boolean;
  /** Items which are included in the package, if there are any */
  includedLineItems?: IncludedLineItemModel[];
  /** Guest who the service has been provided to. Is defined only when the invoice has charges from multiple folios with different guests. */
  guest?: string;
  /** The count of services provided */
  quantity?: number;
}

export interface IncludedLineItemModel {
  /** The description of the item or service */
  description?: string;
  price: MonetaryValueModel;
  /** The applied VAT type. */
  vatType?: IncludedLineItemModelVatType;
  /** The applied VAT percent */
  vatPercent?: number;
}

export interface InvoicePaymentModel {
  /** Id of the payment. This is unique within one folio. */
  id: string;
  /** The Payment Method type. */
  method: InvoicePaymentModelMethod;
  /** The Payment Method name translated in the requested language of the invoice */
  methodName: string;
  amount: MonetaryValueModel;
  /** The date when the payment was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  paymentDate?: Date;
  /** The business date of the payment, can be different from the payment date for some payments posted after midnight and before 6AM. */
  businessDate?: Date;
}

export interface TaxDetailModel {
  vatType: TaxDetailModelVatType;
  vatPercent: number;
  net: MonetaryValueModel;
  tax: MonetaryValueModel;
}

export interface StayInfoModel {
  /** Name of the primary guest */
  guestName: string;
  /** The arrival date */
  arrivalDate: Date;
  /** The departure date */
  departureDate: Date;
  /** ID of the reservation this invoice is for, if any. */
  reservationId: string;
}

export interface InvoiceListModel {
  /** List of invoices. */
  invoices: InvoiceItemModel[];
  /** Total count of items */
  count: number;
}

export interface InvoiceItemModel {
  /** Invoice identifier */
  id: string;
  /** Invoice number */
  number: string;
  /** Invoice type */
  type: InvoiceItemModelType;
  /** Language which was used to create the invoice */
  languageCode: string;
  /** The folio for this invoice */
  folioId: string;
  /** The reservation for this invoice */
  reservationId?: string;
  /** The ID of the property */
  propertyId: string;
  /**
   * If the invoice is related to another invoice, this field contains related invoice number
   * For example, if the invoice has Cancellation type,
   * this field contains the number of invoice which is being cancelled
   */
  relatedInvoiceNumber?: string;
  subTotal: MonetaryValueModel;
  outstandingPayment?: MonetaryValueModel;
  /** True, if this invoice had no outstanding payments or was settled. */
  paymentSettled: boolean;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  /** Name of the guest */
  guestName?: string;
  /** Company the guest specified */
  guestCompany?: string;
  /**
   * Depending on the state of the invoice, certain actions are allowed or not.
   * This list includes all actions you can perform on this invoice.
   */
  allowedActions?: InvoiceItemModelAllowedActionsItem[];
  company?: EmbeddedCompanyModel;
}

export interface CreateInvoicePdfRequest {
  /** The language in which the invoice should be produced. */
  languageCode: string;
  /** The ID of the folio for which the invoice should be created. */
  folioId: string;
}

export interface InvoiceCreatedModel {
  /** The invoice id */
  id: string;
}

export interface InvoiceModel {
  /** Invoice identifier */
  id: string;
  /** Invoice number */
  number: string;
  /** Invoice type */
  type: InvoiceModelType;
  to: InvoiceRecipientModel;
  /** True, if this invoice had no outstanding payments or was settled. */
  paymentSettled: boolean;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  /**
   * If the invoice is related to another invoice, this field contains related invoice number
   * For example, if the invoice has Cancellation type,
   * this field contains the number of invoice which is being cancelled
   */
  relatedInvoiceNumber?: string;
  /**
   * Depending on the state of the invoice, certain actions are allowed or not.
   * This list includes all actions you can perform on this invoice.
   */
  allowedActions?: InvoiceModelAllowedActionsItem[];
  /** Date the invoice has been created */
  invoiceDate: Date;
  /** The folio this invoice was requested for */
  folioId: string;
  from: InvoiceSenderModel;
  commercialInformation: CommercialInfoModel;
  bankAccount?: BankAccountModel;
  /** Specification of the payment terms, as defined in the property */
  paymentTerms?: string;
  lineItems: InvoiceLineItemsModel;
  /** A list of all payments */
  payments?: InvoicePaymentModel[];
  outstandingPayment?: MonetaryValueModel;
  /** The subtotal, displaying net and tax amount for each VAT type */
  taxDetails?: TaxDetailModel[];
  total: MonetaryValueModel;
  stayInfo?: StayInfoModel;
  /** The ID of the property */
  propertyId: string;
  /** The country code of the property */
  propertyCountryCode: string;
  /** Language which was used to create the invoice */
  languageCode: string;
  company?: EmbeddedCompanyModel;
}

export interface PayInvoiceRequest {
  /** The payment method used for paying the invoice. Used for accounting. */
  paymentMethod: PayInvoiceRequestPaymentMethod;
  /** The receipt for the payment. Each transaction in accounting has a receipt set. */
  receipt: string;
}

export interface AccountingTransactionPairListModel {
  /** The list of aggregated transaction pairs */
  accountTransactionPairs: AccountingTransactionPairModel[];
}

export interface AccountingTransactionPairModel {
  debitedAccount: ExportAccountModel;
  creditedAccount: ExportAccountModel;
  /** Use this model in all accounting reports */
  amount: PreciseMonetaryValueModel;
}

export interface ExportAccountModel {
  /** The account name */
  name: string;
  /** The account number */
  number: string;
  /** The number of the parent account */
  parentNumber?: string;
  /** The account type */
  type: ExportAccountModelType;
}

/** Use this model in all accounting reports */
export interface PreciseMonetaryValueModel {
  amount: number;
  currency: string;
}

export interface AggregateTransactionListModel {
  /** Aggregated data for the main accounts. */
  aggregations: AggregateTransactionItemModel[];
  total: AggregatesTotalModel;
}

export interface AggregateTransactionItemModel {
  account: ExportAccountModel;
  /** Use this model in all accounting reports */
  creditedAmount: PreciseMonetaryValueModel;
  /** Use this model in all accounting reports */
  debitedAmount: PreciseMonetaryValueModel;
  /** Use this model in all accounting reports */
  balance: PreciseMonetaryValueModel;
}

export interface AggregatesTotalModel {
  /** Use this model in all accounting reports */
  creditedAmount: PreciseMonetaryValueModel;
  /** Use this model in all accounting reports */
  debitedAmount: PreciseMonetaryValueModel;
  /** Use this model in all accounting reports */
  balance: PreciseMonetaryValueModel;
}

export interface AccountingTransactionListModel {
  /** The list of transactions */
  transactions: AccountingTransactionModel[];
}

export interface AccountingTransactionModel {
  /** Timestamp with time zone information, when the booking was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  timestamp: Date;
  /** The business date when the booking was done */
  date: Date;
  debitedAccount: ExportAccountModel;
  creditedAccount: ExportAccountModel;
  /** The type of business transaction which triggered the booking */
  command: AccountingTransactionModelCommand;
  /** Use this model in all accounting reports */
  amount: PreciseMonetaryValueModel;
  receipt?: ReceiptModel;
  /** All transactions having the same number form one booking */
  entryNumber: string;
  /** The reference for the transactions, reservation id for guest folios, folio id for external folios, property code for the house folio */
  reference: string;
  /** Does this transaction belong to a reservation, a house or an external folio */
  referenceType: AccountingTransactionModelReferenceType;
  /** All transactions triggered by the same business transaction share one group number */
  entryGroupNumber: string;
}

export interface ReceiptModel {
  /** The type of receipt. */
  type?: ReceiptModelType;
  /** The receipt number. */
  number: string;
}

export interface ExportGrossTransactionListModel {
  /** List of transactions with all details. */
  transactions: ExportGrossTransactionItemModel[];
}

export interface ExportGrossTransactionItemModel {
  /** Timestamp with time zone information, when the booking was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  timestamp: Date;
  /** The business date when the booking was done */
  date: Date;
  debitedAccount: ExportAccountModel;
  creditedAccount: ExportAccountModel;
  /** The type of business transaction which triggered the booking */
  command: ExportGrossTransactionItemModelCommand;
  /** The currency of the transaction */
  currency: string;
  /** The gross amount being booked */
  grossAmount: number;
  /** The net amount being booked */
  netAmount: number;
  /** The taxes which make up the difference between net and gross amount */
  taxes?: TaxAmountModel[];
  receipt: ReceiptModel;
  /** The original raw transaction entry number which got converted to these one or 2 lines. */
  sourceEntryNumber: string;
  /** The reference for the transactions, reservation id for guest folios, folio id for external folios, property code for the house folio */
  reference: string;
  /** Does this transaction belong to a reservation, a house or an external folio */
  referenceType: ExportGrossTransactionItemModelReferenceType;
}

export interface TaxAmountModel {
  /** The VAT type */
  type: TaxAmountModelType;
  /** The currently valid percent to calculate the VAT */
  percent: number;
  /** The tax amount */
  amount: number;
}

export interface ChartOfAccountsModel {
  /** The predefined list of global accounts of a property's subledger */
  globalAccounts: SlimFinanceAccountModel[];
  /** The predefined list of guest specific accounts of a property's subledger. */
  guestAccounts: SlimFinanceAccountModel[];
  /** The predefined list of external accounts of a property's subledger. */
  externalAccounts: SlimFinanceAccountModel[];
}

export interface SlimFinanceAccountModel {
  /** The account number. Unique identifier within one property. */
  accountNumber: string;
  /** The name of the account. */
  name: string;
  /** The type of account. */
  type: SlimFinanceAccountModelType;
  /** Parent account number. Null for top-level accounts. */
  parentNumber?: string;
  /** Indicates whether this account has children / sub accounts or not. */
  hasChildren: boolean;
  /** Indicates whether this account is archived ot not. */
  isArchived: boolean;
  vat?: VatItemModel;
  /** Sub accounts for this accounts. */
  subAccounts?: SlimFinanceAccountModel[];
}

export interface VatItemModel {
  /** The VAT type */
  type: VatItemModelType;
  /** The currently valid percent to calculate the VAT */
  percent: number;
}

export interface FinanceAccountListModel {
  /** List of accounts in a property, having one specific parent. */
  accounts: SlimFinanceAccountModel[];
  /** Total count of items */
  count: number;
}

export interface FinanceAccountModel {
  /** The account number. Unique identifier within one property. */
  accountNumber: string;
  /** The name of the account. */
  name: string;
  /** The type of account. */
  type: FinanceAccountModelType;
  /**
   * Indicates whether this account has children / sub accounts or not. The children can be retrieved via GET /accounts and querying
   * by parent.
   */
  hasChildren: boolean;
  /** Parent account number. Null for top-level accounts. */
  parentNumber?: string;
  /** Indicates whether this account is archived ot not. */
  isArchived: boolean;
  /** All transactions / bookings involving this account. */
  transactions?: AccountingTransactionModel[];
}

export interface CurrencyListModel {
  /** List of ISO currencies. */
  isoCurrencies: string[];
}

export interface PaymentMethodListModel {
  /** List of supported payment methods. */
  paymentMethods: PaymentMethodListModelPaymentMethodsItem[];
}

export interface ServiceTypeListModel {
  /** List of supported payment methods. */
  serviceTypes: ServiceTypeListModelServiceTypesItem[];
}

export interface VatListModel {
  vatTypes?: VatItemModel[];
}

export interface SplitChargeResult {
  allowanceId?: string;
  firstChargeId?: string;
  secondChargeId?: string;
}

export interface SplitPaymentResult {
  refundId?: string;
  firstPaymentId?: string;
  secondPaymentId?: string;
}

/** Defines headers for ApaleoFinanceAPI_financeFoliosPost operation. */
export interface ApaleoFinanceAPIFinanceFoliosPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoFinanceAPI_financeFolioActionsByFolioIdCorrectPost operation. */
export interface ApaleoFinanceAPIFinanceFolioActionsByFolioIdCorrectPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoFinanceAPI_financeFoliosByFolioIdPaymentsPost operation. */
export interface ApaleoFinanceAPIFinanceFoliosByFolioIdPaymentsPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoFinanceAPI_financeFoliosByFolioIdPaymentsByTerminalPost operation. */
export interface ApaleoFinanceAPIFinanceFoliosByFolioIdPaymentsByTerminalPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoFinanceAPI_financeFoliosByFolioIdPaymentsByAuthorizationPost operation. */
export interface ApaleoFinanceAPIFinanceFoliosByFolioIdPaymentsByAuthorizationPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoFinanceAPI_financeFoliosByFolioIdPaymentsByPaymentAccountPost operation. */
export interface ApaleoFinanceAPIFinanceFoliosByFolioIdPaymentsByPaymentAccountPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoFinanceAPI_financeFoliosByFolioIdPaymentsByLinkPost operation. */
export interface ApaleoFinanceAPIFinanceFoliosByFolioIdPaymentsByLinkPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoFinanceAPI_financeFoliosByFolioIdRefundsPost operation. */
export interface ApaleoFinanceAPIFinanceFoliosByFolioIdRefundsPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoFinanceAPI_financeFoliosByFolioIdPaymentsByPaymentIdRefundsPost operation. */
export interface ApaleoFinanceAPIFinanceFoliosByFolioIdPaymentsByPaymentIdRefundsPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoFinanceAPI_financeInvoicesPost operation. */
export interface ApaleoFinanceAPIFinanceInvoicesPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Known values of {@link Enum0} that the service accepts. */
export enum KnownEnum0 {
  House = 'House',
  Guest = 'Guest',
  External = 'External',
}

/**
 * Defines values for Enum0. \
 * {@link KnownEnum0} can be used interchangeably with Enum0,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **House** \
 * **Guest** \
 * **External**
 */
export type Enum0 = string;

/** Known values of {@link Get16ItemsItem} that the service accepts. */
export enum KnownGet16ItemsItem {
  Charges = 'charges',
  Allowances = 'allowances',
  TransitoryCharges = 'transitoryCharges',
  AllowedActions = 'allowedActions',
  Company = 'company',
  Warnings = 'warnings',
}

/**
 * Defines values for Get16ItemsItem. \
 * {@link KnownGet16ItemsItem} can be used interchangeably with Get16ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **charges** \
 * **allowances** \
 * **transitoryCharges** \
 * **allowedActions** \
 * **company** \
 * **warnings**
 */
export type Get16ItemsItem = string;

/** Known values of {@link FolioItemModelType} that the service accepts. */
export enum KnownFolioItemModelType {
  House = 'House',
  Guest = 'Guest',
  External = 'External',
}

/**
 * Defines values for FolioItemModelType. \
 * {@link KnownFolioItemModelType} can be used interchangeably with FolioItemModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **House** \
 * **Guest** \
 * **External**
 */
export type FolioItemModelType = string;

/** Known values of {@link FolioDebitorModelType} that the service accepts. */
export enum KnownFolioDebitorModelType {
  Booker = 'Booker',
  PrimaryGuest = 'PrimaryGuest',
  Company = 'Company',
  AdditionalGuest = 'AdditionalGuest',
  Property = 'Property',
}

/**
 * Defines values for FolioDebitorModelType. \
 * {@link KnownFolioDebitorModelType} can be used interchangeably with FolioDebitorModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Booker** \
 * **PrimaryGuest** \
 * **Company** \
 * **AdditionalGuest** \
 * **Property**
 */
export type FolioDebitorModelType = string;

/** Known values of {@link FolioDebitorModelTitle} that the service accepts. */
export enum KnownFolioDebitorModelTitle {
  Mr = 'Mr',
  Ms = 'Ms',
  Dr = 'Dr',
  Prof = 'Prof',
  Mrs = 'Mrs',
  Other = 'Other',
}

/**
 * Defines values for FolioDebitorModelTitle. \
 * {@link KnownFolioDebitorModelTitle} can be used interchangeably with FolioDebitorModelTitle,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Mr** \
 * **Ms** \
 * **Dr** \
 * **Prof** \
 * **Mrs** \
 * **Other**
 */
export type FolioDebitorModelTitle = string;

/** Known values of {@link FolioItemModelAllowedActionsItem} that the service accepts. */
export enum KnownFolioItemModelAllowedActionsItem {
  AddCharge = 'AddCharge',
  AddAllowance = 'AddAllowance',
  AddCancellationFee = 'AddCancellationFee',
  AddNoShowFee = 'AddNoShowFee',
  AddPayment = 'AddPayment',
  AddRefund = 'AddRefund',
  CheckoutOnAr = 'CheckoutOnAr',
  Close = 'Close',
  PostOpenCharges = 'PostOpenCharges',
  CorrectFolio = 'CorrectFolio',
  ChangeAddress = 'ChangeAddress',
  ChangeAddressWithSimpleDebitor = 'ChangeAddressWithSimpleDebitor',
  Delete = 'Delete',
  Reopen = 'Reopen',
  CreateInvoice = 'CreateInvoice',
  CreateAdvanceInvoice = 'CreateAdvanceInvoice',
  CancelLastInvoice = 'CancelLastInvoice',
  CreateInvoiceWithSimpleDebitor = 'CreateInvoiceWithSimpleDebitor',
  CreatePrepaymentNotice = 'CreatePrepaymentNotice',
}

/**
 * Defines values for FolioItemModelAllowedActionsItem. \
 * {@link KnownFolioItemModelAllowedActionsItem} can be used interchangeably with FolioItemModelAllowedActionsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AddCharge** \
 * **AddAllowance** \
 * **AddCancellationFee** \
 * **AddNoShowFee** \
 * **AddPayment** \
 * **AddRefund** \
 * **CheckoutOnAr** \
 * **Close** \
 * **PostOpenCharges** \
 * **CorrectFolio** \
 * **ChangeAddress** \
 * **ChangeAddressWithSimpleDebitor** \
 * **Delete** \
 * **Reopen** \
 * **CreateInvoice** \
 * **CreateAdvanceInvoice** \
 * **CancelLastInvoice** \
 * **CreateInvoiceWithSimpleDebitor** \
 * **CreatePrepaymentNotice**
 */
export type FolioItemModelAllowedActionsItem = string;

/** Known values of {@link FolioItemModelStatus} that the service accepts. */
export enum KnownFolioItemModelStatus {
  Open = 'Open',
  Closed = 'Closed',
  ClosedWithInvoice = 'ClosedWithInvoice',
}

/**
 * Defines values for FolioItemModelStatus. \
 * {@link KnownFolioItemModelStatus} can be used interchangeably with FolioItemModelStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Open** \
 * **Closed** \
 * **ClosedWithInvoice**
 */
export type FolioItemModelStatus = string;

/** Known values of {@link ChargeModelServiceType} that the service accepts. */
export enum KnownChargeModelServiceType {
  Other = 'Other',
  Accommodation = 'Accommodation',
  FoodAndBeverages = 'FoodAndBeverages',
  CancellationFees = 'CancellationFees',
  NoShow = 'NoShow',
  CityTax = 'CityTax',
}

/**
 * Defines values for ChargeModelServiceType. \
 * {@link KnownChargeModelServiceType} can be used interchangeably with ChargeModelServiceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Other** \
 * **Accommodation** \
 * **FoodAndBeverages** \
 * **CancellationFees** \
 * **NoShow** \
 * **CityTax**
 */
export type ChargeModelServiceType = string;

/** Known values of {@link AmountModelVatType} that the service accepts. */
export enum KnownAmountModelVatType {
  Null = 'Null',
  VeryReduced = 'VeryReduced',
  Reduced = 'Reduced',
  Normal = 'Normal',
  Without = 'Without',
  Special = 'Special',
  ReducedCovid19 = 'ReducedCovid19',
  NormalCovid19 = 'NormalCovid19',
}

/**
 * Defines values for AmountModelVatType. \
 * {@link KnownAmountModelVatType} can be used interchangeably with AmountModelVatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Null** \
 * **VeryReduced** \
 * **Reduced** \
 * **Normal** \
 * **Without** \
 * **Special** \
 * **ReducedCovid19** \
 * **NormalCovid19**
 */
export type AmountModelVatType = string;

/** Known values of {@link AllowanceModelServiceType} that the service accepts. */
export enum KnownAllowanceModelServiceType {
  Other = 'Other',
  Accommodation = 'Accommodation',
  FoodAndBeverages = 'FoodAndBeverages',
  CancellationFees = 'CancellationFees',
  NoShow = 'NoShow',
  CityTax = 'CityTax',
}

/**
 * Defines values for AllowanceModelServiceType. \
 * {@link KnownAllowanceModelServiceType} can be used interchangeably with AllowanceModelServiceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Other** \
 * **Accommodation** \
 * **FoodAndBeverages** \
 * **CancellationFees** \
 * **NoShow** \
 * **CityTax**
 */
export type AllowanceModelServiceType = string;

/** Known values of {@link TransitoryChargeModelServiceType} that the service accepts. */
export enum KnownTransitoryChargeModelServiceType {
  Other = 'Other',
  Accommodation = 'Accommodation',
  FoodAndBeverages = 'FoodAndBeverages',
  CancellationFees = 'CancellationFees',
  NoShow = 'NoShow',
  CityTax = 'CityTax',
}

/**
 * Defines values for TransitoryChargeModelServiceType. \
 * {@link KnownTransitoryChargeModelServiceType} can be used interchangeably with TransitoryChargeModelServiceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Other** \
 * **Accommodation** \
 * **FoodAndBeverages** \
 * **CancellationFees** \
 * **NoShow** \
 * **CityTax**
 */
export type TransitoryChargeModelServiceType = string;

/** Known values of {@link CreateFolioModelType} that the service accepts. */
export enum KnownCreateFolioModelType {
  Guest = 'Guest',
  External = 'External',
}

/**
 * Defines values for CreateFolioModelType. \
 * {@link KnownCreateFolioModelType} can be used interchangeably with CreateFolioModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Guest** \
 * **External**
 */
export type CreateFolioModelType = string;

/** Known values of {@link Enum12} that the service accepts. */
export enum KnownEnum12 {
  House = 'House',
  Guest = 'Guest',
  External = 'External',
}

/**
 * Defines values for Enum12. \
 * {@link KnownEnum12} can be used interchangeably with Enum12,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **House** \
 * **Guest** \
 * **External**
 */
export type Enum12 = string;

/** Known values of {@link FolioModelType} that the service accepts. */
export enum KnownFolioModelType {
  House = 'House',
  Guest = 'Guest',
  External = 'External',
}

/**
 * Defines values for FolioModelType. \
 * {@link KnownFolioModelType} can be used interchangeably with FolioModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **House** \
 * **Guest** \
 * **External**
 */
export type FolioModelType = string;

/** Known values of {@link PaymentModelMethod} that the service accepts. */
export enum KnownPaymentModelMethod {
  Cash = 'Cash',
  BankTransfer = 'BankTransfer',
  CreditCard = 'CreditCard',
  Invoice = 'Invoice',
  Amex = 'Amex',
  VisaCredit = 'VisaCredit',
  VisaDebit = 'VisaDebit',
  MasterCard = 'MasterCard',
  MasterCardDebit = 'MasterCardDebit',
  Maestro = 'Maestro',
  GiroCard = 'GiroCard',
  DiscoverCard = 'DiscoverCard',
  Diners = 'Diners',
  Jcb = 'Jcb',
  BookingCom = 'BookingCom',
  VPay = 'VPay',
  PayPal = 'PayPal',
  Postcard = 'Postcard',
  Reka = 'Reka',
  Twint = 'Twint',
  Lunchcheck = 'Lunchcheck',
  Voucher = 'Voucher',
  ChinaUnionPay = 'ChinaUnionPay',
  Other = 'Other',
  Cheque = 'Cheque',
  Airbnb = 'Airbnb',
  HolidayCheck = 'HolidayCheck',
  PspCash = 'PspCash',
  PspDebit = 'PspDebit',
  PspBanking = 'PspBanking',
  PspOpenInvoice = 'PspOpenInvoice',
  PspWallet = 'PspWallet',
}

/**
 * Defines values for PaymentModelMethod. \
 * {@link KnownPaymentModelMethod} can be used interchangeably with PaymentModelMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cash** \
 * **BankTransfer** \
 * **CreditCard** \
 * **Invoice** \
 * **Amex** \
 * **VisaCredit** \
 * **VisaDebit** \
 * **MasterCard** \
 * **MasterCardDebit** \
 * **Maestro** \
 * **GiroCard** \
 * **DiscoverCard** \
 * **Diners** \
 * **Jcb** \
 * **BookingCom** \
 * **VPay** \
 * **PayPal** \
 * **Postcard** \
 * **Reka** \
 * **Twint** \
 * **Lunchcheck** \
 * **Voucher** \
 * **ChinaUnionPay** \
 * **Other** \
 * **Cheque** \
 * **Airbnb** \
 * **HolidayCheck** \
 * **PspCash** \
 * **PspDebit** \
 * **PspBanking** \
 * **PspOpenInvoice** \
 * **PspWallet**
 */
export type PaymentModelMethod = string;

/** Known values of {@link FolioModelAllowedActionsItem} that the service accepts. */
export enum KnownFolioModelAllowedActionsItem {
  AddCharge = 'AddCharge',
  AddAllowance = 'AddAllowance',
  AddCancellationFee = 'AddCancellationFee',
  AddNoShowFee = 'AddNoShowFee',
  AddPayment = 'AddPayment',
  AddRefund = 'AddRefund',
  CheckoutOnAr = 'CheckoutOnAr',
  Close = 'Close',
  PostOpenCharges = 'PostOpenCharges',
  CorrectFolio = 'CorrectFolio',
  ChangeAddress = 'ChangeAddress',
  ChangeAddressWithSimpleDebitor = 'ChangeAddressWithSimpleDebitor',
  Delete = 'Delete',
  Reopen = 'Reopen',
  CreateInvoice = 'CreateInvoice',
  CreateAdvanceInvoice = 'CreateAdvanceInvoice',
  CancelLastInvoice = 'CancelLastInvoice',
  CreateInvoiceWithSimpleDebitor = 'CreateInvoiceWithSimpleDebitor',
  CreatePrepaymentNotice = 'CreatePrepaymentNotice',
}

/**
 * Defines values for FolioModelAllowedActionsItem. \
 * {@link KnownFolioModelAllowedActionsItem} can be used interchangeably with FolioModelAllowedActionsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AddCharge** \
 * **AddAllowance** \
 * **AddCancellationFee** \
 * **AddNoShowFee** \
 * **AddPayment** \
 * **AddRefund** \
 * **CheckoutOnAr** \
 * **Close** \
 * **PostOpenCharges** \
 * **CorrectFolio** \
 * **ChangeAddress** \
 * **ChangeAddressWithSimpleDebitor** \
 * **Delete** \
 * **Reopen** \
 * **CreateInvoice** \
 * **CreateAdvanceInvoice** \
 * **CancelLastInvoice** \
 * **CreateInvoiceWithSimpleDebitor** \
 * **CreatePrepaymentNotice**
 */
export type FolioModelAllowedActionsItem = string;

/** Known values of {@link FolioModelStatus} that the service accepts. */
export enum KnownFolioModelStatus {
  Open = 'Open',
  Closed = 'Closed',
  ClosedWithInvoice = 'ClosedWithInvoice',
}

/**
 * Defines values for FolioModelStatus. \
 * {@link KnownFolioModelStatus} can be used interchangeably with FolioModelStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Open** \
 * **Closed** \
 * **ClosedWithInvoice**
 */
export type FolioModelStatus = string;

/** Known values of {@link CreateChargeModelServiceType} that the service accepts. */
export enum KnownCreateChargeModelServiceType {
  Other = 'Other',
  Accommodation = 'Accommodation',
  FoodAndBeverages = 'FoodAndBeverages',
  CityTax = 'CityTax',
}

/**
 * Defines values for CreateChargeModelServiceType. \
 * {@link KnownCreateChargeModelServiceType} can be used interchangeably with CreateChargeModelServiceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Other** \
 * **Accommodation** \
 * **FoodAndBeverages** \
 * **CityTax**
 */
export type CreateChargeModelServiceType = string;

/** Known values of {@link CreateChargeModelVatType} that the service accepts. */
export enum KnownCreateChargeModelVatType {
  Null = 'Null',
  VeryReduced = 'VeryReduced',
  Reduced = 'Reduced',
  Normal = 'Normal',
  Without = 'Without',
  Special = 'Special',
  ReducedCovid19 = 'ReducedCovid19',
  NormalCovid19 = 'NormalCovid19',
}

/**
 * Defines values for CreateChargeModelVatType. \
 * {@link KnownCreateChargeModelVatType} can be used interchangeably with CreateChargeModelVatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Null** \
 * **VeryReduced** \
 * **Reduced** \
 * **Normal** \
 * **Without** \
 * **Special** \
 * **ReducedCovid19** \
 * **NormalCovid19**
 */
export type CreateChargeModelVatType = string;

/** Known values of {@link CreateTransitoryChargeModelServiceType} that the service accepts. */
export enum KnownCreateTransitoryChargeModelServiceType {
  Other = 'Other',
  Accommodation = 'Accommodation',
  FoodAndBeverages = 'FoodAndBeverages',
  CityTax = 'CityTax',
}

/**
 * Defines values for CreateTransitoryChargeModelServiceType. \
 * {@link KnownCreateTransitoryChargeModelServiceType} can be used interchangeably with CreateTransitoryChargeModelServiceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Other** \
 * **Accommodation** \
 * **FoodAndBeverages** \
 * **CityTax**
 */
export type CreateTransitoryChargeModelServiceType = string;

/** Known values of {@link CreateAllowanceForFolioModelServiceType} that the service accepts. */
export enum KnownCreateAllowanceForFolioModelServiceType {
  Other = 'Other',
  Accommodation = 'Accommodation',
  FoodAndBeverages = 'FoodAndBeverages',
  CityTax = 'CityTax',
}

/**
 * Defines values for CreateAllowanceForFolioModelServiceType. \
 * {@link KnownCreateAllowanceForFolioModelServiceType} can be used interchangeably with CreateAllowanceForFolioModelServiceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Other** \
 * **Accommodation** \
 * **FoodAndBeverages** \
 * **CityTax**
 */
export type CreateAllowanceForFolioModelServiceType = string;

/** Known values of {@link CreateAllowanceForFolioModelVatType} that the service accepts. */
export enum KnownCreateAllowanceForFolioModelVatType {
  Null = 'Null',
  VeryReduced = 'VeryReduced',
  Reduced = 'Reduced',
  Normal = 'Normal',
  Without = 'Without',
  Special = 'Special',
  ReducedCovid19 = 'ReducedCovid19',
  NormalCovid19 = 'NormalCovid19',
}

/**
 * Defines values for CreateAllowanceForFolioModelVatType. \
 * {@link KnownCreateAllowanceForFolioModelVatType} can be used interchangeably with CreateAllowanceForFolioModelVatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Null** \
 * **VeryReduced** \
 * **Reduced** \
 * **Normal** \
 * **Without** \
 * **Special** \
 * **ReducedCovid19** \
 * **NormalCovid19**
 */
export type CreateAllowanceForFolioModelVatType = string;

/** Known values of {@link SplitChargeRequestType} that the service accepts. */
export enum KnownSplitChargeRequestType {
  ByPercent = 'ByPercent',
  ByAmount = 'ByAmount',
}

/**
 * Defines values for SplitChargeRequestType. \
 * {@link KnownSplitChargeRequestType} can be used interchangeably with SplitChargeRequestType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ByPercent** \
 * **ByAmount**
 */
export type SplitChargeRequestType = string;

/** Known values of {@link SplitPaymentRequestType} that the service accepts. */
export enum KnownSplitPaymentRequestType {
  ByPercent = 'ByPercent',
  ByAmount = 'ByAmount',
}

/**
 * Defines values for SplitPaymentRequestType. \
 * {@link KnownSplitPaymentRequestType} can be used interchangeably with SplitPaymentRequestType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ByPercent** \
 * **ByAmount**
 */
export type SplitPaymentRequestType = string;

/** Known values of {@link Enum24} that the service accepts. */
export enum KnownEnum24 {
  Pending = 'Pending',
  Success = 'Success',
  Failure = 'Failure',
  Canceled = 'Canceled',
}

/**
 * Defines values for Enum24. \
 * {@link KnownEnum24} can be used interchangeably with Enum24,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Success** \
 * **Failure** \
 * **Canceled**
 */
export type Enum24 = string;

/** Known values of {@link FolioPaymentModelMethod} that the service accepts. */
export enum KnownFolioPaymentModelMethod {
  Cash = 'Cash',
  BankTransfer = 'BankTransfer',
  CreditCard = 'CreditCard',
  Invoice = 'Invoice',
  Amex = 'Amex',
  VisaCredit = 'VisaCredit',
  VisaDebit = 'VisaDebit',
  MasterCard = 'MasterCard',
  MasterCardDebit = 'MasterCardDebit',
  Maestro = 'Maestro',
  GiroCard = 'GiroCard',
  DiscoverCard = 'DiscoverCard',
  Diners = 'Diners',
  Jcb = 'Jcb',
  BookingCom = 'BookingCom',
  VPay = 'VPay',
  PayPal = 'PayPal',
  Postcard = 'Postcard',
  Reka = 'Reka',
  Twint = 'Twint',
  Lunchcheck = 'Lunchcheck',
  Voucher = 'Voucher',
  ChinaUnionPay = 'ChinaUnionPay',
  Other = 'Other',
  Cheque = 'Cheque',
  Airbnb = 'Airbnb',
  HolidayCheck = 'HolidayCheck',
  PspCash = 'PspCash',
  PspDebit = 'PspDebit',
  PspBanking = 'PspBanking',
  PspOpenInvoice = 'PspOpenInvoice',
  PspWallet = 'PspWallet',
}

/**
 * Defines values for FolioPaymentModelMethod. \
 * {@link KnownFolioPaymentModelMethod} can be used interchangeably with FolioPaymentModelMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cash** \
 * **BankTransfer** \
 * **CreditCard** \
 * **Invoice** \
 * **Amex** \
 * **VisaCredit** \
 * **VisaDebit** \
 * **MasterCard** \
 * **MasterCardDebit** \
 * **Maestro** \
 * **GiroCard** \
 * **DiscoverCard** \
 * **Diners** \
 * **Jcb** \
 * **BookingCom** \
 * **VPay** \
 * **PayPal** \
 * **Postcard** \
 * **Reka** \
 * **Twint** \
 * **Lunchcheck** \
 * **Voucher** \
 * **ChinaUnionPay** \
 * **Other** \
 * **Cheque** \
 * **Airbnb** \
 * **HolidayCheck** \
 * **PspCash** \
 * **PspDebit** \
 * **PspBanking** \
 * **PspOpenInvoice** \
 * **PspWallet**
 */
export type FolioPaymentModelMethod = string;

/** Known values of {@link FolioPaymentModelStatus} that the service accepts. */
export enum KnownFolioPaymentModelStatus {
  Pending = 'Pending',
  Success = 'Success',
  Failure = 'Failure',
  Canceled = 'Canceled',
}

/**
 * Defines values for FolioPaymentModelStatus. \
 * {@link KnownFolioPaymentModelStatus} can be used interchangeably with FolioPaymentModelStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Success** \
 * **Failure** \
 * **Canceled**
 */
export type FolioPaymentModelStatus = string;

/** Known values of {@link FolioPaymentModelFailureCode} that the service accepts. */
export enum KnownFolioPaymentModelFailureCode {
  Failed = 'Failed',
  TimedOut = 'TimedOut',
}

/**
 * Defines values for FolioPaymentModelFailureCode. \
 * {@link KnownFolioPaymentModelFailureCode} can be used interchangeably with FolioPaymentModelFailureCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Failed** \
 * **TimedOut**
 */
export type FolioPaymentModelFailureCode = string;

/** Known values of {@link FolioPaymentModelType} that the service accepts. */
export enum KnownFolioPaymentModelType {
  Custom = 'Custom',
  Terminal = 'Terminal',
  PaymentAccount = 'PaymentAccount',
  Authorization = 'Authorization',
  PaymentLink = 'PaymentLink',
}

/**
 * Defines values for FolioPaymentModelType. \
 * {@link KnownFolioPaymentModelType} can be used interchangeably with FolioPaymentModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Custom** \
 * **Terminal** \
 * **PaymentAccount** \
 * **Authorization** \
 * **PaymentLink**
 */
export type FolioPaymentModelType = string;

/** Known values of {@link ActionModelPaymentActionNotAllowedPaymentActionReasonAction} that the service accepts. */
export enum KnownActionModelPaymentActionNotAllowedPaymentActionReasonAction {
  Cancel = 'Cancel',
  OnlineRefund = 'OnlineRefund',
  ManualRefund = 'ManualRefund',
}

/**
 * Defines values for ActionModelPaymentActionNotAllowedPaymentActionReasonAction. \
 * {@link KnownActionModelPaymentActionNotAllowedPaymentActionReasonAction} can be used interchangeably with ActionModelPaymentActionNotAllowedPaymentActionReasonAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cancel** \
 * **OnlineRefund** \
 * **ManualRefund**
 */
export type ActionModelPaymentActionNotAllowedPaymentActionReasonAction =
  string;

/** Known values of {@link ActionReasonModelNotAllowedPaymentActionReasonCode} that the service accepts. */
export enum KnownActionReasonModelNotAllowedPaymentActionReasonCode {
  CancelNotAllowedForPaymentNotInStatusPending = 'CancelNotAllowedForPaymentNotInStatusPending',
  CancelNotAllowedForPaymentNotOfPaymentLinkType = 'CancelNotAllowedForPaymentNotOfPaymentLinkType',
  OnlineRefundNotAllowedForRestrictedPaymentMethodOrAcquirer = 'OnlineRefundNotAllowedForRestrictedPaymentMethodOrAcquirer',
  ManualRefundNotAllowedWhenOnlineRefundIsPossible = 'ManualRefundNotAllowedWhenOnlineRefundIsPossible',
}

/**
 * Defines values for ActionReasonModelNotAllowedPaymentActionReasonCode. \
 * {@link KnownActionReasonModelNotAllowedPaymentActionReasonCode} can be used interchangeably with ActionReasonModelNotAllowedPaymentActionReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CancelNotAllowedForPaymentNotInStatusPending** \
 * **CancelNotAllowedForPaymentNotOfPaymentLinkType** \
 * **OnlineRefundNotAllowedForRestrictedPaymentMethodOrAcquirer** \
 * **ManualRefundNotAllowedWhenOnlineRefundIsPossible**
 */
export type ActionReasonModelNotAllowedPaymentActionReasonCode = string;

/** Known values of {@link CreateCustomPaymentRequestMethod} that the service accepts. */
export enum KnownCreateCustomPaymentRequestMethod {
  Cash = 'Cash',
  BankTransfer = 'BankTransfer',
  CreditCard = 'CreditCard',
  Amex = 'Amex',
  VisaCredit = 'VisaCredit',
  VisaDebit = 'VisaDebit',
  MasterCard = 'MasterCard',
  MasterCardDebit = 'MasterCardDebit',
  Maestro = 'Maestro',
  GiroCard = 'GiroCard',
  DiscoverCard = 'DiscoverCard',
  Diners = 'Diners',
  Jcb = 'Jcb',
  BookingCom = 'BookingCom',
  VPay = 'VPay',
  PayPal = 'PayPal',
  Postcard = 'Postcard',
  Reka = 'Reka',
  Twint = 'Twint',
  Lunchcheck = 'Lunchcheck',
  Voucher = 'Voucher',
  ChinaUnionPay = 'ChinaUnionPay',
  Other = 'Other',
  Cheque = 'Cheque',
  Airbnb = 'Airbnb',
  HolidayCheck = 'HolidayCheck',
}

/**
 * Defines values for CreateCustomPaymentRequestMethod. \
 * {@link KnownCreateCustomPaymentRequestMethod} can be used interchangeably with CreateCustomPaymentRequestMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cash** \
 * **BankTransfer** \
 * **CreditCard** \
 * **Amex** \
 * **VisaCredit** \
 * **VisaDebit** \
 * **MasterCard** \
 * **MasterCardDebit** \
 * **Maestro** \
 * **GiroCard** \
 * **DiscoverCard** \
 * **Diners** \
 * **Jcb** \
 * **BookingCom** \
 * **VPay** \
 * **PayPal** \
 * **Postcard** \
 * **Reka** \
 * **Twint** \
 * **Lunchcheck** \
 * **Voucher** \
 * **ChinaUnionPay** \
 * **Other** \
 * **Cheque** \
 * **Airbnb** \
 * **HolidayCheck**
 */
export type CreateCustomPaymentRequestMethod = string;

/** Known values of {@link CreateAccountPaymentRequestAccountOwner} that the service accepts. */
export enum KnownCreateAccountPaymentRequestAccountOwner {
  Guest = 'Guest',
  Booker = 'Booker',
}

/**
 * Defines values for CreateAccountPaymentRequestAccountOwner. \
 * {@link KnownCreateAccountPaymentRequestAccountOwner} can be used interchangeably with CreateAccountPaymentRequestAccountOwner,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Guest** \
 * **Booker**
 */
export type CreateAccountPaymentRequestAccountOwner = string;

/** Known values of {@link Enum33} that the service accepts. */
export enum KnownEnum33 {
  Pending = 'Pending',
  Success = 'Success',
  Failure = 'Failure',
  Canceled = 'Canceled',
}

/**
 * Defines values for Enum33. \
 * {@link KnownEnum33} can be used interchangeably with Enum33,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Success** \
 * **Failure** \
 * **Canceled**
 */
export type Enum33 = string;

/** Known values of {@link RefundModelMethod} that the service accepts. */
export enum KnownRefundModelMethod {
  Cash = 'Cash',
  BankTransfer = 'BankTransfer',
  CreditCard = 'CreditCard',
  Invoice = 'Invoice',
  Amex = 'Amex',
  VisaCredit = 'VisaCredit',
  VisaDebit = 'VisaDebit',
  MasterCard = 'MasterCard',
  MasterCardDebit = 'MasterCardDebit',
  Maestro = 'Maestro',
  GiroCard = 'GiroCard',
  DiscoverCard = 'DiscoverCard',
  Diners = 'Diners',
  Jcb = 'Jcb',
  BookingCom = 'BookingCom',
  VPay = 'VPay',
  PayPal = 'PayPal',
  Postcard = 'Postcard',
  Reka = 'Reka',
  Twint = 'Twint',
  Lunchcheck = 'Lunchcheck',
  Voucher = 'Voucher',
  ChinaUnionPay = 'ChinaUnionPay',
  Other = 'Other',
  Cheque = 'Cheque',
  Airbnb = 'Airbnb',
  HolidayCheck = 'HolidayCheck',
  PspCash = 'PspCash',
  PspDebit = 'PspDebit',
  PspBanking = 'PspBanking',
  PspOpenInvoice = 'PspOpenInvoice',
  PspWallet = 'PspWallet',
}

/**
 * Defines values for RefundModelMethod. \
 * {@link KnownRefundModelMethod} can be used interchangeably with RefundModelMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cash** \
 * **BankTransfer** \
 * **CreditCard** \
 * **Invoice** \
 * **Amex** \
 * **VisaCredit** \
 * **VisaDebit** \
 * **MasterCard** \
 * **MasterCardDebit** \
 * **Maestro** \
 * **GiroCard** \
 * **DiscoverCard** \
 * **Diners** \
 * **Jcb** \
 * **BookingCom** \
 * **VPay** \
 * **PayPal** \
 * **Postcard** \
 * **Reka** \
 * **Twint** \
 * **Lunchcheck** \
 * **Voucher** \
 * **ChinaUnionPay** \
 * **Other** \
 * **Cheque** \
 * **Airbnb** \
 * **HolidayCheck** \
 * **PspCash** \
 * **PspDebit** \
 * **PspBanking** \
 * **PspOpenInvoice** \
 * **PspWallet**
 */
export type RefundModelMethod = string;

/** Known values of {@link RefundModelStatus} that the service accepts. */
export enum KnownRefundModelStatus {
  Pending = 'Pending',
  Success = 'Success',
  Failure = 'Failure',
  Canceled = 'Canceled',
}

/**
 * Defines values for RefundModelStatus. \
 * {@link KnownRefundModelStatus} can be used interchangeably with RefundModelStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Success** \
 * **Failure** \
 * **Canceled**
 */
export type RefundModelStatus = string;

/** Known values of {@link RefundModelFailureCode} that the service accepts. */
export enum KnownRefundModelFailureCode {
  Failed = 'Failed',
  TimedOut = 'TimedOut',
}

/**
 * Defines values for RefundModelFailureCode. \
 * {@link KnownRefundModelFailureCode} can be used interchangeably with RefundModelFailureCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Failed** \
 * **TimedOut**
 */
export type RefundModelFailureCode = string;

/** Known values of {@link CreateFolioRefundRequestMethod} that the service accepts. */
export enum KnownCreateFolioRefundRequestMethod {
  Cash = 'Cash',
  BankTransfer = 'BankTransfer',
  CreditCard = 'CreditCard',
  Amex = 'Amex',
  VisaCredit = 'VisaCredit',
  VisaDebit = 'VisaDebit',
  MasterCard = 'MasterCard',
  MasterCardDebit = 'MasterCardDebit',
  Maestro = 'Maestro',
  GiroCard = 'GiroCard',
  DiscoverCard = 'DiscoverCard',
  Diners = 'Diners',
  Jcb = 'Jcb',
  BookingCom = 'BookingCom',
  VPay = 'VPay',
  PayPal = 'PayPal',
  Postcard = 'Postcard',
  Reka = 'Reka',
  Twint = 'Twint',
  Lunchcheck = 'Lunchcheck',
  Voucher = 'Voucher',
  ChinaUnionPay = 'ChinaUnionPay',
  Other = 'Other',
  Cheque = 'Cheque',
  Airbnb = 'Airbnb',
  HolidayCheck = 'HolidayCheck',
}

/**
 * Defines values for CreateFolioRefundRequestMethod. \
 * {@link KnownCreateFolioRefundRequestMethod} can be used interchangeably with CreateFolioRefundRequestMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cash** \
 * **BankTransfer** \
 * **CreditCard** \
 * **Amex** \
 * **VisaCredit** \
 * **VisaDebit** \
 * **MasterCard** \
 * **MasterCardDebit** \
 * **Maestro** \
 * **GiroCard** \
 * **DiscoverCard** \
 * **Diners** \
 * **Jcb** \
 * **BookingCom** \
 * **VPay** \
 * **PayPal** \
 * **Postcard** \
 * **Reka** \
 * **Twint** \
 * **Lunchcheck** \
 * **Voucher** \
 * **ChinaUnionPay** \
 * **Other** \
 * **Cheque** \
 * **Airbnb** \
 * **HolidayCheck**
 */
export type CreateFolioRefundRequestMethod = string;

/** Known values of {@link PreviewInvoiceModelCreateInvoiceAction} that the service accepts. */
export enum KnownPreviewInvoiceModelCreateInvoiceAction {
  CannotCreateInvoice = 'CannotCreateInvoice',
  CreatesInvoice = 'CreatesInvoice',
  CreatesInvoiceAndClosesFolio = 'CreatesInvoiceAndClosesFolio',
  CreatesArInvoiceAndClosesFolio = 'CreatesArInvoiceAndClosesFolio',
}

/**
 * Defines values for PreviewInvoiceModelCreateInvoiceAction. \
 * {@link KnownPreviewInvoiceModelCreateInvoiceAction} can be used interchangeably with PreviewInvoiceModelCreateInvoiceAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CannotCreateInvoice** \
 * **CreatesInvoice** \
 * **CreatesInvoiceAndClosesFolio** \
 * **CreatesArInvoiceAndClosesFolio**
 */
export type PreviewInvoiceModelCreateInvoiceAction = string;

/** Known values of {@link CreateInvoiceWarningModelType} that the service accepts. */
export enum KnownCreateInvoiceWarningModelType {
  InvoiceAlreadyExists = 'InvoiceAlreadyExists',
  NotAllChargesPosted = 'NotAllChargesPosted',
  DebitorDetailsMissing = 'DebitorDetailsMissing',
  InvoiceHasPendingPayments = 'InvoiceHasPendingPayments',
  NoCompanyFound = 'NoCompanyFound',
  CompanyCannotCheckOutOnAr = 'CompanyCannotCheckOutOnAr',
  IsHouseFolio = 'IsHouseFolio',
  CannotCreateCompanyInvoiceForExternal = 'CannotCreateCompanyInvoiceForExternal',
  CheckOutOnArIsNotAllowed = 'CheckOutOnArIsNotAllowed',
}

/**
 * Defines values for CreateInvoiceWarningModelType. \
 * {@link KnownCreateInvoiceWarningModelType} can be used interchangeably with CreateInvoiceWarningModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InvoiceAlreadyExists** \
 * **NotAllChargesPosted** \
 * **DebitorDetailsMissing** \
 * **InvoiceHasPendingPayments** \
 * **NoCompanyFound** \
 * **CompanyCannotCheckOutOnAr** \
 * **IsHouseFolio** \
 * **CannotCreateCompanyInvoiceForExternal** \
 * **CheckOutOnArIsNotAllowed**
 */
export type CreateInvoiceWarningModelType = string;

/** Known values of {@link InvoiceLineItemModelVatType} that the service accepts. */
export enum KnownInvoiceLineItemModelVatType {
  Null = 'Null',
  VeryReduced = 'VeryReduced',
  Reduced = 'Reduced',
  Normal = 'Normal',
  Without = 'Without',
  Special = 'Special',
  ReducedCovid19 = 'ReducedCovid19',
  NormalCovid19 = 'NormalCovid19',
}

/**
 * Defines values for InvoiceLineItemModelVatType. \
 * {@link KnownInvoiceLineItemModelVatType} can be used interchangeably with InvoiceLineItemModelVatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Null** \
 * **VeryReduced** \
 * **Reduced** \
 * **Normal** \
 * **Without** \
 * **Special** \
 * **ReducedCovid19** \
 * **NormalCovid19**
 */
export type InvoiceLineItemModelVatType = string;

/** Known values of {@link IncludedLineItemModelVatType} that the service accepts. */
export enum KnownIncludedLineItemModelVatType {
  Null = 'Null',
  VeryReduced = 'VeryReduced',
  Reduced = 'Reduced',
  Normal = 'Normal',
  Without = 'Without',
  Special = 'Special',
  ReducedCovid19 = 'ReducedCovid19',
  NormalCovid19 = 'NormalCovid19',
}

/**
 * Defines values for IncludedLineItemModelVatType. \
 * {@link KnownIncludedLineItemModelVatType} can be used interchangeably with IncludedLineItemModelVatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Null** \
 * **VeryReduced** \
 * **Reduced** \
 * **Normal** \
 * **Without** \
 * **Special** \
 * **ReducedCovid19** \
 * **NormalCovid19**
 */
export type IncludedLineItemModelVatType = string;

/** Known values of {@link InvoicePaymentModelMethod} that the service accepts. */
export enum KnownInvoicePaymentModelMethod {
  Cash = 'Cash',
  BankTransfer = 'BankTransfer',
  CreditCard = 'CreditCard',
  Invoice = 'Invoice',
  Amex = 'Amex',
  VisaCredit = 'VisaCredit',
  VisaDebit = 'VisaDebit',
  MasterCard = 'MasterCard',
  MasterCardDebit = 'MasterCardDebit',
  Maestro = 'Maestro',
  GiroCard = 'GiroCard',
  DiscoverCard = 'DiscoverCard',
  Diners = 'Diners',
  Jcb = 'Jcb',
  BookingCom = 'BookingCom',
  VPay = 'VPay',
  PayPal = 'PayPal',
  Postcard = 'Postcard',
  Reka = 'Reka',
  Twint = 'Twint',
  Lunchcheck = 'Lunchcheck',
  Voucher = 'Voucher',
  ChinaUnionPay = 'ChinaUnionPay',
  Other = 'Other',
  Cheque = 'Cheque',
  Airbnb = 'Airbnb',
  HolidayCheck = 'HolidayCheck',
  PspCash = 'PspCash',
  PspDebit = 'PspDebit',
  PspBanking = 'PspBanking',
  PspOpenInvoice = 'PspOpenInvoice',
  PspWallet = 'PspWallet',
}

/**
 * Defines values for InvoicePaymentModelMethod. \
 * {@link KnownInvoicePaymentModelMethod} can be used interchangeably with InvoicePaymentModelMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cash** \
 * **BankTransfer** \
 * **CreditCard** \
 * **Invoice** \
 * **Amex** \
 * **VisaCredit** \
 * **VisaDebit** \
 * **MasterCard** \
 * **MasterCardDebit** \
 * **Maestro** \
 * **GiroCard** \
 * **DiscoverCard** \
 * **Diners** \
 * **Jcb** \
 * **BookingCom** \
 * **VPay** \
 * **PayPal** \
 * **Postcard** \
 * **Reka** \
 * **Twint** \
 * **Lunchcheck** \
 * **Voucher** \
 * **ChinaUnionPay** \
 * **Other** \
 * **Cheque** \
 * **Airbnb** \
 * **HolidayCheck** \
 * **PspCash** \
 * **PspDebit** \
 * **PspBanking** \
 * **PspOpenInvoice** \
 * **PspWallet**
 */
export type InvoicePaymentModelMethod = string;

/** Known values of {@link TaxDetailModelVatType} that the service accepts. */
export enum KnownTaxDetailModelVatType {
  Null = 'Null',
  VeryReduced = 'VeryReduced',
  Reduced = 'Reduced',
  Normal = 'Normal',
  Without = 'Without',
  Special = 'Special',
  ReducedCovid19 = 'ReducedCovid19',
  NormalCovid19 = 'NormalCovid19',
}

/**
 * Defines values for TaxDetailModelVatType. \
 * {@link KnownTaxDetailModelVatType} can be used interchangeably with TaxDetailModelVatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Null** \
 * **VeryReduced** \
 * **Reduced** \
 * **Normal** \
 * **Without** \
 * **Special** \
 * **ReducedCovid19** \
 * **NormalCovid19**
 */
export type TaxDetailModelVatType = string;

/** Known values of {@link Get12ItemsItem} that the service accepts. */
export enum KnownGet12ItemsItem {
  AllowedActions = 'allowedActions',
  Company = 'company',
}

/**
 * Defines values for Get12ItemsItem. \
 * {@link KnownGet12ItemsItem} can be used interchangeably with Get12ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **allowedActions** \
 * **company**
 */
export type Get12ItemsItem = string;

/** Known values of {@link InvoiceItemModelType} that the service accepts. */
export enum KnownInvoiceItemModelType {
  Initial = 'Initial',
  Cancellation = 'Cancellation',
  Correction = 'Correction',
  Advance = 'Advance',
  AdvanceCancellation = 'AdvanceCancellation',
  AdvanceCorrection = 'AdvanceCorrection',
}

/**
 * Defines values for InvoiceItemModelType. \
 * {@link KnownInvoiceItemModelType} can be used interchangeably with InvoiceItemModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initial** \
 * **Cancellation** \
 * **Correction** \
 * **Advance** \
 * **AdvanceCancellation** \
 * **AdvanceCorrection**
 */
export type InvoiceItemModelType = string;

/** Known values of {@link InvoiceItemModelAllowedActionsItem} that the service accepts. */
export enum KnownInvoiceItemModelAllowedActionsItem {
  CorrectAddress = 'CorrectAddress',
  CorrectCharges = 'CorrectCharges',
  MarkAsPaid = 'MarkAsPaid',
  Cancel = 'Cancel',
}

/**
 * Defines values for InvoiceItemModelAllowedActionsItem. \
 * {@link KnownInvoiceItemModelAllowedActionsItem} can be used interchangeably with InvoiceItemModelAllowedActionsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CorrectAddress** \
 * **CorrectCharges** \
 * **MarkAsPaid** \
 * **Cancel**
 */
export type InvoiceItemModelAllowedActionsItem = string;

/** Known values of {@link InvoiceModelType} that the service accepts. */
export enum KnownInvoiceModelType {
  Initial = 'Initial',
  Cancellation = 'Cancellation',
  Correction = 'Correction',
  Advance = 'Advance',
  AdvanceCancellation = 'AdvanceCancellation',
  AdvanceCorrection = 'AdvanceCorrection',
}

/**
 * Defines values for InvoiceModelType. \
 * {@link KnownInvoiceModelType} can be used interchangeably with InvoiceModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initial** \
 * **Cancellation** \
 * **Correction** \
 * **Advance** \
 * **AdvanceCancellation** \
 * **AdvanceCorrection**
 */
export type InvoiceModelType = string;

/** Known values of {@link InvoiceModelAllowedActionsItem} that the service accepts. */
export enum KnownInvoiceModelAllowedActionsItem {
  CorrectAddress = 'CorrectAddress',
  CorrectCharges = 'CorrectCharges',
  MarkAsPaid = 'MarkAsPaid',
  Cancel = 'Cancel',
}

/**
 * Defines values for InvoiceModelAllowedActionsItem. \
 * {@link KnownInvoiceModelAllowedActionsItem} can be used interchangeably with InvoiceModelAllowedActionsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CorrectAddress** \
 * **CorrectCharges** \
 * **MarkAsPaid** \
 * **Cancel**
 */
export type InvoiceModelAllowedActionsItem = string;

/** Known values of {@link PayInvoiceRequestPaymentMethod} that the service accepts. */
export enum KnownPayInvoiceRequestPaymentMethod {
  Cash = 'Cash',
  BankTransfer = 'BankTransfer',
  CreditCard = 'CreditCard',
  Amex = 'Amex',
  VisaCredit = 'VisaCredit',
  VisaDebit = 'VisaDebit',
  MasterCard = 'MasterCard',
  MasterCardDebit = 'MasterCardDebit',
  Maestro = 'Maestro',
  GiroCard = 'GiroCard',
  DiscoverCard = 'DiscoverCard',
  Diners = 'Diners',
  Jcb = 'Jcb',
  BookingCom = 'BookingCom',
  VPay = 'VPay',
  PayPal = 'PayPal',
  Postcard = 'Postcard',
  Reka = 'Reka',
  Twint = 'Twint',
  Lunchcheck = 'Lunchcheck',
  Voucher = 'Voucher',
  ChinaUnionPay = 'ChinaUnionPay',
  Other = 'Other',
  Cheque = 'Cheque',
  Airbnb = 'Airbnb',
  HolidayCheck = 'HolidayCheck',
}

/**
 * Defines values for PayInvoiceRequestPaymentMethod. \
 * {@link KnownPayInvoiceRequestPaymentMethod} can be used interchangeably with PayInvoiceRequestPaymentMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cash** \
 * **BankTransfer** \
 * **CreditCard** \
 * **Amex** \
 * **VisaCredit** \
 * **VisaDebit** \
 * **MasterCard** \
 * **MasterCardDebit** \
 * **Maestro** \
 * **GiroCard** \
 * **DiscoverCard** \
 * **Diners** \
 * **Jcb** \
 * **BookingCom** \
 * **VPay** \
 * **PayPal** \
 * **Postcard** \
 * **Reka** \
 * **Twint** \
 * **Lunchcheck** \
 * **Voucher** \
 * **ChinaUnionPay** \
 * **Other** \
 * **Cheque** \
 * **Airbnb** \
 * **HolidayCheck**
 */
export type PayInvoiceRequestPaymentMethod = string;

/** Known values of {@link Enum50} that the service accepts. */
export enum KnownEnum50 {
  Revenues = 'Revenues',
  Payments = 'Payments',
  Liabilities = 'Liabilities',
  Receivables = 'Receivables',
  Vat = 'Vat',
  House = 'House',
  AccountsReceivable = 'AccountsReceivable',
  CityTaxes = 'CityTaxes',
  TransitoryItems = 'TransitoryItems',
  VatOnLiabilities = 'VatOnLiabilities',
}

/**
 * Defines values for Enum50. \
 * {@link KnownEnum50} can be used interchangeably with Enum50,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Revenues** \
 * **Payments** \
 * **Liabilities** \
 * **Receivables** \
 * **Vat** \
 * **House** \
 * **AccountsReceivable** \
 * **CityTaxes** \
 * **TransitoryItems** \
 * **VatOnLiabilities**
 */
export type Enum50 = string;

/** Known values of {@link Enum51} that the service accepts. */
export enum KnownEnum51 {
  Simple = 'Simple',
  Extended = 'Extended',
}

/**
 * Defines values for Enum51. \
 * {@link KnownEnum51} can be used interchangeably with Enum51,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Simple** \
 * **Extended**
 */
export type Enum51 = string;

/** Known values of {@link ExportAccountModelType} that the service accepts. */
export enum KnownExportAccountModelType {
  Revenues = 'Revenues',
  Payments = 'Payments',
  Liabilities = 'Liabilities',
  Receivables = 'Receivables',
  Vat = 'Vat',
  House = 'House',
  AccountsReceivable = 'AccountsReceivable',
  CityTaxes = 'CityTaxes',
  TransitoryItems = 'TransitoryItems',
  VatOnLiabilities = 'VatOnLiabilities',
}

/**
 * Defines values for ExportAccountModelType. \
 * {@link KnownExportAccountModelType} can be used interchangeably with ExportAccountModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Revenues** \
 * **Payments** \
 * **Liabilities** \
 * **Receivables** \
 * **Vat** \
 * **House** \
 * **AccountsReceivable** \
 * **CityTaxes** \
 * **TransitoryItems** \
 * **VatOnLiabilities**
 */
export type ExportAccountModelType = string;

/** Known values of {@link Enum53} that the service accepts. */
export enum KnownEnum53 {
  Revenues = 'Revenues',
  Payments = 'Payments',
  Liabilities = 'Liabilities',
  Receivables = 'Receivables',
  Vat = 'Vat',
  House = 'House',
  AccountsReceivable = 'AccountsReceivable',
  CityTaxes = 'CityTaxes',
  TransitoryItems = 'TransitoryItems',
  VatOnLiabilities = 'VatOnLiabilities',
}

/**
 * Defines values for Enum53. \
 * {@link KnownEnum53} can be used interchangeably with Enum53,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Revenues** \
 * **Payments** \
 * **Liabilities** \
 * **Receivables** \
 * **Vat** \
 * **House** \
 * **AccountsReceivable** \
 * **CityTaxes** \
 * **TransitoryItems** \
 * **VatOnLiabilities**
 */
export type Enum53 = string;

/** Known values of {@link Enum54} that the service accepts. */
export enum KnownEnum54 {
  Simple = 'Simple',
  Extended = 'Extended',
}

/**
 * Defines values for Enum54. \
 * {@link KnownEnum54} can be used interchangeably with Enum54,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Simple** \
 * **Extended**
 */
export type Enum54 = string;

/** Known values of {@link Enum55} that the service accepts. */
export enum KnownEnum55 {
  Revenues = 'Revenues',
  Payments = 'Payments',
  Liabilities = 'Liabilities',
  Receivables = 'Receivables',
  Vat = 'Vat',
  House = 'House',
  AccountsReceivable = 'AccountsReceivable',
  CityTaxes = 'CityTaxes',
  TransitoryItems = 'TransitoryItems',
  VatOnLiabilities = 'VatOnLiabilities',
}

/**
 * Defines values for Enum55. \
 * {@link KnownEnum55} can be used interchangeably with Enum55,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Revenues** \
 * **Payments** \
 * **Liabilities** \
 * **Receivables** \
 * **Vat** \
 * **House** \
 * **AccountsReceivable** \
 * **CityTaxes** \
 * **TransitoryItems** \
 * **VatOnLiabilities**
 */
export type Enum55 = string;

/** Known values of {@link Enum56} that the service accepts. */
export enum KnownEnum56 {
  Simple = 'Simple',
  Extended = 'Extended',
}

/**
 * Defines values for Enum56. \
 * {@link KnownEnum56} can be used interchangeably with Enum56,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Simple** \
 * **Extended**
 */
export type Enum56 = string;

/** Known values of {@link Enum57} that the service accepts. */
export enum KnownEnum57 {
  Revenues = 'Revenues',
  Payments = 'Payments',
  Liabilities = 'Liabilities',
  Receivables = 'Receivables',
  Vat = 'Vat',
  House = 'House',
  AccountsReceivable = 'AccountsReceivable',
  CityTaxes = 'CityTaxes',
  TransitoryItems = 'TransitoryItems',
  VatOnLiabilities = 'VatOnLiabilities',
}

/**
 * Defines values for Enum57. \
 * {@link KnownEnum57} can be used interchangeably with Enum57,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Revenues** \
 * **Payments** \
 * **Liabilities** \
 * **Receivables** \
 * **Vat** \
 * **House** \
 * **AccountsReceivable** \
 * **CityTaxes** \
 * **TransitoryItems** \
 * **VatOnLiabilities**
 */
export type Enum57 = string;

/** Known values of {@link Enum58} that the service accepts. */
export enum KnownEnum58 {
  Simple = 'Simple',
  Extended = 'Extended',
}

/**
 * Defines values for Enum58. \
 * {@link KnownEnum58} can be used interchangeably with Enum58,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Simple** \
 * **Extended**
 */
export type Enum58 = string;

/** Known values of {@link AccountingTransactionModelCommand} that the service accepts. */
export enum KnownAccountingTransactionModelCommand {
  PostCharge = 'PostCharge',
  PostPayment = 'PostPayment',
  MoveLineItem = 'MoveLineItem',
  PostPrepayment = 'PostPrepayment',
  PostToAccountsReceivables = 'PostToAccountsReceivables',
  PostPrepaymentVat = 'PostPrepaymentVat',
  System = 'System',
}

/**
 * Defines values for AccountingTransactionModelCommand. \
 * {@link KnownAccountingTransactionModelCommand} can be used interchangeably with AccountingTransactionModelCommand,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PostCharge** \
 * **PostPayment** \
 * **MoveLineItem** \
 * **PostPrepayment** \
 * **PostToAccountsReceivables** \
 * **PostPrepaymentVat** \
 * **System**
 */
export type AccountingTransactionModelCommand = string;

/** Known values of {@link ReceiptModelType} that the service accepts. */
export enum KnownReceiptModelType {
  Custom = 'Custom',
  Reservation = 'Reservation',
  Invoice = 'Invoice',
  PspReference = 'PspReference',
}

/**
 * Defines values for ReceiptModelType. \
 * {@link KnownReceiptModelType} can be used interchangeably with ReceiptModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Custom** \
 * **Reservation** \
 * **Invoice** \
 * **PspReference**
 */
export type ReceiptModelType = string;

/** Known values of {@link AccountingTransactionModelReferenceType} that the service accepts. */
export enum KnownAccountingTransactionModelReferenceType {
  House = 'House',
  Guest = 'Guest',
  External = 'External',
}

/**
 * Defines values for AccountingTransactionModelReferenceType. \
 * {@link KnownAccountingTransactionModelReferenceType} can be used interchangeably with AccountingTransactionModelReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **House** \
 * **Guest** \
 * **External**
 */
export type AccountingTransactionModelReferenceType = string;

/** Known values of {@link Enum62} that the service accepts. */
export enum KnownEnum62 {
  Revenues = 'Revenues',
  Payments = 'Payments',
  Liabilities = 'Liabilities',
  Receivables = 'Receivables',
  Vat = 'Vat',
  House = 'House',
  AccountsReceivable = 'AccountsReceivable',
  CityTaxes = 'CityTaxes',
  TransitoryItems = 'TransitoryItems',
  VatOnLiabilities = 'VatOnLiabilities',
}

/**
 * Defines values for Enum62. \
 * {@link KnownEnum62} can be used interchangeably with Enum62,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Revenues** \
 * **Payments** \
 * **Liabilities** \
 * **Receivables** \
 * **Vat** \
 * **House** \
 * **AccountsReceivable** \
 * **CityTaxes** \
 * **TransitoryItems** \
 * **VatOnLiabilities**
 */
export type Enum62 = string;

/** Known values of {@link Enum63} that the service accepts. */
export enum KnownEnum63 {
  Simple = 'Simple',
  Extended = 'Extended',
}

/**
 * Defines values for Enum63. \
 * {@link KnownEnum63} can be used interchangeably with Enum63,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Simple** \
 * **Extended**
 */
export type Enum63 = string;

/** Known values of {@link Enum64} that the service accepts. */
export enum KnownEnum64 {
  Simple = 'Simple',
  Extended = 'Extended',
}

/**
 * Defines values for Enum64. \
 * {@link KnownEnum64} can be used interchangeably with Enum64,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Simple** \
 * **Extended**
 */
export type Enum64 = string;

/** Known values of {@link ExportGrossTransactionItemModelCommand} that the service accepts. */
export enum KnownExportGrossTransactionItemModelCommand {
  PostCharge = 'PostCharge',
  PostPayment = 'PostPayment',
  MoveLineItem = 'MoveLineItem',
  PostPrepayment = 'PostPrepayment',
  PostToAccountsReceivables = 'PostToAccountsReceivables',
  PostPrepaymentVat = 'PostPrepaymentVat',
  System = 'System',
}

/**
 * Defines values for ExportGrossTransactionItemModelCommand. \
 * {@link KnownExportGrossTransactionItemModelCommand} can be used interchangeably with ExportGrossTransactionItemModelCommand,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PostCharge** \
 * **PostPayment** \
 * **MoveLineItem** \
 * **PostPrepayment** \
 * **PostToAccountsReceivables** \
 * **PostPrepaymentVat** \
 * **System**
 */
export type ExportGrossTransactionItemModelCommand = string;

/** Known values of {@link TaxAmountModelType} that the service accepts. */
export enum KnownTaxAmountModelType {
  Null = 'Null',
  VeryReduced = 'VeryReduced',
  Reduced = 'Reduced',
  Normal = 'Normal',
  Without = 'Without',
  Special = 'Special',
  ReducedCovid19 = 'ReducedCovid19',
  NormalCovid19 = 'NormalCovid19',
}

/**
 * Defines values for TaxAmountModelType. \
 * {@link KnownTaxAmountModelType} can be used interchangeably with TaxAmountModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Null** \
 * **VeryReduced** \
 * **Reduced** \
 * **Normal** \
 * **Without** \
 * **Special** \
 * **ReducedCovid19** \
 * **NormalCovid19**
 */
export type TaxAmountModelType = string;

/** Known values of {@link ExportGrossTransactionItemModelReferenceType} that the service accepts. */
export enum KnownExportGrossTransactionItemModelReferenceType {
  House = 'House',
  Guest = 'Guest',
  External = 'External',
}

/**
 * Defines values for ExportGrossTransactionItemModelReferenceType. \
 * {@link KnownExportGrossTransactionItemModelReferenceType} can be used interchangeably with ExportGrossTransactionItemModelReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **House** \
 * **Guest** \
 * **External**
 */
export type ExportGrossTransactionItemModelReferenceType = string;

/** Known values of {@link Enum68} that the service accepts. */
export enum KnownEnum68 {
  Simple = 'Simple',
  Extended = 'Extended',
}

/**
 * Defines values for Enum68. \
 * {@link KnownEnum68} can be used interchangeably with Enum68,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Simple** \
 * **Extended**
 */
export type Enum68 = string;

/** Known values of {@link SlimFinanceAccountModelType} that the service accepts. */
export enum KnownSlimFinanceAccountModelType {
  Revenues = 'Revenues',
  Payments = 'Payments',
  Liabilities = 'Liabilities',
  Receivables = 'Receivables',
  Vat = 'Vat',
  House = 'House',
  AccountsReceivable = 'AccountsReceivable',
  CityTaxes = 'CityTaxes',
  TransitoryItems = 'TransitoryItems',
  VatOnLiabilities = 'VatOnLiabilities',
}

/**
 * Defines values for SlimFinanceAccountModelType. \
 * {@link KnownSlimFinanceAccountModelType} can be used interchangeably with SlimFinanceAccountModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Revenues** \
 * **Payments** \
 * **Liabilities** \
 * **Receivables** \
 * **Vat** \
 * **House** \
 * **AccountsReceivable** \
 * **CityTaxes** \
 * **TransitoryItems** \
 * **VatOnLiabilities**
 */
export type SlimFinanceAccountModelType = string;

/** Known values of {@link VatItemModelType} that the service accepts. */
export enum KnownVatItemModelType {
  Null = 'Null',
  VeryReduced = 'VeryReduced',
  Reduced = 'Reduced',
  Normal = 'Normal',
  Without = 'Without',
  Special = 'Special',
  ReducedCovid19 = 'ReducedCovid19',
  NormalCovid19 = 'NormalCovid19',
}

/**
 * Defines values for VatItemModelType. \
 * {@link KnownVatItemModelType} can be used interchangeably with VatItemModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Null** \
 * **VeryReduced** \
 * **Reduced** \
 * **Normal** \
 * **Without** \
 * **Special** \
 * **ReducedCovid19** \
 * **NormalCovid19**
 */
export type VatItemModelType = string;

/** Known values of {@link Enum71} that the service accepts. */
export enum KnownEnum71 {
  Simple = 'Simple',
  Extended = 'Extended',
}

/**
 * Defines values for Enum71. \
 * {@link KnownEnum71} can be used interchangeably with Enum71,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Simple** \
 * **Extended**
 */
export type Enum71 = string;

/** Known values of {@link Enum72} that the service accepts. */
export enum KnownEnum72 {
  Simple = 'Simple',
  Extended = 'Extended',
}

/**
 * Defines values for Enum72. \
 * {@link KnownEnum72} can be used interchangeably with Enum72,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Simple** \
 * **Extended**
 */
export type Enum72 = string;

/** Known values of {@link FinanceAccountModelType} that the service accepts. */
export enum KnownFinanceAccountModelType {
  Revenues = 'Revenues',
  Payments = 'Payments',
  Liabilities = 'Liabilities',
  Receivables = 'Receivables',
  Vat = 'Vat',
  House = 'House',
  AccountsReceivable = 'AccountsReceivable',
  CityTaxes = 'CityTaxes',
  TransitoryItems = 'TransitoryItems',
  VatOnLiabilities = 'VatOnLiabilities',
}

/**
 * Defines values for FinanceAccountModelType. \
 * {@link KnownFinanceAccountModelType} can be used interchangeably with FinanceAccountModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Revenues** \
 * **Payments** \
 * **Liabilities** \
 * **Receivables** \
 * **Vat** \
 * **House** \
 * **AccountsReceivable** \
 * **CityTaxes** \
 * **TransitoryItems** \
 * **VatOnLiabilities**
 */
export type FinanceAccountModelType = string;

/** Known values of {@link Enum74} that the service accepts. */
export enum KnownEnum74 {
  Simple = 'Simple',
  Extended = 'Extended',
}

/**
 * Defines values for Enum74. \
 * {@link KnownEnum74} can be used interchangeably with Enum74,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Simple** \
 * **Extended**
 */
export type Enum74 = string;

/** Known values of {@link PaymentMethodListModelPaymentMethodsItem} that the service accepts. */
export enum KnownPaymentMethodListModelPaymentMethodsItem {
  Cash = 'Cash',
  BankTransfer = 'BankTransfer',
  CreditCard = 'CreditCard',
  Amex = 'Amex',
  VisaCredit = 'VisaCredit',
  VisaDebit = 'VisaDebit',
  MasterCard = 'MasterCard',
  MasterCardDebit = 'MasterCardDebit',
  Maestro = 'Maestro',
  GiroCard = 'GiroCard',
  DiscoverCard = 'DiscoverCard',
  Diners = 'Diners',
  Jcb = 'Jcb',
  BookingCom = 'BookingCom',
  VPay = 'VPay',
  PayPal = 'PayPal',
  Postcard = 'Postcard',
  Reka = 'Reka',
  Twint = 'Twint',
  Lunchcheck = 'Lunchcheck',
  Voucher = 'Voucher',
  ChinaUnionPay = 'ChinaUnionPay',
  Other = 'Other',
  Cheque = 'Cheque',
  Airbnb = 'Airbnb',
  HolidayCheck = 'HolidayCheck',
}

/**
 * Defines values for PaymentMethodListModelPaymentMethodsItem. \
 * {@link KnownPaymentMethodListModelPaymentMethodsItem} can be used interchangeably with PaymentMethodListModelPaymentMethodsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cash** \
 * **BankTransfer** \
 * **CreditCard** \
 * **Amex** \
 * **VisaCredit** \
 * **VisaDebit** \
 * **MasterCard** \
 * **MasterCardDebit** \
 * **Maestro** \
 * **GiroCard** \
 * **DiscoverCard** \
 * **Diners** \
 * **Jcb** \
 * **BookingCom** \
 * **VPay** \
 * **PayPal** \
 * **Postcard** \
 * **Reka** \
 * **Twint** \
 * **Lunchcheck** \
 * **Voucher** \
 * **ChinaUnionPay** \
 * **Other** \
 * **Cheque** \
 * **Airbnb** \
 * **HolidayCheck**
 */
export type PaymentMethodListModelPaymentMethodsItem = string;

/** Known values of {@link ServiceTypeListModelServiceTypesItem} that the service accepts. */
export enum KnownServiceTypeListModelServiceTypesItem {
  Other = 'Other',
  Accommodation = 'Accommodation',
  FoodAndBeverages = 'FoodAndBeverages',
  CancellationFees = 'CancellationFees',
  NoShow = 'NoShow',
  CityTax = 'CityTax',
}

/**
 * Defines values for ServiceTypeListModelServiceTypesItem. \
 * {@link KnownServiceTypeListModelServiceTypesItem} can be used interchangeably with ServiceTypeListModelServiceTypesItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Other** \
 * **Accommodation** \
 * **FoodAndBeverages** \
 * **CancellationFees** \
 * **NoShow** \
 * **CityTax**
 */
export type ServiceTypeListModelServiceTypesItem = string;

/** Optional parameters. */
export interface FinanceFoliosGetOptionalParams
  extends coreClient.OperationOptions {
  /** Filter folio list by property IDs */
  propertyIds?: string[];
  /** Filter folio list by company IDs */
  companyIds?: string[];
  /** Filter folio list by reservation IDs */
  reservationIds?: string[];
  /** Filter folio list by booking IDs */
  bookingIds?: string[];
  /**
   * If set to {true}, only return empty folios (no unmoved [transitory] charges, no unmoved payments, no allowances).
   * If set to {false}, only return non-empty folios
   */
  isEmpty?: boolean;
  /**
   * If set to {true}, only return folios that have been checked out on accounts receivables
   * Otherwise, returns all.
   */
  checkedOutOnAccountsReceivable?: boolean;
  /** If set to {true}, closed folios are filtered out from the result collection */
  excludeClosed?: boolean;
  /** If set to {true}, only return folios that been invoices */
  hasInvoices?: boolean;
  /** The inclusive start time of the date of creation. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  createdFrom?: Date;
  /** The exclusive end time of the date of creation. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  createdTo?: Date;
  /** If set to {true}, only main folios are returned, otherwise all. */
  onlyMain?: boolean;
  /** The type of the folio */
  typeParam?: Enum0;
  /**
   * Allows filtering external folios by code.
   * Useful when you use external folios with custom codes.
   * Specifying this parameter will ignore the <b>Type</b> parameter and treat as if it would be set to "External" instead.
   */
  externalFolioCode?: string;
  /**
   * This will filter all folios where the provided text is contained in: debitor first name or last name or email or company name,
   * folio id. The search is case insensitive.
   */
  textSearch?: string;
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /** List of all embedded resources that should be expanded in the response. Possible values are: charges, allowances, transitoryCharges, allowedActions, company, warnings. All other values will be silently ignored. */
  expand?: Get16ItemsItem[];
}

/** Contains response data for the financeFoliosGet operation. */
export type FinanceFoliosGetResponse = FolioListModel;

/** Optional parameters. */
export interface FinanceFoliosPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFoliosPost operation. */
export type FinanceFoliosPostResponse =
  ApaleoFinanceAPIFinanceFoliosPostHeaders & FolioCreatedModel;

/** Optional parameters. */
export interface FinanceFoliosCountGetOptionalParams
  extends coreClient.OperationOptions {
  /** Filter folio list by property IDs */
  propertyIds?: string[];
  /** Filter folio list by company IDs */
  companyIds?: string[];
  /** Filter folio list by reservation IDs */
  reservationIds?: string[];
  /** Filter folio list by booking IDs */
  bookingIds?: string[];
  /**
   * If set to {true}, only return empty folios (no unmoved [transitory] charges, no unmoved payments, no allowances).
   * If set to {false}, only return non-empty folios
   */
  isEmpty?: boolean;
  /**
   * If set to {true}, only return folios that have been checked out on accounts receivables
   * Otherwise, returns all.
   */
  checkedOutOnAccountsReceivable?: boolean;
  /** If set to {true}, closed folios are filtered out from the result collection */
  excludeClosed?: boolean;
  /** If set to {true}, only return folios that been invoices */
  hasInvoices?: boolean;
  /** The inclusive start time of the date of creation. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  createdFrom?: Date;
  /** The exclusive end time of the date of creation. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  createdTo?: Date;
  /** If set to {true}, only main folios are returned, otherwise all. */
  onlyMain?: boolean;
  /**
   * Allows filtering external folios by code.
   * Useful when you use external folios with custom codes.
   * Specifying this parameter will ignore the <b>Type</b> parameter and treat as if it would be set to "External" instead.
   */
  externalFolioCode?: string;
  /**
   * This will filter all folios where the provided text is contained in: debitor first name or last name or email or company name,
   * folio id. The search is case insensitive.
   */
  textSearch?: string;
  /** The type of the folio */
  typeParam?: Enum12;
}

/** Contains response data for the financeFoliosCountGet operation. */
export type FinanceFoliosCountGetResponse = CountModel;

/** Optional parameters. */
export interface FinanceFoliosByIdGetOptionalParams
  extends coreClient.OperationOptions {
  /** List of all embedded resources that should be expanded in the response. Possible values are: folios. All other values will be silently ignored. */
  expand?: string[];
}

/** Contains response data for the financeFoliosByIdGet operation. */
export type FinanceFoliosByIdGetResponse = FolioModel;

/** Optional parameters. */
export interface FinanceFoliosByIdPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeFoliosByIdPatch operation. */
export type FinanceFoliosByIdPatchResponse = MessageItemCollection;

/** Optional parameters. */
export interface FinanceFoliosByIdHeadOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface FinanceFoliosByIdDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeFoliosByIdDelete operation. */
export type FinanceFoliosByIdDeleteResponse = MessageItemCollection;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdChargesPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFolioActionsByFolioIdChargesPost operation. */
export type FinanceFolioActionsByFolioIdChargesPostResponse = AddedChargeModel;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdTransitoryChargesPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFolioActionsByFolioIdTransitoryChargesPost operation. */
export type FinanceFolioActionsByFolioIdTransitoryChargesPostResponse =
  CreatedSubResourceIdModel;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdCancellationFeePostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFolioActionsByFolioIdCancellationFeePost operation. */
export type FinanceFolioActionsByFolioIdCancellationFeePostResponse =
  AddedChargeModel;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdNoShowFeePostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFolioActionsByFolioIdNoShowFeePost operation. */
export type FinanceFolioActionsByFolioIdNoShowFeePostResponse =
  AddedChargeModel;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdClosePutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeFolioActionsByFolioIdClosePut operation. */
export type FinanceFolioActionsByFolioIdClosePutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdReopenPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeFolioActionsByFolioIdReopenPut operation. */
export type FinanceFolioActionsByFolioIdReopenPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdMoveChargesPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeFolioActionsByFolioIdMoveChargesPut operation. */
export type FinanceFolioActionsByFolioIdMoveChargesPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface FinanceFolioActionsBulkMovePutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeFolioActionsBulkMovePut operation. */
export type FinanceFolioActionsBulkMovePutResponse = MessageItemCollection;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdMoveAllChargesPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeFolioActionsByFolioIdMoveAllChargesPut operation. */
export type FinanceFolioActionsByFolioIdMoveAllChargesPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdChargesByChargeIdAllowancesPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFolioActionsByFolioIdChargesByChargeIdAllowancesPost operation. */
export type FinanceFolioActionsByFolioIdChargesByChargeIdAllowancesPostResponse =
  CreatedSubResourceIdModel;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdAllowancesPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFolioActionsByFolioIdAllowancesPost operation. */
export type FinanceFolioActionsByFolioIdAllowancesPostResponse =
  CreatedSubResourceIdModel;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdBulkAllowancesPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFolioActionsByFolioIdBulkAllowancesPost operation. */
export type FinanceFolioActionsByFolioIdBulkAllowancesPostResponse =
  BulkAllowanceCreatedModel;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdPostChargesPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeFolioActionsByFolioIdPostChargesPut operation. */
export type FinanceFolioActionsByFolioIdPostChargesPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdMovePaymentsPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeFolioActionsByFolioIdMovePaymentsPut operation. */
export type FinanceFolioActionsByFolioIdMovePaymentsPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdCorrectPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFolioActionsByFolioIdCorrectPost operation. */
export type FinanceFolioActionsByFolioIdCorrectPostResponse =
  ApaleoFinanceAPIFinanceFolioActionsByFolioIdCorrectPostHeaders &
    FolioCreatedModel;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdChargesByChargeIdSplitPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFolioActionsByFolioIdChargesByChargeIdSplitPost operation. */
export type FinanceFolioActionsByFolioIdChargesByChargeIdSplitPostResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface FinanceFolioActionsByFolioIdPaymentsByPaymentIdSplitPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFolioActionsByFolioIdPaymentsByPaymentIdSplitPost operation. */
export type FinanceFolioActionsByFolioIdPaymentsByPaymentIdSplitPostResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface FinanceFoliosByFolioIdPaymentsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /** Filter payments by one or more status. */
  statusCodes?: Enum24[];
  /** List of all embedded resources that should be expanded in the response. Possible values are: actions. All other values will be silently ignored. */
  expand?: string[];
}

/** Contains response data for the financeFoliosByFolioIdPaymentsGet operation. */
export type FinanceFoliosByFolioIdPaymentsGetResponse = PaymentListModel;

/** Optional parameters. */
export interface FinanceFoliosByFolioIdPaymentsPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFoliosByFolioIdPaymentsPost operation. */
export type FinanceFoliosByFolioIdPaymentsPostResponse =
  ApaleoFinanceAPIFinanceFoliosByFolioIdPaymentsPostHeaders &
    PaymentCreatedModel;

/** Optional parameters. */
export interface FinanceFoliosByFolioIdPaymentsByPaymentIdGetOptionalParams
  extends coreClient.OperationOptions {
  /** List of all embedded resources that should be expanded in the response. Possible values are: actions. All other values will be silently ignored. */
  expand?: string[];
}

/** Contains response data for the financeFoliosByFolioIdPaymentsByPaymentIdGet operation. */
export type FinanceFoliosByFolioIdPaymentsByPaymentIdGetResponse =
  FolioPaymentModel;

/** Optional parameters. */
export interface FinanceFoliosByFolioIdPaymentsByTerminalPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFoliosByFolioIdPaymentsByTerminalPost operation. */
export type FinanceFoliosByFolioIdPaymentsByTerminalPostResponse =
  ApaleoFinanceAPIFinanceFoliosByFolioIdPaymentsByTerminalPostHeaders &
    PaymentCreatedModel;

/** Optional parameters. */
export interface FinanceFoliosByFolioIdPaymentsByAuthorizationPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFoliosByFolioIdPaymentsByAuthorizationPost operation. */
export type FinanceFoliosByFolioIdPaymentsByAuthorizationPostResponse =
  ApaleoFinanceAPIFinanceFoliosByFolioIdPaymentsByAuthorizationPostHeaders &
    PaymentCreatedModel;

/** Optional parameters. */
export interface FinanceFoliosByFolioIdPaymentsByPaymentAccountPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFoliosByFolioIdPaymentsByPaymentAccountPost operation. */
export type FinanceFoliosByFolioIdPaymentsByPaymentAccountPostResponse =
  ApaleoFinanceAPIFinanceFoliosByFolioIdPaymentsByPaymentAccountPostHeaders &
    PaymentCreatedModel;

/** Optional parameters. */
export interface FinanceFoliosByFolioIdPaymentsByLinkPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFoliosByFolioIdPaymentsByLinkPost operation. */
export type FinanceFoliosByFolioIdPaymentsByLinkPostResponse =
  ApaleoFinanceAPIFinanceFoliosByFolioIdPaymentsByLinkPostHeaders &
    PaymentCreatedModel;

/** Optional parameters. */
export interface FinanceFoliosByFolioIdPaymentsByPaymentIdCancelPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeFoliosByFolioIdPaymentsByPaymentIdCancelPut operation. */
export type FinanceFoliosByFolioIdPaymentsByPaymentIdCancelPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface FinanceFoliosByFolioIdRefundsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /** Filter refunds by one or more status */
  statusCodes?: Enum33[];
}

/** Contains response data for the financeFoliosByFolioIdRefundsGet operation. */
export type FinanceFoliosByFolioIdRefundsGetResponse = RefundListModel;

/** Optional parameters. */
export interface FinanceFoliosByFolioIdRefundsPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFoliosByFolioIdRefundsPost operation. */
export type FinanceFoliosByFolioIdRefundsPostResponse =
  ApaleoFinanceAPIFinanceFoliosByFolioIdRefundsPostHeaders & RefundCreatedModel;

/** Optional parameters. */
export interface FinanceFoliosByFolioIdRefundsByRefundIdGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeFoliosByFolioIdRefundsByRefundIdGet operation. */
export type FinanceFoliosByFolioIdRefundsByRefundIdGetResponse = RefundModel;

/** Optional parameters. */
export interface FinanceFoliosByFolioIdPaymentsByPaymentIdRefundsPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeFoliosByFolioIdPaymentsByPaymentIdRefundsPost operation. */
export type FinanceFoliosByFolioIdPaymentsByPaymentIdRefundsPostResponse =
  ApaleoFinanceAPIFinanceFoliosByFolioIdPaymentsByPaymentIdRefundsPostHeaders &
    RefundCreatedModel;

/** Optional parameters. */
export interface FinanceInvoicesPreviewPdfGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeInvoicesPreviewPdfGet operation. */
export type FinanceInvoicesPreviewPdfGetResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;
};

/** Optional parameters. */
export interface FinanceInvoicesPreviewGetOptionalParams
  extends coreClient.OperationOptions {
  /** List of all embedded resources that should be expanded in the response. Possible values are: company. All other values will be silently ignored. */
  expand?: string[];
}

/** Contains response data for the financeInvoicesPreviewGet operation. */
export type FinanceInvoicesPreviewGetResponse = PreviewInvoiceModel;

/** Optional parameters. */
export interface FinanceInvoicesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Filter by property IDs */
  propertyIds?: string[];
  /** Filter by company IDs */
  companyIds?: string[];
  /** Filter by reservation IDs */
  reservationIds?: string[];
  /**
   * If set to {true}, only return invoices with an open balance (AR)
   * Otherwise, returns all.
   */
  checkedOutOnAccountsReceivable?: boolean;
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /** The invoice number */
  numberParam?: string;
  /** Filter for the outstanding balance for invoices<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7 */
  outstandingPaymentFilter?: string[];
  /** Filter by invoice date<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7 */
  dateFilter?: string[];
  /** Filter by folio IDs */
  folioIds?: string[];
  /** Find invoices for a recipient name or company. Provide at least three characters. */
  nameSearch?: string;
  /**
   * If set to {true}, returns only invoices having no outstanding payments or marked as settled.
   * If set to {false}, returns only invoices with outstanding payment and not marked as settled.
   * If not set, returns all invoices.
   */
  paymentSettled?: boolean;
  /** List of all embedded resources that should be expanded in the response. Possible values are: allowedActions, company. All other values will be silently ignored. */
  expand?: Get12ItemsItem[];
}

/** Contains response data for the financeInvoicesGet operation. */
export type FinanceInvoicesGetResponse = InvoiceListModel;

/** Optional parameters. */
export interface FinanceInvoicesPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the financeInvoicesPost operation. */
export type FinanceInvoicesPostResponse =
  ApaleoFinanceAPIFinanceInvoicesPostHeaders & InvoiceCreatedModel;

/** Optional parameters. */
export interface FinanceInvoicesByIdPdfGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeInvoicesByIdPdfGet operation. */
export type FinanceInvoicesByIdPdfGetResponse = {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;
};

/** Optional parameters. */
export interface FinanceInvoicesByIdGetOptionalParams
  extends coreClient.OperationOptions {
  /** List of all embedded resources that should be expanded in the response. Possible values are: company. All other values will be silently ignored. */
  expand?: string[];
}

/** Contains response data for the financeInvoicesByIdGet operation. */
export type FinanceInvoicesByIdGetResponse = InvoiceModel;

/** Optional parameters. */
export interface FinanceInvoiceActionsByIdPayPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeInvoiceActionsByIdPayPut operation. */
export type FinanceInvoiceActionsByIdPayPutResponse = MessageItemCollection;

/** Optional parameters. */
export interface FinanceInvoiceActionsByIdCancelPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeInvoiceActionsByIdCancelPut operation. */
export type FinanceInvoiceActionsByIdCancelPutResponse = MessageItemCollection;

/** Optional parameters. */
export interface FinanceAccountsAggregatePairsDailyPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
  /** Filter transactions by reference (reservation id/external folio id/property id for house folio). */
  reference?: string;
  /** Filter transactions by account number */
  accountNumber?: string;
  /** Filter transactions by type */
  accountType?: Enum50;
  /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
  accountingSchema?: Enum51;
  /** The language for the the report (2-letter ISO code) */
  languageCode?: string;
}

/** Contains response data for the financeAccountsAggregatePairsDailyPost operation. */
export type FinanceAccountsAggregatePairsDailyPostResponse =
  AccountingTransactionPairListModel;

/** Optional parameters. */
export interface FinanceAccountsAggregateDailyPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
  /** Filter transactions by reference (reservation id/external folio id/property id for house folio). */
  reference?: string;
  /** Filter transactions by account number */
  accountNumber?: string;
  /** The language for the the report (2-letter ISO code) */
  languageCode?: string;
  /** Filter transactions by type */
  accountType?: Enum53;
  /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
  accountingSchema?: Enum54;
}

/** Contains response data for the financeAccountsAggregateDailyPost operation. */
export type FinanceAccountsAggregateDailyPostResponse =
  AggregateTransactionListModel;

/** Optional parameters. */
export interface FinanceAccountsAggregatePostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
  /** Filter transactions by account number */
  accountNumber?: string;
  /** The language for the the report */
  languageCode?: string;
  /** Filter transactions by type */
  accountType?: Enum55;
  /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
  accountingSchema?: Enum56;
}

/** Contains response data for the financeAccountsAggregatePost operation. */
export type FinanceAccountsAggregatePostResponse =
  AggregateTransactionListModel;

/** Optional parameters. */
export interface FinanceAccountsExportPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
  /** Filter transactions by account number */
  accountNumber?: string;
  /** The language for the the report */
  languageCode?: string;
  /** Filter transactions by type */
  accountType?: Enum57;
  /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
  accountingSchema?: Enum58;
}

/** Contains response data for the financeAccountsExportPost operation. */
export type FinanceAccountsExportPostResponse = AccountingTransactionListModel;

/** Optional parameters. */
export interface FinanceAccountsExportDailyPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
  /** Filter transactions by reference (reservation id/external folio id/property id for house folio). */
  reference?: string;
  /** Filter transactions by account number */
  accountNumber?: string;
  /** The language for the the report (2-letter ISO code) */
  languageCode?: string;
  /** Filter transactions by type */
  accountType?: Enum62;
  /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
  accountingSchema?: Enum63;
}

/** Contains response data for the financeAccountsExportDailyPost operation. */
export type FinanceAccountsExportDailyPostResponse =
  AccountingTransactionListModel;

/** Optional parameters. */
export interface FinanceAccountsExportGrossDailyPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
  /** Filter transactions by reference (reservation id/external folio id/property id for house folio). */
  reference?: string;
  /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
  accountingSchema?: Enum64;
}

/** Contains response data for the financeAccountsExportGrossDailyPost operation. */
export type FinanceAccountsExportGrossDailyPostResponse =
  ExportGrossTransactionListModel;

/** Optional parameters. */
export interface FinanceAccountsSchemaGetOptionalParams
  extends coreClient.OperationOptions {
  /** The language for the the report. If not specified, language code from "Accept-Language" will be used. */
  languageCode?: string;
  /** How many hierarchy levels to include (between 1 and 4, default is 1). */
  depth?: number;
  /** If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts */
  includeArchived?: boolean;
  /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
  accountingSchema?: Enum68;
}

/** Contains response data for the financeAccountsSchemaGet operation. */
export type FinanceAccountsSchemaGetResponse = ChartOfAccountsModel;

/** Optional parameters. */
export interface FinanceGlobalAccountsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /** The language for the the report */
  languageCode?: string;
  /** If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts */
  includeArchived?: boolean;
  /** Allows to override the default accounting schema */
  accountingSchema?: Enum71;
}

/** Contains response data for the financeGlobalAccountsGet operation. */
export type FinanceGlobalAccountsGetResponse = FinanceAccountListModel;

/** Optional parameters. */
export interface FinanceGuestAccountsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /** The language for the the report */
  languageCode?: string;
  /** Filter account list by the parent account's number. */
  parent?: string;
}

/** Contains response data for the financeGuestAccountsGet operation. */
export type FinanceGuestAccountsGetResponse = FinanceAccountListModel;

/** Optional parameters. */
export interface FinanceExternalAccountsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /** The language for the the report */
  languageCode?: string;
  /** Filter account list by the parent account's number. */
  parent?: string;
}

/** Contains response data for the financeExternalAccountsGet operation. */
export type FinanceExternalAccountsGetResponse = FinanceAccountListModel;

/** Optional parameters. */
export interface FinanceAccountsByNumberGetOptionalParams
  extends coreClient.OperationOptions {
  /** The language for the the report */
  languageCode?: string;
  /** If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts */
  includeArchived?: boolean;
  /** Limit how many transactions should be included in the view (between 0 and 50, defaults to 0). */
  transactionLimit?: number;
  /** Allows to override the default accounting schema. Only specify this, when you know what you are doing. */
  accountingSchema?: Enum72;
}

/** Contains response data for the financeAccountsByNumberGet operation. */
export type FinanceAccountsByNumberGetResponse = FinanceAccountModel;

/** Optional parameters. */
export interface FinanceAccountsChildAccountsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /** The language for the the report */
  languageCode?: string;
  /** If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts */
  includeArchived?: boolean;
  /** Allows to override the default accounting schema */
  accountingSchema?: Enum74;
}

/** Contains response data for the financeAccountsChildAccountsGet operation. */
export type FinanceAccountsChildAccountsGetResponse = FinanceAccountListModel;

/** Optional parameters. */
export interface FinanceTypesCurrenciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeTypesCurrenciesGet operation. */
export type FinanceTypesCurrenciesGetResponse = CurrencyListModel;

/** Optional parameters. */
export interface FinanceTypesPaymentMethodsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeTypesPaymentMethodsGet operation. */
export type FinanceTypesPaymentMethodsGetResponse = PaymentMethodListModel;

/** Optional parameters. */
export interface FinanceTypesServiceTypesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the financeTypesServiceTypesGet operation. */
export type FinanceTypesServiceTypesGetResponse = ServiceTypeListModel;

/** Optional parameters. */
export interface FinanceTypesVatGetOptionalParams
  extends coreClient.OperationOptions {
  /**
   * If specified, returns only the VAT types that are in place for this specific date.
   * If nothing specified, returns all VAT types that existed and will exist for the country.
   */
  atDate?: Date;
}

/** Contains response data for the financeTypesVatGet operation. */
export type FinanceTypesVatGetResponse = VatListModel;

/** Optional parameters. */
export interface ApaleoFinanceAPIOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Overrides client endpoint. */
  endpoint?: string;
}
