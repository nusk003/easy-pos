/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from '@azure/core-client';

export interface CreateBlockModel {
  /** ID of the group that reserved the block */
  groupId: string;
  /** The rate plan */
  ratePlanId: string;
  /** Start date and time from which the inventory will be blocked<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: string;
  /** End date and time until which the inventory will be blocked. Cannot be more than 5 years after the start date.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: string;
  grossDailyRate: MonetaryValueModel;
  /** The list of blocked units for each time slice */
  timeSlices?: CreateBlockTimeSliceModel[];
  /** Number of units to block for the defined time period */
  blockedUnits?: number;
  /** The promo code associated with a certain special offer */
  promoCode?: string;
  /** The corporate code associated with a certain special offer */
  corporateCode?: string;
}

export interface MonetaryValueModel {
  amount: number;
  currency: string;
}

export interface CreateBlockTimeSliceModel {
  /** Number of units blocked for the time slice */
  blockedUnits: number;
}

export interface BlockCreatedModel {
  /** Block id */
  id: string;
}

export interface MessageItemCollection {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly messages?: string[];
}

export interface BlockListModel {
  /** List of blocks */
  blocks: BlockItemModel[];
  /** Total count of items */
  count: number;
}

export interface BlockItemModel {
  /** Block id */
  id: string;
  group: EmbeddedGroupModel;
  /** Status of the block */
  status: BlockItemModelStatus;
  property: EmbeddedPropertyModel;
  ratePlan: EmbeddedRatePlanModel;
  unitGroup: EmbeddedUnitGroupModel;
  grossDailyRate: MonetaryValueModel;
  /** Start date and time from which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: Date;
  /** End date and time until which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: Date;
  /** Number of reservations already picked from this block */
  pickedReservations: number;
  /** The promo code associated with a certain special offer used to create the block */
  promoCode?: string;
  /** The corporate code associated with a certain special offer used to create the block */
  corporateCode?: string;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  /** Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  modified: Date;
  /** The list of blocked units for each time slice */
  timeSlices?: BlockTimeSliceModel[];
  /** The list of actions for this block */
  actions?: ActionModelBlockActionNotAllowedBlockActionReason[];
}

export interface EmbeddedGroupModel {
  /** Group booking id */
  id: string;
  /** Name of the group */
  name?: string;
}

export interface EmbeddedPropertyModel {
  /** The property id */
  id: string;
  /** The code for the property that can be shown in reports and table views */
  code?: string;
  /** The name for the property */
  name?: string;
  /**
   * The description for the property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

export interface EmbeddedRatePlanModel {
  /** The rate plan id */
  id: string;
  /** The code for the rate plan that can be shown in reports and table views */
  code?: string;
  /** The name for the rate plan */
  name?: string;
  /** The description for the rate plan */
  description?: string;
  /** Whether the rate plan is subject to city tax or not */
  isSubjectToCityTax: boolean;
}

export interface EmbeddedUnitGroupModel {
  /** The unit group id */
  id: string;
  /** The code for the unit group that can be shown in reports and table views */
  code?: string;
  /** The name for the unit group */
  name?: string;
  /** The description for the unit group */
  description?: string;
  /** The unit group type */
  type?: EmbeddedUnitGroupModelType;
}

export interface BlockTimeSliceModel {
  /** Start date and time from which units will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: Date;
  /** End date and time until which units will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: Date;
  /** Number of units blocked for this time slice */
  blockedUnits: number;
  /** Number of units which have picked reservations for this time slice */
  pickedUnits: number;
  baseAmount: AmountModel;
  totalGrossAmount: MonetaryValueModel;
}

export interface AmountModel {
  grossAmount: number;
  netAmount: number;
  vatType: AmountModelVatType;
  vatPercent: number;
  currency: string;
}

export interface ActionModelBlockActionNotAllowedBlockActionReason {
  action: ActionModelBlockActionNotAllowedBlockActionReasonAction;
  isAllowed: boolean;
  reasons?: ActionReasonModelNotAllowedBlockActionReason[];
}

export interface ActionReasonModelNotAllowedBlockActionReason {
  code: ActionReasonModelNotAllowedBlockActionReasonCode;
  message: string;
}

export interface CountModel {
  count: number;
}

export interface BlockModel {
  /** Block id */
  id: string;
  group: EmbeddedGroupModel;
  /**
   * Status of the block. Tentative will just mark inventory as requested, but still allows to sell it
   * through other channels. Definite will block the inventory for selling through other channels
   */
  status: BlockModelStatus;
  property: EmbeddedPropertyModel;
  ratePlan: EmbeddedRatePlanModel;
  unitGroup: EmbeddedUnitGroupModel;
  grossDailyRate: MonetaryValueModel;
  /** Start date and time from which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: Date;
  /** End date and time until which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: Date;
  /** Number of reservations already picked from this block */
  pickedReservations: number;
  /** The promo code associated with a certain special offer used to create the block */
  promoCode?: string;
  /** The corporate code associated with a certain special offer used to create the block */
  corporateCode?: string;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  /** Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  modified: Date;
  /** The list of time slices for this block */
  timeSlices?: BlockTimeSliceModel[];
  /** The list of actions for this block */
  actions?: ActionModelBlockActionNotAllowedBlockActionReason[];
}

export interface Operation {
  /** Anything */
  value?: any;
  path?: string;
  op?: string;
  from?: string;
}

export interface ReplaceBlockModel {
  /** Start date and time from which the inventory will be blocked<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: string;
  /** End date and time until which the inventory will be blocked. Cannot be more than 5 years after the start date.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: string;
  grossDailyRate: MonetaryValueModel;
  /** The list of time slices */
  timeSlices: CreateBlockTimeSliceModel[];
}

/** With this request you can create a booking */
export interface CreateBookingModel {
  paymentAccount?: CreatePaymentAccountModel;
  booker: BookerModel;
  /** Additional information and comments */
  comment?: string;
  /** Additional information and comments by the booker */
  bookerComment?: string;
  /** List of reservations to create */
  reservations: CreateReservationModel[];
  /** The reference of a payment transaction. This should be set when a payment transaction has been initiated and should be used to complete the transaction upon reservation creation. */
  transactionReference?: string;
}

export interface CreatePaymentAccountModel {
  /** The account number (e.g. masked credit card number or last 4 digits) */
  accountNumber?: string;
  /** The account holder (e.g. card holder) */
  accountHolder?: string;
  /** The credit card's expiration month */
  expiryMonth?: string;
  /** The credit card's expiration year */
  expiryYear?: string;
  /** The payment method (e.g. visa) */
  paymentMethod?: string;
  /** The email address of the shopper / customer */
  payerEmail?: string;
  /** The reference used to uniquely identify the shopper (e.g. user ID or account ID). Used for recurring payments */
  payerReference?: string;
  /** Indicates if the payment account is a virtual credit card. If not specified it defaults to 'false' */
  isVirtual?: boolean;
  /** A reason why account is inactive when PayerReference was not provided */
  inactiveReason?: string;
}

export interface BookerModel {
  /** Title of the booker */
  title?: BookerModelTitle;
  /** Gender of the booker */
  gender?: BookerModelGender;
  /** First name of the booker */
  firstName?: string;
  /** Middle initial of the booker */
  middleInitial?: string;
  /** Last name of the booker */
  lastName: string;
  /** Email address of the booker */
  email?: string;
  /** Phone number of the booker */
  phone?: string;
  address?: PersonAddressModel;
  /** The booker's nationality, in ISO 3166-1 alpha-2 code */
  nationalityCountryCode?: string;
  /** The booker's identification number for the given identificationType. */
  identificationNumber?: string;
  /** The issue date of the booker's identification document. */
  identificationIssueDate?: Date;
  /** The type of the identificationNumber */
  identificationType?: BookerModelIdentificationType;
  company?: PersonCompanyModel;
  /** Preferred contact two-letter language code (ISO Alpha-2) */
  preferredLanguage?: string;
  /** Birth date */
  birthDate?: Date;
  /** The place of birth */
  birthPlace?: string;
}

export interface PersonAddressModel {
  addressLine1?: string;
  addressLine2?: string;
  postalCode?: string;
  city?: string;
  regionCode?: string;
  countryCode?: string;
}

export interface PersonCompanyModel {
  /** Name of the company */
  name?: string;
  /** Tax or Vat ID of the company */
  taxId?: string;
}

/** With this request you can create a reservation */
export interface CreateReservationModel {
  /** Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  arrival: string;
  /** Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  departure: string;
  /** Number of adults */
  adults: number;
  /** Ages of the children */
  childrenAges?: number[];
  /** Additional information and comments */
  comment?: string;
  /** Additional information and comments by the guest */
  guestComment?: string;
  /** Code in some system */
  externalCode?: string;
  /** Channel code */
  channelCode: CreateReservationModelChannelCode;
  /** Source of the reservation */
  source?: string;
  primaryGuest?: GuestModel;
  /** Additional guests of the reservation. */
  additionalGuests?: GuestModel[];
  /**
   * The guarantee that has to be applied for this reservation. It has to be the same or stronger than
   * the minimum guarantee required by the selected rate plan
   */
  guaranteeType?: CreateReservationModelGuaranteeType;
  /** Purpose of the trip, leisure or business */
  travelPurpose?: CreateReservationModelTravelPurpose;
  /**
   * Gross prices including services and taxes for each time slice. They will be applied to the reservation timeslices
   * in the order specified from arrival to departure
   */
  timeSlices: CreateReservationTimeSliceModel[];
  /** Additional services (extras, add-ons) that should be added to the reservation */
  services?: BookReservationServiceModel[];
  /** Set this if this reservation belongs to a company */
  companyId?: string;
  /** Corporate code provided during creation. Used to find offers during amend. */
  corporateCode?: string;
  prePaymentAmount?: MonetaryValueModel;
  commission?: CommissionModel;
  /** The promo code associated with a certain special offer */
  promoCode?: string;
}

export interface GuestModel {
  /** Title of the guest */
  title?: GuestModelTitle;
  /** Gender of the booker */
  gender?: GuestModelGender;
  /** First name of the guest */
  firstName?: string;
  /** Middle initial of the guest */
  middleInitial?: string;
  /** Last name of the guest */
  lastName: string;
  /** Email address of the guest */
  email?: string;
  /** Phone number of the guest */
  phone?: string;
  address?: PersonAddressModel;
  /** The guest's nationality, in ISO 3166-1 alpha-2 code */
  nationalityCountryCode?: string;
  /** The guest's identification number for the given identificationType. */
  identificationNumber?: string;
  /** The issue date of the guest's identification document. */
  identificationIssueDate?: Date;
  /** The type of the identificationNumber */
  identificationType?: GuestModelIdentificationType;
  company?: PersonCompanyModel;
  /** Two-letter code (ISO Alpha-2) of a language preferred for contact */
  preferredLanguage?: string;
  /** Guest's birthdate */
  birthDate?: Date;
  /** Guest's place of birth */
  birthPlace?: string;
}

export interface CreateReservationTimeSliceModel {
  /** The rate plan id for this time slice */
  ratePlanId: string;
  totalAmount?: MonetaryValueModel;
}

export interface BookReservationServiceModel {
  /** The id of the service you want to book */
  serviceId: string;
  /** The number of services to book for each service date. It defaults to the service offer count when not specified. */
  count?: number;
  amount?: MonetaryValueModel;
  /** The optional dates you want to book the service for; if not specified the default service pattern will be used (e.g. whole stay). */
  dates?: DateModel[];
}

export interface DateModel {
  /** The date the service is delivered */
  serviceDate: Date;
  /** The number of services to book for this date. It defaults to the service offer count when not specified. */
  count?: number;
  amount?: MonetaryValueModel;
}

export interface CommissionModel {
  commissionAmount: MonetaryValueModel;
  beforeCommissionAmount?: MonetaryValueModel;
}

export interface BookingCreatedModel {
  /** Booking id */
  id: string;
  /** List of ids for newly created reservations */
  reservationIds: ReservationCreatedModel[];
}

export interface ReservationCreatedModel {
  /** Id of the reservation */
  id: string;
}

export interface BookingListModel {
  bookings: BookingItemModel[];
  /** Total count of items */
  count: number;
}

/** A booking holds all shared metadata for a set of reservations */
export interface BookingItemModel {
  /** Booking id */
  id: string;
  /** Group id */
  groupId?: string;
  booker?: BookerModel;
  paymentAccount?: PaymentAccountModel;
  /** Additional information and comments */
  comment?: string;
  /** Additional information and comment by the booker */
  bookerComment?: string;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  /** Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  modified: Date;
  /** Reservations within this booking */
  reservations?: BookingReservationModel[];
}

export interface PaymentAccountModel {
  /** The account number (e.g. masked credit card number or last 4 digits) */
  accountNumber?: string;
  /** The account holder (e.g. card holder) */
  accountHolder?: string;
  /** The credit card's expiration month */
  expiryMonth?: string;
  /** The credit card's expiration year */
  expiryYear?: string;
  /** The payment method (e.g. visa) */
  paymentMethod?: string;
  /** The email address of the shopper / customer */
  payerEmail?: string;
  /**
   * The payer reference. It is used to make recurring captures and its usage is allowed only in the scope of the booking.
   * For the reason above this is a write-only field.
   */
  payerReference?: string;
  /** Indicates if the payment account is a virtual credit card. If not specified it defaults to 'false' */
  isVirtual?: boolean;
  /** Indicates if the payment account can be used for capturing payments. A payment account is active, when it has a valid payer reference set */
  isActive: boolean;
  /** A reason why account is inactive */
  inactiveReason?: string;
}

export interface BookingReservationModel {
  /** Reservation id */
  id: string;
  /** Status of the reservation */
  status: BookingReservationModelStatus;
  /** Code in external system */
  externalCode?: string;
  /** Channel code */
  channelCode: BookingReservationModelChannelCode;
  /** Source of the reservation (e.g Hotels.com, Orbitz, etc.) */
  source?: string;
  paymentAccount?: PaymentAccountModel;
  /** Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  arrival: Date;
  /** Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  departure: Date;
  /** Number of adults */
  adults: number;
  /** The ages of the children */
  childrenAges?: number[];
  totalGrossAmount: MonetaryValueModel;
  property: EmbeddedPropertyModel;
  ratePlan: EmbeddedRatePlanModel;
  unitGroup: EmbeddedUnitGroupModel;
  /** The list of additional services (extras, add-ons) reserved for the stay */
  services?: ReservationServiceItemModel[];
  /** Additional information and comment by the guest */
  guestComment?: string;
  cancellationFee: ReservationCancellationFeeModel;
  noShowFee: ReservationNoShowFeeModel;
  company?: EmbeddedCompanyModel;
}

export interface ReservationServiceItemModel {
  service: ServiceModel;
  totalAmount: AmountModel;
  /** The dates the service will be delivered with its price */
  dates: ServiceDateItemModel[];
}

export interface ServiceModel {
  /** The service id */
  id: string;
  /** The code for the service */
  code: string;
  /** The name for the service */
  name: string;
  /** The description for the service */
  description: string;
  /** Defines the granularity (room, person) for which this item is offered and priced */
  pricingUnit: ServiceModelPricingUnit;
  defaultGrossPrice: MonetaryValueModel;
}

export interface ServiceDateItemModel {
  /** The date this service is delivered */
  serviceDate: Date;
  /** The count of booked services */
  count: number;
  amount: AmountModel;
  /**
   * Rate plans can have additional services. When booking an offer for such rate plans, those services are automatically booked.
   * They are marked as mandatory and they cannot be removed.
   */
  isMandatory: boolean;
}

export interface ReservationCancellationFeeModel {
  /** The id of the cancellation policy applied */
  id: string;
  /** The code of the cancellation policy applied */
  code: string;
  /** The name of the cancellation policy applied */
  name: string;
  /** The description of the cancellation policy applied */
  description: string;
  /**
   * The date and time the cancellation fee will be due. After that time this fee will
   * be charged in case of cancellation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
   */
  dueDateTime: Date;
  fee: MonetaryValueModel;
}

export interface ReservationNoShowFeeModel {
  /** The id of the no-show policy applied */
  id: string;
  /** The code of the no-show policy applied */
  code: string;
  /** The name of the no-show policy applied */
  name: string;
  /** The description of the no-show policy applied */
  description: string;
  fee: MonetaryValueModel;
}

export interface EmbeddedCompanyModel {
  /** The company ID */
  id: string;
  /** The code of the company */
  code?: string;
  /** The name of the company */
  name?: string;
  /** Whether or not the company can check out on AR */
  canCheckOutOnAr?: boolean;
}

/** With this request you can add reservations to an existing booking */
export interface AddReservationsModel {
  /** List of reservations to add to the existing booking */
  reservations: CreateReservationModel[];
  /** The reference of a payment transaction. This should be set when a payment transaction has been initiated and should be used to complete the transaction upon reservation creation. */
  transactionReference?: string;
}

export interface ReservationsCreatedModel {
  /** List of ids for newly created reservations */
  reservationIds: ReservationCreatedModel[];
}

/** A booking holds all shared metadata for a set of reservations */
export interface BookingModel {
  /** Booking id */
  id: string;
  /** Group id */
  groupId?: string;
  booker?: BookerModel;
  paymentAccount?: PaymentAccountModel;
  /** Additional information and comments */
  comment?: string;
  /** Additional information and comment by the booker */
  bookerComment?: string;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  /** Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  modified: Date;
  /** Property specific values like total amount and balance */
  propertyValues?: PropertyValueModel[];
  /** Reservations within this booking */
  reservations?: BookingReservationModel[];
}

export interface PropertyValueModel {
  property: EmbeddedPropertyModel;
  totalGrossAmount: MonetaryValueModel;
  balance: MonetaryValueModel;
}

/** With this request you can create a group booking request */
export interface CreateGroupModel {
  /** Name of the group */
  name: string;
  booker: BookerModel;
  /** Additional information and comments */
  comment?: string;
  /** Additional information and comment by the booker */
  bookerComment?: string;
  paymentAccount?: CreatePaymentAccountModel;
  /** List of property ids the group booking belongs to */
  propertyIds: string[];
}

export interface GroupCreatedModel {
  /** Id of newly created group booking */
  id: string;
}

export interface GroupListModel {
  groups: GroupItemModel[];
  /** Total count of items */
  count: number;
}

export interface GroupItemModel {
  /** Group id */
  id: string;
  /** Start date and time of the earliest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from?: Date;
  /** End date and time of the latest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to?: Date;
  /** Name of the group */
  name: string;
  booker?: BookerModel;
  /** Additional information and comments */
  comment?: string;
  /** Additional information and comment by the booker */
  bookerComment?: string;
  paymentAccount?: PaymentAccountModel;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  /** Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  modified: Date;
  /** Blocks within this group */
  blocks?: GroupBlockModel[];
  /** The list of actions for this group */
  actions?: ActionModelGroupActionNotAllowedGroupActionReason[];
  /** The list of property ids this group belongs to */
  propertyIds: string[];
}

export interface GroupBlockModel {
  /** Block id */
  id: string;
  /** Status of the block */
  status: GroupBlockModelStatus;
  property: EmbeddedPropertyModel;
  ratePlan: EmbeddedRatePlanModel;
  unitGroup: EmbeddedUnitGroupModel;
  grossDailyRate: MonetaryValueModel;
  /** Start date and time from which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: Date;
  /** End date and time until which the inventory will be blocked<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: Date;
  /** Number of units blocked */
  blockedUnits: number;
  /** Number of reservations already picked from this block */
  pickedReservations: number;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  /** Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  modified: Date;
}

export interface ActionModelGroupActionNotAllowedGroupActionReason {
  action: 'Delete';
  isAllowed: boolean;
  reasons?: ActionReasonModelNotAllowedGroupActionReason[];
}

export interface ActionReasonModelNotAllowedGroupActionReason {
  code: 'DeleteNotAllowedForGroupWithBlocks';
  message: string;
}

export interface GroupModel {
  /** Group id */
  id: string;
  /** Name of the group */
  name: string;
  /** Start date and time of the earliest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from?: Date;
  /** End date and time of the latest block for this group<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to?: Date;
  booker?: BookerModel;
  /** Additional information and comments */
  comment?: string;
  /** Additional information and comment by the booker */
  bookerComment?: string;
  paymentAccount?: PaymentAccountModel;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  /** Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  modified: Date;
  /** Blocks within this group */
  blocks?: GroupBlockModel[];
  /** The list of actions for this group */
  actions?: ActionModelGroupActionNotAllowedGroupActionReason[];
  /** The list of property ids this group belongs to */
  propertyIds: string[];
}

/** With this request you can pick up reservations to an existing group booking */
export interface PickUpReservationsModel {
  /** List of reservations to pick up to the existing group booking */
  reservations: PickUpReservationModel[];
}

/** With this request you can pick up a reservation */
export interface PickUpReservationModel {
  /** ID of the block */
  blockId: string;
  /** Additional services (extras, add-ons) that should be added to the reservation */
  services?: BookReservationServiceModel[];
  /** Date of arrival and the optional time with UTC offset<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  arrival: string;
  /** Date of departure and the optional time with UTC offset<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  departure: string;
  /** Number of adults */
  adults: number;
  /** The ages of the children */
  childrenAges?: number[];
  /** Additional information and comments */
  comment?: string;
  /** Additional information and comment by the guest */
  guestComment?: string;
  primaryGuest?: GuestModel;
  /** Additional guests of the reservation. */
  additionalGuests?: GuestModel[];
  /** The purpose of the trip, leisure or business */
  travelPurpose?: PickUpReservationModelTravelPurpose;
}

export interface StayOffersModel {
  property: EmbeddedPropertyModel;
  /** List of offered unit groups with rates */
  offers: OfferModel[];
}

export interface OfferModel {
  /** The earliest arrival date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  arrival: Date;
  /** The latest departure date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  departure: Date;
  unitGroup: OfferUnitGroupModel;
  /** The minimum guarantee type for this offer */
  minGuaranteeType: OfferModelMinGuaranteeType;
  /** The number of available units for that offer */
  availableUnits: number;
  ratePlan: EmbeddedRatePlanModel;
  totalGrossAmount: MonetaryValueModel;
  cancellationFee: OfferCancellationFeeModel;
  noShowFee: OfferNoShowFeeModel;
  /** The breakdown for each time slice for this offer */
  timeSlices: OfferTimeSliceModel[];
  /** The list of the mandatory services for this offer. Such services will be automatically booked when booking this offer */
  services?: ServiceOfferModel[];
  /** The details of the fees that will be added on top of the Apaleo.Api.Modules.Booking.Models.Offer.StayOffer.OfferModel.TotalGrossAmount when creating the booking */
  fees?: OfferFeeModel[];
  /** Tax breakdown, displaying net and tax amount for each VAT type */
  taxDetails: TaxDetailModel[];
  /** Validation rules that were applied to the offer and show the reason why the offer is not bookable */
  validationMessages?: OfferValidationMessageModel[];
  /** ID of the company the offer is created for */
  companyId?: string;
  /** The corporate rate code the offer is created for */
  corporateCode?: string;
  /** Whether the offer is for a corporate rate plan */
  isCorporate: boolean;
  prePaymentAmount: MonetaryValueModel;
  cityTax?: AmountModel;
  /** Details of city taxes for this offer, if any */
  cityTaxes?: OfferCityTaxModel[];
}

export interface OfferUnitGroupModel {
  /** The unit group id */
  id: string;
  /** The code for the unit group that can be shown in reports and table views */
  code: string;
  /** The name for the unit group */
  name: string;
  /** The description for the unit group */
  description: string;
  /** Maximum number of persons for the unit group */
  maxPersons: number;
  /** The unit group rank */
  rank?: number;
  /** The unit group type */
  type: OfferUnitGroupModelType;
}

export interface OfferCancellationFeeModel {
  /** The code of the cancellation policy applied */
  code: string;
  /** The name of the cancellation policy applied */
  name: string;
  /** The description of the cancellation policy applied */
  description: string;
  /**
   * The date and time the cancellation fee will be due. After that time this fee will
   * be charged in case of cancellation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
   */
  dueDateTime: Date;
  fee: MonetaryValueModel;
}

export interface OfferNoShowFeeModel {
  /** The code of the no-show policy applied */
  code: string;
  /** The name of the no-show policy applied */
  name: string;
  /** The description of the no-show policy applied */
  description: string;
  fee: MonetaryValueModel;
}

export interface OfferTimeSliceModel {
  /** The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: Date;
  /** The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: Date;
  /** The number of available units for that time slice */
  availableUnits: number;
  baseAmount: AmountModel;
  totalGrossAmount: MonetaryValueModel;
  /** The breakdown for services included in the offer */
  includedServices?: OfferServiceModel[];
}

export interface OfferServiceModel {
  service: EmbeddedServiceModel;
  /** The date this service is delivered */
  serviceDate: Date;
  /** The default count of offered services. For services whose pricing unit is 'Person' it will be based on the adults and children specified, otherwise 1. */
  count: number;
  /**
   * If set - the number of services available (only for the limited service).
   * If not set - the service is unlimited.
   */
  availableCount?: number;
  amount: AmountModel;
  /** Whether the service price is included in or added to the base rate */
  pricingMode: OfferServiceModelPricingMode;
}

export interface EmbeddedServiceModel {
  /** The service id */
  id: string;
  /** The code for the service */
  code?: string;
  /** The name for the service */
  name?: string;
  /** The description for the service */
  description?: string;
}

export interface ServiceOfferModel {
  service: ServiceModel;
  /** The default count of offered services. For services whose pricing unit is 'Person' it will be based on the adults and children specified, otherwise 1. */
  count: number;
  /** The number of services available. */
  availableCount?: number;
  totalAmount: AmountModel;
  prePaymentAmount: MonetaryValueModel;
  /** The details of the fees that will be added on top of the Apaleo.Api.Modules.Booking.Models.Offer.ServiceOffer.ServiceOfferModel.TotalAmount when booking the service */
  fees?: OfferFeeModel[];
  /** The dates the service will be delivered with its price */
  dates: ServiceOfferItemModel[];
  /** Validation rules that were applied to the offer and show the reason why the offer is not bookable */
  validationMessages?: OfferValidationMessageModel[];
}

export interface OfferFeeModel {
  /** The fee id */
  id: string;
  /** The code for the fee */
  code: string;
  /** The name for the fee */
  name: string;
  totalAmount: AmountModel;
}

export interface ServiceOfferItemModel {
  /** The date this service is delivered */
  serviceDate: Date;
  amount: AmountModel;
  /**
   * Depending on the postNextDay setting of the service it will by default be posted before or after midnight.
   * Breakfast is usually delivered on the next morning, so all the dates from the day after arrival to the departure day
   * are default dates and will have this flag set to true. Those are also the dates the service will be booked for if
   * you do not specify dates in the book-service call. Still, you can override this and also book the dates set to IsDefaultDate = false.
   */
  isDefaultDate: boolean;
  /**
   * Rate plans can have additional services. When booking an offer for such rate plans, those services are automatically booked.
   * They are marked as mandatory and they cannot be removed.
   */
  isMandatory: boolean;
  /** The number of services available. */
  availableCount?: number;
}

export interface OfferValidationMessageModel {
  /** The message Code */
  code: OfferValidationMessageModelCode;
  /** The message description */
  message: string;
}

export interface TaxDetailModel {
  vatType: TaxDetailModelVatType;
  vatPercent: number;
  net: MonetaryValueModel;
  tax: MonetaryValueModel;
}

export interface OfferCityTaxModel {
  /** The id of the city tax */
  id: string;
  /** The code of the city tax */
  code: string;
  /** The name for the city tax */
  name: string;
  totalGrossAmount: MonetaryValueModel;
  /** Split per day for the city tax */
  dates: OfferCityTaxItemModel[];
}

export interface OfferCityTaxItemModel {
  /** The date for this city tax */
  serviceDate: Date;
  amount: AmountModel;
}

export interface ServiceOffersModel {
  services: ServiceOfferModel[];
}

export interface TimeSliceListModel {
  /** List of time slices */
  timeSlices?: TimeSliceItemModel[];
  /** Total count of items */
  count: number;
}

export interface TimeSliceItemModel {
  /** Date and time the time slice begins<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: Date;
  /** Date and time the time slice ends<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: Date;
  /** List of offers for this time slice */
  offers?: TimeSliceOfferItemModel[];
}

export interface TimeSliceOfferItemModel {
  unitGroup: EmbeddedUnitGroupModel;
  /** The minimum guarantee type for the offer */
  minGuaranteeType?: TimeSliceOfferItemModelMinGuaranteeType;
  minAdvance?: PeriodModel;
  maxAdvance?: PeriodModel;
  /** The number of available units for the offer */
  available: number;
  restrictions?: RateRestrictionsModel;
  /** The prices for this offer */
  prices?: PerOccupancyPriceItemModel[];
}

export interface PeriodModel {
  /** The number of hours within the period */
  hours?: number;
  /** The number of days within the period */
  days?: number;
  /** The number of months within the period */
  months?: number;
}

export interface RateRestrictionsModel {
  /**
   * The minimum length of stay in order to book the rate. If at least this number
   * of time slices are covered by the stay duration the rate will be offered.
   */
  minLengthOfStay?: number;
  /**
   * The maximum length of stay in order to book the rate. If not more than this number
   * of time slices are covered by the stay duration the rate will be offered.
   */
  maxLengthOfStay?: number;
  /** Whether the rate can be booked for a stay-through reservation */
  closed: boolean;
  /** Whether the rate can be booked on the reservation's arrival date */
  closedOnArrival: boolean;
  /** Whether the rate can be booked on the reservation's departure date */
  closedOnDeparture: boolean;
}

export interface PerOccupancyPriceItemModel {
  /** Number of adults */
  adults: number;
  price: PriceModel;
}

export interface PriceModel {
  /** Price including all included services and VAT - <b>DEPRECATED: This field will be removed soon, use BeforeTax + Taxes.Tax instead</b> */
  grossAmount: number;
  /** Price including all included services without VAT or any other taxes like city tax */
  beforeTax: number;
  /** Price including all included services, VAT and any other taxes like city tax */
  afterTax: number;
  taxes: TaxesModel;
  /** The currency for all prices and tax details */
  currency: string;
}

export interface TaxesModel {
  /** The amount of taxes, which are VAT or Sales Taxes depending on the country of the property */
  tax: number;
  /** The amount of City Tax including VAT */
  cityTax: number;
}

export interface ReservationListModel {
  /** List of reservations */
  reservations: ReservationItemModel[];
  /** Total count of items */
  count: number;
}

export interface ReservationItemModel {
  /** Reservation id */
  id: string;
  /** Booking id */
  bookingId: string;
  /** Block id */
  blockId?: string;
  /** Name of the group */
  groupName?: string;
  /** Status of the reservation */
  status: ReservationItemModelStatus;
  /** Time of check-in<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  checkInTime?: Date;
  /** Time of check-out<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  checkOutTime?: Date;
  /** Time of cancellation, if the reservation was canceled<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  cancellationTime?: Date;
  /** Time of setting no-show reservation status<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  noShowTime?: Date;
  property: EmbeddedPropertyModel;
  ratePlan: EmbeddedRatePlanModel;
  unitGroup: EmbeddedUnitGroupModel;
  unit?: EmbeddedUnitModel;
  totalGrossAmount: MonetaryValueModel;
  /** Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  arrival: Date;
  /** Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  departure: Date;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  /** Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  modified: Date;
  /** Number of adults */
  adults: number;
  /** The ages of the children */
  childrenAges?: number[];
  /** Additional information and comments */
  comment?: string;
  /** Additional information and comment by the guest */
  guestComment?: string;
  /** Code in external system */
  externalCode?: string;
  /** Channel code */
  channelCode: ReservationItemModelChannelCode;
  /** Source of the reservation (e.g Hotels.com, Orbitz, etc.) */
  source?: string;
  primaryGuest?: GuestModel;
  /** Additional guests of the reservation. */
  additionalGuests?: GuestModel[];
  booker?: BookerModel;
  paymentAccount?: PaymentAccountModel;
  /** The strongest guarantee for the rate plans booked in this reservation */
  guaranteeType: ReservationItemModelGuaranteeType;
  cancellationFee: ReservationCancellationFeeModel;
  noShowFee: ReservationNoShowFeeModel;
  /** The purpose of the trip, leisure or business */
  travelPurpose?: ReservationItemModelTravelPurpose;
  balance: MonetaryValueModel;
  /** The list of units assigned to this reservation */
  assignedUnits?: ReservationAssignedUnitModel[];
  /** The list of time slices with the reserved units / unit groups for the stay */
  timeSlices?: TimeSliceModel[];
  /** The list of additional services (extras, add-ons) reserved for the stay */
  services?: ReservationServiceItemModel[];
  /**
   * Validation rules are applied to reservations during their lifetime.
   * For example a reservation that was created while the house or unit group is already fully booked.
   * Whenever a rule was or is currently violated, a validation message will be added to this list.
   * They can be deleted whenever the hotel staff worked them off.
   */
  validationMessages?: ReservationValidationMessageModel[];
  /** The list of actions for this reservation */
  actions?: ActionModelReservationActionNotAllowedReservationActionReason[];
  company?: EmbeddedCompanyModel;
  /** Corporate code provided during creation. Used to find offers during amend. */
  corporateCode?: string;
  /** Whether all folios of a reservation have an invoice */
  allFoliosHaveInvoice?: boolean;
  /** Whether the city tax has already been added to the reservation. Set to false, if the property does not have city tax configured */
  hasCityTax: boolean;
  commission?: CommissionModel;
  /** The promo code associated with a certain special offer used to create the reservation */
  promoCode?: string;
}

export interface EmbeddedUnitModel {
  /** The unit id */
  id: string;
  /** The name for the unit */
  name?: string;
  /** The description for the unit */
  description?: string;
  /** The unit group id */
  unitGroupId?: string;
}

export interface ReservationAssignedUnitModel {
  unit: EmbeddedUnitModel;
  /** The time ranges for which the unit is assigned to the reservation */
  timeRanges: ReservationAssignedUnitTimeRangeModel[];
}

export interface ReservationAssignedUnitTimeRangeModel {
  /** The start date and time of the period for which the unit is assigned to the reservation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: Date;
  /** The end date and time of the period for which the unit is assigned to the reservation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: Date;
}

export interface TimeSliceModel {
  /** The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: Date;
  /** The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: Date;
  /** The service date for this time slice */
  serviceDate: Date;
  ratePlan: EmbeddedRatePlanModel;
  unitGroup: EmbeddedUnitGroupModel;
  unit?: EmbeddedUnitModel;
  baseAmount: AmountModel;
  totalGrossAmount: MonetaryValueModel;
  /** The list of services included in the rate plan (package elements) */
  includedServices?: ReservationServiceModel[];
  /** The list of actions allowed for this time slice */
  actions?: ActionModelReservationTimeSliceActionNotAllowedReservationTimeSliceActionReason[];
}

export interface ReservationServiceModel {
  service: EmbeddedServiceModel;
  /** The date this service is delivered */
  serviceDate: Date;
  /** The count of booked services */
  count: number;
  amount: AmountModel;
  /** Whether this service is already booked as extra */
  bookedAsExtra: boolean;
}

export interface ActionModelReservationTimeSliceActionNotAllowedReservationTimeSliceActionReason {
  action: 'Amend';
  isAllowed: boolean;
  reasons?: ActionReasonModelNotAllowedReservationTimeSliceActionReason[];
}

export interface ActionReasonModelNotAllowedReservationTimeSliceActionReason {
  code: ActionReasonModelNotAllowedReservationTimeSliceActionReasonCode;
  message: string;
}

export interface ReservationValidationMessageModel {
  /** The message category */
  category: ReservationValidationMessageModelCategory;
  /** The message Code */
  code: ReservationValidationMessageModelCode;
  /** The message description */
  message: string;
}

export interface ActionModelReservationActionNotAllowedReservationActionReason {
  action: ActionModelReservationActionNotAllowedReservationActionReasonAction;
  isAllowed: boolean;
  reasons?: ActionReasonModelNotAllowedReservationActionReason[];
}

export interface ActionReasonModelNotAllowedReservationActionReason {
  code: ActionReasonModelNotAllowedReservationActionReasonCode;
  message: string;
}

export interface ReservationModel {
  /** Reservation id */
  id: string;
  /** Booking id */
  bookingId: string;
  /** Block id */
  blockId?: string;
  /** Name of the group */
  groupName?: string;
  /** Status of the reservation */
  status: ReservationModelStatus;
  /** Time of check-in<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  checkInTime?: Date;
  /** Time of check-out<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  checkOutTime?: Date;
  /** Time of cancellation, if the reservation was canceled<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  cancellationTime?: Date;
  /** Time of setting no-show reservation status<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  noShowTime?: Date;
  unit?: EmbeddedUnitModel;
  property: EmbeddedPropertyModel;
  ratePlan: EmbeddedRatePlanModel;
  unitGroup: EmbeddedUnitGroupModel;
  totalGrossAmount: MonetaryValueModel;
  /** Date of arrival<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  arrival: Date;
  /** Date of departure<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  departure: Date;
  /** Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  created: Date;
  /** Date of last modification<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  modified: Date;
  /** Number of adults */
  adults: number;
  /** The ages of the children */
  childrenAges?: number[];
  /** Additional information and comments */
  comment?: string;
  /** Additional information and comment by the guest */
  guestComment?: string;
  /** Code in external system */
  externalCode?: string;
  /** Channel code */
  channelCode: ReservationModelChannelCode;
  /** Source of the reservation (e.g Hotels.com, Orbitz, etc.) */
  source?: string;
  primaryGuest?: GuestModel;
  /** Additional guests of the reservation. */
  additionalGuests?: GuestModel[];
  booker?: BookerModel;
  paymentAccount?: PaymentAccountModel;
  /** The list of time slices with the reserved units / unit groups for the stay */
  timeSlices?: TimeSliceModel[];
  /** The list of additional services (extras, add-ons) reserved for the stay */
  services?: ReservationServiceItemModel[];
  /** The strongest guarantee for the rate plans booked in this reservation */
  guaranteeType: ReservationModelGuaranteeType;
  cancellationFee: ReservationCancellationFeeModel;
  noShowFee: ReservationNoShowFeeModel;
  /** The purpose of the trip, leisure or business */
  travelPurpose?: ReservationModelTravelPurpose;
  balance: MonetaryValueModel;
  /** The list of units assigned to this reservation */
  assignedUnits?: ReservationAssignedUnitModel[];
  /**
   * Validation rules are applied to reservations during their lifetime.
   * For example a reservation that was created while the house or unit group is already fully booked.
   * Whenever a rule was or is currently violated, a validation message will be added to this list.
   * They can be deleted whenever the hotel staff worked them off.
   */
  validationMessages?: ReservationValidationMessageModel[];
  /** The list of actions for this reservation */
  actions?: ActionModelReservationActionNotAllowedReservationActionReason[];
  company?: EmbeddedCompanyModel;
  /** Corporate code provided during creation. Used to find offers during amend. */
  corporateCode?: string;
  /** Whether all folios of a reservation have an invoice */
  allFoliosHaveInvoice?: boolean;
  /** Tax breakdown, displaying net and tax amount for each VAT type */
  taxDetails: TaxDetailModel[];
  /** Whether the city tax has already been added to the reservation. Set to false, if the property does not have city tax configured */
  hasCityTax: boolean;
  commission?: CommissionModel;
  /** The promo code associated with a certain special offer used to create the reservation */
  promoCode?: string;
  payableAmount: PayableAmountModel;
}

export interface PayableAmountModel {
  guest: MonetaryValueModel;
}

export interface ReservationStayOffersModel {
  property: EmbeddedPropertyModel;
  /** List of offered unit groups with rates */
  offers: ReservationStayOfferModel[];
}

export interface ReservationStayOfferModel {
  /** The earliest arrival date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  arrival: Date;
  /** The latest departure date and time for this offer<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  departure: Date;
  /** The minimum guarantee type for this offer */
  minGuaranteeType: ReservationStayOfferModelMinGuaranteeType;
  /** The number of available units for that offer */
  availableUnits: number;
  totalGrossAmount: MonetaryValueModel;
  cancellationFee: OfferCancellationFeeModel;
  noShowFee: OfferNoShowFeeModel;
  /** The breakdown for each time slice for this offer */
  timeSlices: ReservationStayOfferTimeSliceModel[];
  /** The breakdown for extra services reserved for this offer */
  services?: ServiceOfferModel[];
  /** Tax breakdown, displaying net and tax amount for each VAT type */
  taxDetails: TaxDetailModel[];
  /** Validation rules that were applied to the offer and show the reason why the offer is not bookable */
  validationMessages?: OfferValidationMessageModel[];
  /** ID of the company the offer is created for */
  companyId?: string;
  /** The corporate rate code the offer is created for */
  corporateCode?: string;
  /** Whether the offer is for a corporate rate plan */
  isCorporate: boolean;
  cityTax?: AmountModel;
  /** Details of city taxes for this offer, if any */
  cityTaxes?: OfferCityTaxModel[];
}

export interface ReservationStayOfferTimeSliceModel {
  /** The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: Date;
  /** The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: Date;
  ratePlan: EmbeddedRatePlanModel;
  unitGroup: OfferUnitGroupModel;
  baseAmount: AmountModel;
  totalGrossAmount: MonetaryValueModel;
  /** The breakdown for services included in the offer */
  includedServices?: ReservationStayOfferServiceModel[];
}

export interface ReservationStayOfferServiceModel {
  service: EmbeddedServiceModel;
  /** The date this service is delivered */
  serviceDate: Date;
  /** The default count of offered services. For services whose pricing unit is 'Person' it will be based on the adults and children specified, otherwise 1. */
  count: number;
  /**
   * If set - the number of services available (only for the limited service).
   * If not set - the service is unlimited.
   */
  availableCount?: number;
  amount: AmountModel;
  /** Whether this service is already booked as extra */
  bookedAsExtra: boolean;
  /** Whether the service price is included in or added to the base rate */
  pricingMode: ReservationStayOfferServiceModelPricingMode;
}

export interface ReservationServiceListModel {
  /** The list of services booked for the reservation */
  services: ReservationServiceItemModel[];
  /** Total count of items */
  count: number;
}

export interface AutoAssignedUnitListModel {
  /** The list of time slices with the respective assigned unit */
  timeSlices: AutoAssignedUnitItemModel[];
}

export interface AutoAssignedUnitItemModel {
  unit: EmbeddedUnitModel;
  /** The start date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: Date;
  /** The end date and time for this time slice<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: Date;
}

export interface AssignedUnitModel {
  unit: EmbeddedUnitModel;
}

export interface DesiredStayDetailsModel {
  /** Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  arrival: string;
  /** Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  departure: string;
  /** Number of adults */
  adults: number;
  /** Ages of the children */
  childrenAges?: number[];
  /**
   * Whether the prices for time slices with no change to the rate plan should be re-quoted based on current prices, or if
   * only additions like change of number of adults should be calculated. Defaults to 'false'.
   */
  requote?: boolean;
  /** The list of time slices */
  timeSlices: DesiredTimeSliceModel[];
}

export interface DesiredTimeSliceModel {
  /** The rate plan id for this time slice */
  ratePlanId: string;
  totalGrossAmount?: MonetaryValueModel;
}

export interface SourceListModel {
  /** List of sources. */
  sources: string[];
}

/** Defines headers for ApaleoBookingAPI_bookingBlocksPost operation. */
export interface ApaleoBookingAPIBookingBlocksPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoBookingAPI_bookingBookingsPost operation. */
export interface ApaleoBookingAPIBookingBookingsPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoBookingAPI_bookingBookingsForcePost operation. */
export interface ApaleoBookingAPIBookingBookingsForcePostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoBookingAPI_bookingBookingsByIdReservationsPost operation. */
export interface ApaleoBookingAPIBookingBookingsByIdReservationsPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoBookingAPI_bookingBookingsByIdReservationsForcePost operation. */
export interface ApaleoBookingAPIBookingBookingsByIdReservationsForcePostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoBookingAPI_bookingGroupsPost operation. */
export interface ApaleoBookingAPIBookingGroupsPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoBookingAPI_bookingGroupsByIdReservationsPost operation. */
export interface ApaleoBookingAPIBookingGroupsByIdReservationsPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Known values of {@link Get2ItemsItem} that the service accepts. */
export enum KnownGet2ItemsItem {
  Tentative = 'Tentative',
  Definite = 'Definite',
  Canceled = 'Canceled',
}

/**
 * Defines values for Get2ItemsItem. \
 * {@link KnownGet2ItemsItem} can be used interchangeably with Get2ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Tentative** \
 * **Definite** \
 * **Canceled**
 */
export type Get2ItemsItem = string;

/** Known values of {@link Get6ItemsItem} that the service accepts. */
export enum KnownGet6ItemsItem {
  BedRoom = 'BedRoom',
  MeetingRoom = 'MeetingRoom',
  EventSpace = 'EventSpace',
  ParkingLot = 'ParkingLot',
  Other = 'Other',
}

/**
 * Defines values for Get6ItemsItem. \
 * {@link KnownGet6ItemsItem} can be used interchangeably with Get6ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BedRoom** \
 * **MeetingRoom** \
 * **EventSpace** \
 * **ParkingLot** \
 * **Other**
 */
export type Get6ItemsItem = string;

/** Known values of {@link Enum2} that the service accepts. */
export enum KnownEnum2 {
  DayUse = 'DayUse',
  OverNight = 'OverNight',
}

/**
 * Defines values for Enum2. \
 * {@link KnownEnum2} can be used interchangeably with Enum2,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DayUse** \
 * **OverNight**
 */
export type Enum2 = string;

/** Known values of {@link Get12ItemsItem} that the service accepts. */
export enum KnownGet12ItemsItem {
  Actions = 'actions',
  TimeSlices = 'timeSlices',
}

/**
 * Defines values for Get12ItemsItem. \
 * {@link KnownGet12ItemsItem} can be used interchangeably with Get12ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **actions** \
 * **timeSlices**
 */
export type Get12ItemsItem = string;

/** Known values of {@link BlockItemModelStatus} that the service accepts. */
export enum KnownBlockItemModelStatus {
  Tentative = 'Tentative',
  Definite = 'Definite',
  Canceled = 'Canceled',
}

/**
 * Defines values for BlockItemModelStatus. \
 * {@link KnownBlockItemModelStatus} can be used interchangeably with BlockItemModelStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Tentative** \
 * **Definite** \
 * **Canceled**
 */
export type BlockItemModelStatus = string;

/** Known values of {@link EmbeddedUnitGroupModelType} that the service accepts. */
export enum KnownEmbeddedUnitGroupModelType {
  BedRoom = 'BedRoom',
  MeetingRoom = 'MeetingRoom',
  EventSpace = 'EventSpace',
  ParkingLot = 'ParkingLot',
  Other = 'Other',
}

/**
 * Defines values for EmbeddedUnitGroupModelType. \
 * {@link KnownEmbeddedUnitGroupModelType} can be used interchangeably with EmbeddedUnitGroupModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BedRoom** \
 * **MeetingRoom** \
 * **EventSpace** \
 * **ParkingLot** \
 * **Other**
 */
export type EmbeddedUnitGroupModelType = string;

/** Known values of {@link AmountModelVatType} that the service accepts. */
export enum KnownAmountModelVatType {
  Null = 'Null',
  VeryReduced = 'VeryReduced',
  Reduced = 'Reduced',
  Normal = 'Normal',
  Without = 'Without',
  Special = 'Special',
  ReducedCovid19 = 'ReducedCovid19',
  NormalCovid19 = 'NormalCovid19',
}

/**
 * Defines values for AmountModelVatType. \
 * {@link KnownAmountModelVatType} can be used interchangeably with AmountModelVatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Null** \
 * **VeryReduced** \
 * **Reduced** \
 * **Normal** \
 * **Without** \
 * **Special** \
 * **ReducedCovid19** \
 * **NormalCovid19**
 */
export type AmountModelVatType = string;

/** Known values of {@link ActionModelBlockActionNotAllowedBlockActionReasonAction} that the service accepts. */
export enum KnownActionModelBlockActionNotAllowedBlockActionReasonAction {
  Delete = 'Delete',
  Confirm = 'Confirm',
  Release = 'Release',
  Cancel = 'Cancel',
  Pickup = 'Pickup',
  Modify = 'Modify',
  Wash = 'Wash',
}

/**
 * Defines values for ActionModelBlockActionNotAllowedBlockActionReasonAction. \
 * {@link KnownActionModelBlockActionNotAllowedBlockActionReasonAction} can be used interchangeably with ActionModelBlockActionNotAllowedBlockActionReasonAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Delete** \
 * **Confirm** \
 * **Release** \
 * **Cancel** \
 * **Pickup** \
 * **Modify** \
 * **Wash**
 */
export type ActionModelBlockActionNotAllowedBlockActionReasonAction = string;

/** Known values of {@link ActionReasonModelNotAllowedBlockActionReasonCode} that the service accepts. */
export enum KnownActionReasonModelNotAllowedBlockActionReasonCode {
  DeleteNotAllowedForBlockWithReservations = 'DeleteNotAllowedForBlockWithReservations',
  ReleaseNotAllowedForBlockWithReservations = 'ReleaseNotAllowedForBlockWithReservations',
  ReleaseNotAllowedForBlockInThePast = 'ReleaseNotAllowedForBlockInThePast',
  ReleaseNotAllowedForBlockNotInStatusDefinite = 'ReleaseNotAllowedForBlockNotInStatusDefinite',
  ConfirmNotAllowedForBlockNotInStatusTentative = 'ConfirmNotAllowedForBlockNotInStatusTentative',
  ConfirmNotAllowedForBlockInThePast = 'ConfirmNotAllowedForBlockInThePast',
  CancelNotAllowedForBlockWithNotCancelledReservations = 'CancelNotAllowedForBlockWithNotCancelledReservations',
  CancelNotAllowedForBlockNotInStatusDefiniteOrTentative = 'CancelNotAllowedForBlockNotInStatusDefiniteOrTentative',
  PickupNotAllowedForBlockNotInStatusDefinite = 'PickupNotAllowedForBlockNotInStatusDefinite',
  PickupNotAllowedForBlockInThePast = 'PickupNotAllowedForBlockInThePast',
  PickupNotAllowedForFullyPickedBlock = 'PickupNotAllowedForFullyPickedBlock',
  ModifyNotAllowedForBlockInThePast = 'ModifyNotAllowedForBlockInThePast',
  ModifyNotAllowedForBlockInStatusCanceled = 'ModifyNotAllowedForBlockInStatusCanceled',
  WashNotAllowedForBlockNotInStatusDefinite = 'WashNotAllowedForBlockNotInStatusDefinite',
  WashNotAllowedForBlockWithoutReservations = 'WashNotAllowedForBlockWithoutReservations',
}

/**
 * Defines values for ActionReasonModelNotAllowedBlockActionReasonCode. \
 * {@link KnownActionReasonModelNotAllowedBlockActionReasonCode} can be used interchangeably with ActionReasonModelNotAllowedBlockActionReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DeleteNotAllowedForBlockWithReservations** \
 * **ReleaseNotAllowedForBlockWithReservations** \
 * **ReleaseNotAllowedForBlockInThePast** \
 * **ReleaseNotAllowedForBlockNotInStatusDefinite** \
 * **ConfirmNotAllowedForBlockNotInStatusTentative** \
 * **ConfirmNotAllowedForBlockInThePast** \
 * **CancelNotAllowedForBlockWithNotCancelledReservations** \
 * **CancelNotAllowedForBlockNotInStatusDefiniteOrTentative** \
 * **PickupNotAllowedForBlockNotInStatusDefinite** \
 * **PickupNotAllowedForBlockInThePast** \
 * **PickupNotAllowedForFullyPickedBlock** \
 * **ModifyNotAllowedForBlockInThePast** \
 * **ModifyNotAllowedForBlockInStatusCanceled** \
 * **WashNotAllowedForBlockNotInStatusDefinite** \
 * **WashNotAllowedForBlockWithoutReservations**
 */
export type ActionReasonModelNotAllowedBlockActionReasonCode = string;

/** Known values of {@link Enum9} that the service accepts. */
export enum KnownEnum9 {
  Tentative = 'Tentative',
  Definite = 'Definite',
  Canceled = 'Canceled',
}

/**
 * Defines values for Enum9. \
 * {@link KnownEnum9} can be used interchangeably with Enum9,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Tentative** \
 * **Definite** \
 * **Canceled**
 */
export type Enum9 = string;

/** Known values of {@link Enum10} that the service accepts. */
export enum KnownEnum10 {
  BedRoom = 'BedRoom',
  MeetingRoom = 'MeetingRoom',
  EventSpace = 'EventSpace',
  ParkingLot = 'ParkingLot',
  Other = 'Other',
}

/**
 * Defines values for Enum10. \
 * {@link KnownEnum10} can be used interchangeably with Enum10,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BedRoom** \
 * **MeetingRoom** \
 * **EventSpace** \
 * **ParkingLot** \
 * **Other**
 */
export type Enum10 = string;

/** Known values of {@link Enum11} that the service accepts. */
export enum KnownEnum11 {
  DayUse = 'DayUse',
  OverNight = 'OverNight',
}

/**
 * Defines values for Enum11. \
 * {@link KnownEnum11} can be used interchangeably with Enum11,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DayUse** \
 * **OverNight**
 */
export type Enum11 = string;

/** Known values of {@link Enum12} that the service accepts. */
export enum KnownEnum12 {
  Actions = 'actions',
  TimeSlices = 'timeSlices',
}

/**
 * Defines values for Enum12. \
 * {@link KnownEnum12} can be used interchangeably with Enum12,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **actions** \
 * **timeSlices**
 */
export type Enum12 = string;

/** Known values of {@link BlockModelStatus} that the service accepts. */
export enum KnownBlockModelStatus {
  Tentative = 'Tentative',
  Definite = 'Definite',
  Canceled = 'Canceled',
}

/**
 * Defines values for BlockModelStatus. \
 * {@link KnownBlockModelStatus} can be used interchangeably with BlockModelStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Tentative** \
 * **Definite** \
 * **Canceled**
 */
export type BlockModelStatus = string;

/** Known values of {@link BookerModelTitle} that the service accepts. */
export enum KnownBookerModelTitle {
  Mr = 'Mr',
  Ms = 'Ms',
  Dr = 'Dr',
  Prof = 'Prof',
  Mrs = 'Mrs',
  Other = 'Other',
}

/**
 * Defines values for BookerModelTitle. \
 * {@link KnownBookerModelTitle} can be used interchangeably with BookerModelTitle,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Mr** \
 * **Ms** \
 * **Dr** \
 * **Prof** \
 * **Mrs** \
 * **Other**
 */
export type BookerModelTitle = string;

/** Known values of {@link BookerModelGender} that the service accepts. */
export enum KnownBookerModelGender {
  Female = 'Female',
  Male = 'Male',
  Other = 'Other',
}

/**
 * Defines values for BookerModelGender. \
 * {@link KnownBookerModelGender} can be used interchangeably with BookerModelGender,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Female** \
 * **Male** \
 * **Other**
 */
export type BookerModelGender = string;

/** Known values of {@link BookerModelIdentificationType} that the service accepts. */
export enum KnownBookerModelIdentificationType {
  SocialInsuranceNumber = 'SocialInsuranceNumber',
  PassportNumber = 'PassportNumber',
  IdNumber = 'IdNumber',
  DriverLicenseNumber = 'DriverLicenseNumber',
}

/**
 * Defines values for BookerModelIdentificationType. \
 * {@link KnownBookerModelIdentificationType} can be used interchangeably with BookerModelIdentificationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SocialInsuranceNumber** \
 * **PassportNumber** \
 * **IdNumber** \
 * **DriverLicenseNumber**
 */
export type BookerModelIdentificationType = string;

/** Known values of {@link CreateReservationModelChannelCode} that the service accepts. */
export enum KnownCreateReservationModelChannelCode {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for CreateReservationModelChannelCode. \
 * {@link KnownCreateReservationModelChannelCode} can be used interchangeably with CreateReservationModelChannelCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type CreateReservationModelChannelCode = string;

/** Known values of {@link GuestModelTitle} that the service accepts. */
export enum KnownGuestModelTitle {
  Mr = 'Mr',
  Ms = 'Ms',
  Dr = 'Dr',
  Prof = 'Prof',
  Mrs = 'Mrs',
  Other = 'Other',
}

/**
 * Defines values for GuestModelTitle. \
 * {@link KnownGuestModelTitle} can be used interchangeably with GuestModelTitle,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Mr** \
 * **Ms** \
 * **Dr** \
 * **Prof** \
 * **Mrs** \
 * **Other**
 */
export type GuestModelTitle = string;

/** Known values of {@link GuestModelGender} that the service accepts. */
export enum KnownGuestModelGender {
  Female = 'Female',
  Male = 'Male',
  Other = 'Other',
}

/**
 * Defines values for GuestModelGender. \
 * {@link KnownGuestModelGender} can be used interchangeably with GuestModelGender,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Female** \
 * **Male** \
 * **Other**
 */
export type GuestModelGender = string;

/** Known values of {@link GuestModelIdentificationType} that the service accepts. */
export enum KnownGuestModelIdentificationType {
  SocialInsuranceNumber = 'SocialInsuranceNumber',
  PassportNumber = 'PassportNumber',
  IdNumber = 'IdNumber',
  DriverLicenseNumber = 'DriverLicenseNumber',
}

/**
 * Defines values for GuestModelIdentificationType. \
 * {@link KnownGuestModelIdentificationType} can be used interchangeably with GuestModelIdentificationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SocialInsuranceNumber** \
 * **PassportNumber** \
 * **IdNumber** \
 * **DriverLicenseNumber**
 */
export type GuestModelIdentificationType = string;

/** Known values of {@link CreateReservationModelGuaranteeType} that the service accepts. */
export enum KnownCreateReservationModelGuaranteeType {
  PM6Hold = 'PM6Hold',
  CreditCard = 'CreditCard',
  Prepayment = 'Prepayment',
  Company = 'Company',
}

/**
 * Defines values for CreateReservationModelGuaranteeType. \
 * {@link KnownCreateReservationModelGuaranteeType} can be used interchangeably with CreateReservationModelGuaranteeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PM6Hold** \
 * **CreditCard** \
 * **Prepayment** \
 * **Company**
 */
export type CreateReservationModelGuaranteeType = string;

/** Known values of {@link CreateReservationModelTravelPurpose} that the service accepts. */
export enum KnownCreateReservationModelTravelPurpose {
  Business = 'Business',
  Leisure = 'Leisure',
}

/**
 * Defines values for CreateReservationModelTravelPurpose. \
 * {@link KnownCreateReservationModelTravelPurpose} can be used interchangeably with CreateReservationModelTravelPurpose,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Business** \
 * **Leisure**
 */
export type CreateReservationModelTravelPurpose = string;

/** Known values of {@link Enum23} that the service accepts. */
export enum KnownEnum23 {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for Enum23. \
 * {@link KnownEnum23} can be used interchangeably with Enum23,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type Enum23 = string;

/** Known values of {@link Get7ItemsItem} that the service accepts. */
export enum KnownGet7ItemsItem {
  Property = 'property',
  UnitGroup = 'unitGroup',
  RatePlan = 'ratePlan',
  Services = 'services',
  Reservations = 'reservations',
}

/**
 * Defines values for Get7ItemsItem. \
 * {@link KnownGet7ItemsItem} can be used interchangeably with Get7ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **property** \
 * **unitGroup** \
 * **ratePlan** \
 * **services** \
 * **reservations**
 */
export type Get7ItemsItem = string;

/** Known values of {@link BookingReservationModelStatus} that the service accepts. */
export enum KnownBookingReservationModelStatus {
  Confirmed = 'Confirmed',
  InHouse = 'InHouse',
  CheckedOut = 'CheckedOut',
  Canceled = 'Canceled',
  NoShow = 'NoShow',
}

/**
 * Defines values for BookingReservationModelStatus. \
 * {@link KnownBookingReservationModelStatus} can be used interchangeably with BookingReservationModelStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Confirmed** \
 * **InHouse** \
 * **CheckedOut** \
 * **Canceled** \
 * **NoShow**
 */
export type BookingReservationModelStatus = string;

/** Known values of {@link BookingReservationModelChannelCode} that the service accepts. */
export enum KnownBookingReservationModelChannelCode {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for BookingReservationModelChannelCode. \
 * {@link KnownBookingReservationModelChannelCode} can be used interchangeably with BookingReservationModelChannelCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type BookingReservationModelChannelCode = string;

/** Known values of {@link ServiceModelPricingUnit} that the service accepts. */
export enum KnownServiceModelPricingUnit {
  Room = 'Room',
  Person = 'Person',
}

/**
 * Defines values for ServiceModelPricingUnit. \
 * {@link KnownServiceModelPricingUnit} can be used interchangeably with ServiceModelPricingUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Room** \
 * **Person**
 */
export type ServiceModelPricingUnit = string;

/** Known values of {@link Enum28} that the service accepts. */
export enum KnownEnum28 {
  Property = 'property',
  UnitGroup = 'unitGroup',
  RatePlan = 'ratePlan',
  Services = 'services',
  Reservations = 'reservations',
  PropertyValues = 'propertyValues',
}

/**
 * Defines values for Enum28. \
 * {@link KnownEnum28} can be used interchangeably with Enum28,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **property** \
 * **unitGroup** \
 * **ratePlan** \
 * **services** \
 * **reservations** \
 * **propertyValues**
 */
export type Enum28 = string;

/** Known values of {@link Enum29} that the service accepts. */
export enum KnownEnum29 {
  Blocks = 'blocks',
  Actions = 'actions',
}

/**
 * Defines values for Enum29. \
 * {@link KnownEnum29} can be used interchangeably with Enum29,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **blocks** \
 * **actions**
 */
export type Enum29 = string;

/** Known values of {@link GroupBlockModelStatus} that the service accepts. */
export enum KnownGroupBlockModelStatus {
  Tentative = 'Tentative',
  Definite = 'Definite',
  Canceled = 'Canceled',
}

/**
 * Defines values for GroupBlockModelStatus. \
 * {@link KnownGroupBlockModelStatus} can be used interchangeably with GroupBlockModelStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Tentative** \
 * **Definite** \
 * **Canceled**
 */
export type GroupBlockModelStatus = string;

/** Known values of {@link Enum31} that the service accepts. */
export enum KnownEnum31 {
  Blocks = 'blocks',
  Actions = 'actions',
}

/**
 * Defines values for Enum31. \
 * {@link KnownEnum31} can be used interchangeably with Enum31,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **blocks** \
 * **actions**
 */
export type Enum31 = string;

/** Known values of {@link PickUpReservationModelTravelPurpose} that the service accepts. */
export enum KnownPickUpReservationModelTravelPurpose {
  Business = 'Business',
  Leisure = 'Leisure',
}

/**
 * Defines values for PickUpReservationModelTravelPurpose. \
 * {@link KnownPickUpReservationModelTravelPurpose} can be used interchangeably with PickUpReservationModelTravelPurpose,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Business** \
 * **Leisure**
 */
export type PickUpReservationModelTravelPurpose = string;

/** Known values of {@link Enum33} that the service accepts. */
export enum KnownEnum33 {
  DayUse = 'DayUse',
  OverNight = 'OverNight',
}

/**
 * Defines values for Enum33. \
 * {@link KnownEnum33} can be used interchangeably with Enum33,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DayUse** \
 * **OverNight**
 */
export type Enum33 = string;

/** Known values of {@link Enum34} that the service accepts. */
export enum KnownEnum34 {
  BedRoom = 'BedRoom',
  MeetingRoom = 'MeetingRoom',
  EventSpace = 'EventSpace',
  ParkingLot = 'ParkingLot',
  Other = 'Other',
}

/**
 * Defines values for Enum34. \
 * {@link KnownEnum34} can be used interchangeably with Enum34,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BedRoom** \
 * **MeetingRoom** \
 * **EventSpace** \
 * **ParkingLot** \
 * **Other**
 */
export type Enum34 = string;

/** Known values of {@link Enum35} that the service accepts. */
export enum KnownEnum35 {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for Enum35. \
 * {@link KnownEnum35} can be used interchangeably with Enum35,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type Enum35 = string;

/** Known values of {@link OfferUnitGroupModelType} that the service accepts. */
export enum KnownOfferUnitGroupModelType {
  BedRoom = 'BedRoom',
  MeetingRoom = 'MeetingRoom',
  EventSpace = 'EventSpace',
  ParkingLot = 'ParkingLot',
  Other = 'Other',
}

/**
 * Defines values for OfferUnitGroupModelType. \
 * {@link KnownOfferUnitGroupModelType} can be used interchangeably with OfferUnitGroupModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BedRoom** \
 * **MeetingRoom** \
 * **EventSpace** \
 * **ParkingLot** \
 * **Other**
 */
export type OfferUnitGroupModelType = string;

/** Known values of {@link OfferModelMinGuaranteeType} that the service accepts. */
export enum KnownOfferModelMinGuaranteeType {
  PM6Hold = 'PM6Hold',
  CreditCard = 'CreditCard',
  Prepayment = 'Prepayment',
  Company = 'Company',
}

/**
 * Defines values for OfferModelMinGuaranteeType. \
 * {@link KnownOfferModelMinGuaranteeType} can be used interchangeably with OfferModelMinGuaranteeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PM6Hold** \
 * **CreditCard** \
 * **Prepayment** \
 * **Company**
 */
export type OfferModelMinGuaranteeType = string;

/** Known values of {@link OfferServiceModelPricingMode} that the service accepts. */
export enum KnownOfferServiceModelPricingMode {
  Included = 'Included',
  Additional = 'Additional',
}

/**
 * Defines values for OfferServiceModelPricingMode. \
 * {@link KnownOfferServiceModelPricingMode} can be used interchangeably with OfferServiceModelPricingMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Included** \
 * **Additional**
 */
export type OfferServiceModelPricingMode = string;

/** Known values of {@link OfferValidationMessageModelCode} that the service accepts. */
export enum KnownOfferValidationMessageModelCode {
  UnitGroupFullyBooked = 'UnitGroupFullyBooked',
  UnitGroupCapacityExceeded = 'UnitGroupCapacityExceeded',
  RatePlanRestrictionsViolated = 'RatePlanRestrictionsViolated',
  RatePlanSurchargesNotSet = 'RatePlanSurchargesNotSet',
  RateRestrictionsViolated = 'RateRestrictionsViolated',
  RatePlanChannelNotSet = 'RatePlanChannelNotSet',
  RatesNotSet = 'RatesNotSet',
  BlockFullyBooked = 'BlockFullyBooked',
  IncludedServicesAmountExceededRateAmount = 'IncludedServicesAmountExceededRateAmount',
  ServiceFullyBooked = 'ServiceFullyBooked',
}

/**
 * Defines values for OfferValidationMessageModelCode. \
 * {@link KnownOfferValidationMessageModelCode} can be used interchangeably with OfferValidationMessageModelCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UnitGroupFullyBooked** \
 * **UnitGroupCapacityExceeded** \
 * **RatePlanRestrictionsViolated** \
 * **RatePlanSurchargesNotSet** \
 * **RateRestrictionsViolated** \
 * **RatePlanChannelNotSet** \
 * **RatesNotSet** \
 * **BlockFullyBooked** \
 * **IncludedServicesAmountExceededRateAmount** \
 * **ServiceFullyBooked**
 */
export type OfferValidationMessageModelCode = string;

/** Known values of {@link TaxDetailModelVatType} that the service accepts. */
export enum KnownTaxDetailModelVatType {
  Null = 'Null',
  VeryReduced = 'VeryReduced',
  Reduced = 'Reduced',
  Normal = 'Normal',
  Without = 'Without',
  Special = 'Special',
  ReducedCovid19 = 'ReducedCovid19',
  NormalCovid19 = 'NormalCovid19',
}

/**
 * Defines values for TaxDetailModelVatType. \
 * {@link KnownTaxDetailModelVatType} can be used interchangeably with TaxDetailModelVatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Null** \
 * **VeryReduced** \
 * **Reduced** \
 * **Normal** \
 * **Without** \
 * **Special** \
 * **ReducedCovid19** \
 * **NormalCovid19**
 */
export type TaxDetailModelVatType = string;

/** Known values of {@link Enum41} that the service accepts. */
export enum KnownEnum41 {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for Enum41. \
 * {@link KnownEnum41} can be used interchangeably with Enum41,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type Enum41 = string;

/** Known values of {@link Enum42} that the service accepts. */
export enum KnownEnum42 {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for Enum42. \
 * {@link KnownEnum42} can be used interchangeably with Enum42,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type Enum42 = string;

/** Known values of {@link Enum43} that the service accepts. */
export enum KnownEnum43 {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for Enum43. \
 * {@link KnownEnum43} can be used interchangeably with Enum43,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type Enum43 = string;

/** Known values of {@link TimeSliceOfferItemModelMinGuaranteeType} that the service accepts. */
export enum KnownTimeSliceOfferItemModelMinGuaranteeType {
  PM6Hold = 'PM6Hold',
  CreditCard = 'CreditCard',
  Prepayment = 'Prepayment',
  Company = 'Company',
  Ota = 'Ota',
}

/**
 * Defines values for TimeSliceOfferItemModelMinGuaranteeType. \
 * {@link KnownTimeSliceOfferItemModelMinGuaranteeType} can be used interchangeably with TimeSliceOfferItemModelMinGuaranteeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PM6Hold** \
 * **CreditCard** \
 * **Prepayment** \
 * **Company** \
 * **Ota**
 */
export type TimeSliceOfferItemModelMinGuaranteeType = string;

/** Known values of {@link Enum45} that the service accepts. */
export enum KnownEnum45 {
  BedRoom = 'BedRoom',
  MeetingRoom = 'MeetingRoom',
  EventSpace = 'EventSpace',
  ParkingLot = 'ParkingLot',
  Other = 'Other',
}

/**
 * Defines values for Enum45. \
 * {@link KnownEnum45} can be used interchangeably with Enum45,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BedRoom** \
 * **MeetingRoom** \
 * **EventSpace** \
 * **ParkingLot** \
 * **Other**
 */
export type Enum45 = string;

/** Known values of {@link Get8ItemsItem} that the service accepts. */
export enum KnownGet8ItemsItem {
  Confirmed = 'Confirmed',
  InHouse = 'InHouse',
  CheckedOut = 'CheckedOut',
  Canceled = 'Canceled',
  NoShow = 'NoShow',
}

/**
 * Defines values for Get8ItemsItem. \
 * {@link KnownGet8ItemsItem} can be used interchangeably with Get8ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Confirmed** \
 * **InHouse** \
 * **CheckedOut** \
 * **Canceled** \
 * **NoShow**
 */
export type Get8ItemsItem = string;

/** Known values of {@link Enum47} that the service accepts. */
export enum KnownEnum47 {
  Arrival = 'Arrival',
  Departure = 'Departure',
  Stay = 'Stay',
  Creation = 'Creation',
  Modification = 'Modification',
  Cancellation = 'Cancellation',
}

/**
 * Defines values for Enum47. \
 * {@link KnownEnum47} can be used interchangeably with Enum47,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Arrival** \
 * **Departure** \
 * **Stay** \
 * **Creation** \
 * **Modification** \
 * **Cancellation**
 */
export type Enum47 = string;

/** Known values of {@link Enum48} that the service accepts. */
export enum KnownEnum48 {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for Enum48. \
 * {@link KnownEnum48} can be used interchangeably with Enum48,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type Enum48 = string;

/** Known values of {@link Get14ItemsItem} that the service accepts. */
export enum KnownGet14ItemsItem {
  OfferNotAvailable = 'OfferNotAvailable',
  AutoUnitAssignment = 'AutoUnitAssignment',
}

/**
 * Defines values for Get14ItemsItem. \
 * {@link KnownGet14ItemsItem} can be used interchangeably with Get14ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OfferNotAvailable** \
 * **AutoUnitAssignment**
 */
export type Get14ItemsItem = string;

/** Known values of {@link Get21ItemsItem} that the service accepts. */
export enum KnownGet21ItemsItem {
  ArrivalAsc = 'arrival:asc',
  ArrivalDesc = 'arrival:desc',
  DepartureAsc = 'departure:asc',
  DepartureDesc = 'departure:desc',
  CreatedAsc = 'created:asc',
  CreatedDesc = 'created:desc',
  UpdatedAsc = 'updated:asc',
  UpdatedDesc = 'updated:desc',
  IdAsc = 'id:asc',
  IdDesc = 'id:desc',
  FirstnameAsc = 'firstname:asc',
  FirstnameDesc = 'firstname:desc',
  LastnameAsc = 'lastname:asc',
  LastnameDesc = 'lastname:desc',
  UnitnameAsc = 'unitname:asc',
  UnitnameDesc = 'unitname:desc',
}

/**
 * Defines values for Get21ItemsItem. \
 * {@link KnownGet21ItemsItem} can be used interchangeably with Get21ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **arrival:asc** \
 * **arrival:desc** \
 * **departure:asc** \
 * **departure:desc** \
 * **created:asc** \
 * **created:desc** \
 * **updated:asc** \
 * **updated:desc** \
 * **id:asc** \
 * **id:desc** \
 * **firstname:asc** \
 * **firstname:desc** \
 * **lastname:asc** \
 * **lastname:desc** \
 * **unitname:asc** \
 * **unitname:desc**
 */
export type Get21ItemsItem = string;

/** Known values of {@link Get22ItemsItem} that the service accepts. */
export enum KnownGet22ItemsItem {
  Booker = 'booker',
  Actions = 'actions',
  TimeSlices = 'timeSlices',
  Services = 'services',
  AssignedUnits = 'assignedUnits',
  Company = 'company',
}

/**
 * Defines values for Get22ItemsItem. \
 * {@link KnownGet22ItemsItem} can be used interchangeably with Get22ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **booker** \
 * **actions** \
 * **timeSlices** \
 * **services** \
 * **assignedUnits** \
 * **company**
 */
export type Get22ItemsItem = string;

/** Known values of {@link ReservationItemModelStatus} that the service accepts. */
export enum KnownReservationItemModelStatus {
  Confirmed = 'Confirmed',
  InHouse = 'InHouse',
  CheckedOut = 'CheckedOut',
  Canceled = 'Canceled',
  NoShow = 'NoShow',
}

/**
 * Defines values for ReservationItemModelStatus. \
 * {@link KnownReservationItemModelStatus} can be used interchangeably with ReservationItemModelStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Confirmed** \
 * **InHouse** \
 * **CheckedOut** \
 * **Canceled** \
 * **NoShow**
 */
export type ReservationItemModelStatus = string;

/** Known values of {@link ReservationItemModelChannelCode} that the service accepts. */
export enum KnownReservationItemModelChannelCode {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for ReservationItemModelChannelCode. \
 * {@link KnownReservationItemModelChannelCode} can be used interchangeably with ReservationItemModelChannelCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type ReservationItemModelChannelCode = string;

/** Known values of {@link ReservationItemModelGuaranteeType} that the service accepts. */
export enum KnownReservationItemModelGuaranteeType {
  PM6Hold = 'PM6Hold',
  CreditCard = 'CreditCard',
  Prepayment = 'Prepayment',
  Company = 'Company',
  Ota = 'Ota',
}

/**
 * Defines values for ReservationItemModelGuaranteeType. \
 * {@link KnownReservationItemModelGuaranteeType} can be used interchangeably with ReservationItemModelGuaranteeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PM6Hold** \
 * **CreditCard** \
 * **Prepayment** \
 * **Company** \
 * **Ota**
 */
export type ReservationItemModelGuaranteeType = string;

/** Known values of {@link ReservationItemModelTravelPurpose} that the service accepts. */
export enum KnownReservationItemModelTravelPurpose {
  Business = 'Business',
  Leisure = 'Leisure',
}

/**
 * Defines values for ReservationItemModelTravelPurpose. \
 * {@link KnownReservationItemModelTravelPurpose} can be used interchangeably with ReservationItemModelTravelPurpose,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Business** \
 * **Leisure**
 */
export type ReservationItemModelTravelPurpose = string;

/** Known values of {@link ActionReasonModelNotAllowedReservationTimeSliceActionReasonCode} that the service accepts. */
export enum KnownActionReasonModelNotAllowedReservationTimeSliceActionReasonCode {
  AmendNotAllowedWhenTimeSliceIsInThePast = 'AmendNotAllowedWhenTimeSliceIsInThePast',
  AmendNotAllowedWhenTimeSliceIsAlreadyPosted = 'AmendNotAllowedWhenTimeSliceIsAlreadyPosted',
  AmendNotAllowedForReservationInFinalStatus = 'AmendNotAllowedForReservationInFinalStatus',
}

/**
 * Defines values for ActionReasonModelNotAllowedReservationTimeSliceActionReasonCode. \
 * {@link KnownActionReasonModelNotAllowedReservationTimeSliceActionReasonCode} can be used interchangeably with ActionReasonModelNotAllowedReservationTimeSliceActionReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AmendNotAllowedWhenTimeSliceIsInThePast** \
 * **AmendNotAllowedWhenTimeSliceIsAlreadyPosted** \
 * **AmendNotAllowedForReservationInFinalStatus**
 */
export type ActionReasonModelNotAllowedReservationTimeSliceActionReasonCode =
  string;

/** Known values of {@link ReservationValidationMessageModelCategory} that the service accepts. */
export enum KnownReservationValidationMessageModelCategory {
  OfferNotAvailable = 'OfferNotAvailable',
  AutoUnitAssignment = 'AutoUnitAssignment',
}

/**
 * Defines values for ReservationValidationMessageModelCategory. \
 * {@link KnownReservationValidationMessageModelCategory} can be used interchangeably with ReservationValidationMessageModelCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OfferNotAvailable** \
 * **AutoUnitAssignment**
 */
export type ReservationValidationMessageModelCategory = string;

/** Known values of {@link ReservationValidationMessageModelCode} that the service accepts. */
export enum KnownReservationValidationMessageModelCode {
  UnitGroupFullyBooked = 'UnitGroupFullyBooked',
  UnitGroupCapacityExceeded = 'UnitGroupCapacityExceeded',
  RatePlanRestrictionsViolated = 'RatePlanRestrictionsViolated',
  RatePlanSurchargesNotSet = 'RatePlanSurchargesNotSet',
  RateRestrictionsViolated = 'RateRestrictionsViolated',
  RatePlanChannelNotSet = 'RatePlanChannelNotSet',
  RatesNotSet = 'RatesNotSet',
  BlockFullyBooked = 'BlockFullyBooked',
  UnitMoved = 'UnitMoved',
  IncludedServicesAmountExceededRateAmount = 'IncludedServicesAmountExceededRateAmount',
  RatePlanCompanyRestrictionsViolated = 'RatePlanCompanyRestrictionsViolated',
  ServiceFullyBooked = 'ServiceFullyBooked',
}

/**
 * Defines values for ReservationValidationMessageModelCode. \
 * {@link KnownReservationValidationMessageModelCode} can be used interchangeably with ReservationValidationMessageModelCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UnitGroupFullyBooked** \
 * **UnitGroupCapacityExceeded** \
 * **RatePlanRestrictionsViolated** \
 * **RatePlanSurchargesNotSet** \
 * **RateRestrictionsViolated** \
 * **RatePlanChannelNotSet** \
 * **RatesNotSet** \
 * **BlockFullyBooked** \
 * **UnitMoved** \
 * **IncludedServicesAmountExceededRateAmount** \
 * **RatePlanCompanyRestrictionsViolated** \
 * **ServiceFullyBooked**
 */
export type ReservationValidationMessageModelCode = string;

/** Known values of {@link ActionModelReservationActionNotAllowedReservationActionReasonAction} that the service accepts. */
export enum KnownActionModelReservationActionNotAllowedReservationActionReasonAction {
  CheckIn = 'CheckIn',
  CheckOut = 'CheckOut',
  Cancel = 'Cancel',
  AmendTimeSlices = 'AmendTimeSlices',
  AmendArrival = 'AmendArrival',
  AmendDeparture = 'AmendDeparture',
  NoShow = 'NoShow',
  AssignUnit = 'AssignUnit',
  UnassignUnit = 'UnassignUnit',
  RemoveCityTax = 'RemoveCityTax',
  AddCityTax = 'AddCityTax',
  RemoveService = 'RemoveService',
}

/**
 * Defines values for ActionModelReservationActionNotAllowedReservationActionReasonAction. \
 * {@link KnownActionModelReservationActionNotAllowedReservationActionReasonAction} can be used interchangeably with ActionModelReservationActionNotAllowedReservationActionReasonAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CheckIn** \
 * **CheckOut** \
 * **Cancel** \
 * **AmendTimeSlices** \
 * **AmendArrival** \
 * **AmendDeparture** \
 * **NoShow** \
 * **AssignUnit** \
 * **UnassignUnit** \
 * **RemoveCityTax** \
 * **AddCityTax** \
 * **RemoveService**
 */
export type ActionModelReservationActionNotAllowedReservationActionReasonAction =
  string;

/** Known values of {@link ActionReasonModelNotAllowedReservationActionReasonCode} that the service accepts. */
export enum KnownActionReasonModelNotAllowedReservationActionReasonCode {
  CheckInNotAllowedForReservationNotInStatusConfirmed = 'CheckInNotAllowedForReservationNotInStatusConfirmed',
  CheckInNotAllowedBeforeArrivalDate = 'CheckInNotAllowedBeforeArrivalDate',
  CheckInNotAllowedAfterDepartureDateTime = 'CheckInNotAllowedAfterDepartureDateTime',
  CheckInNotAllowedWithoutUnitAssignedForWholeStay = 'CheckInNotAllowedWithoutUnitAssignedForWholeStay',
  CheckOutNotAllowedForReservationNotInStatusInHouse = 'CheckOutNotAllowedForReservationNotInStatusInHouse',
  CheckOutNotAllowedForPastReservationNotInStatusConfirmedOrInHouse = 'CheckOutNotAllowedForPastReservationNotInStatusConfirmedOrInHouse',
  CheckOutNotAllowedWithDepartureDateMoreThanOneDayInTheFuture = 'CheckOutNotAllowedWithDepartureDateMoreThanOneDayInTheFuture',
  CancelNotAllowedForReservationNotInStatusConfirmed = 'CancelNotAllowedForReservationNotInStatusConfirmed',
  AmendNotAllowedForNotAmendableTimeSlices = 'AmendNotAllowedForNotAmendableTimeSlices',
  AmendArrivalNotAllowedForNotAmendableTimeSlices = 'AmendArrivalNotAllowedForNotAmendableTimeSlices',
  AmendArrivalNotAllowedForReservationNotInStatusConfirmed = 'AmendArrivalNotAllowedForReservationNotInStatusConfirmed',
  AmendDepartureNotAllowedForReservationNotInStatusConfirmedOrInHouse = 'AmendDepartureNotAllowedForReservationNotInStatusConfirmedOrInHouse',
  AmendDepartureNotAllowedForReservationDepartureDateTooFarInThePast = 'AmendDepartureNotAllowedForReservationDepartureDateTooFarInThePast',
  NoShowNotAllowedForReservationNotInStatusConfirmed = 'NoShowNotAllowedForReservationNotInStatusConfirmed',
  NoShowNotAllowedBeforeArrivalDate = 'NoShowNotAllowedBeforeArrivalDate',
  AssignUnitNotAllowedForReservationInThePast = 'AssignUnitNotAllowedForReservationInThePast',
  AssignUnitNotAllowedForReservationNotInStatusConfirmedOrInHouse = 'AssignUnitNotAllowedForReservationNotInStatusConfirmedOrInHouse',
  UnassignUnitNotAllowedForReservationInThePast = 'UnassignUnitNotAllowedForReservationInThePast',
  UnassignUnitNotAllowedForReservationNotInStatusConfirmed = 'UnassignUnitNotAllowedForReservationNotInStatusConfirmed',
  UnassignUnitNotAllowedForReservationWithoutUnit = 'UnassignUnitNotAllowedForReservationWithoutUnit',
  RemoveCityTaxNotAllowedForReservationNotInStatusConfirmedOrInHouse = 'RemoveCityTaxNotAllowedForReservationNotInStatusConfirmedOrInHouse',
  RemoveCityTaxNotAllowedForReservationWithPostedCharges = 'RemoveCityTaxNotAllowedForReservationWithPostedCharges',
  RemoveCityTaxNotAllowedForReservationWithoutCityTax = 'RemoveCityTaxNotAllowedForReservationWithoutCityTax',
  AddCityTaxNotAllowedForReservationNotInStatusConfirmedOrInHouse = 'AddCityTaxNotAllowedForReservationNotInStatusConfirmedOrInHouse',
  AddCityTaxNotAllowedForReservationWithCityTax = 'AddCityTaxNotAllowedForReservationWithCityTax',
  AddCityTaxNotAllowedForReservationForRatePlanNotSubjectToCityTax = 'AddCityTaxNotAllowedForReservationForRatePlanNotSubjectToCityTax',
  AddCityTaxNotAllowedForReservationWithPostedCharges = 'AddCityTaxNotAllowedForReservationWithPostedCharges',
  RemoveServiceNotAllowedForReservationNotInStatusConfirmedOrInHouse = 'RemoveServiceNotAllowedForReservationNotInStatusConfirmedOrInHouse',
  RemoveServiceNotAllowedForReservationInThePast = 'RemoveServiceNotAllowedForReservationInThePast',
}

/**
 * Defines values for ActionReasonModelNotAllowedReservationActionReasonCode. \
 * {@link KnownActionReasonModelNotAllowedReservationActionReasonCode} can be used interchangeably with ActionReasonModelNotAllowedReservationActionReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CheckInNotAllowedForReservationNotInStatusConfirmed** \
 * **CheckInNotAllowedBeforeArrivalDate** \
 * **CheckInNotAllowedAfterDepartureDateTime** \
 * **CheckInNotAllowedWithoutUnitAssignedForWholeStay** \
 * **CheckOutNotAllowedForReservationNotInStatusInHouse** \
 * **CheckOutNotAllowedForPastReservationNotInStatusConfirmedOrInHouse** \
 * **CheckOutNotAllowedWithDepartureDateMoreThanOneDayInTheFuture** \
 * **CancelNotAllowedForReservationNotInStatusConfirmed** \
 * **AmendNotAllowedForNotAmendableTimeSlices** \
 * **AmendArrivalNotAllowedForNotAmendableTimeSlices** \
 * **AmendArrivalNotAllowedForReservationNotInStatusConfirmed** \
 * **AmendDepartureNotAllowedForReservationNotInStatusConfirmedOrInHouse** \
 * **AmendDepartureNotAllowedForReservationDepartureDateTooFarInThePast** \
 * **NoShowNotAllowedForReservationNotInStatusConfirmed** \
 * **NoShowNotAllowedBeforeArrivalDate** \
 * **AssignUnitNotAllowedForReservationInThePast** \
 * **AssignUnitNotAllowedForReservationNotInStatusConfirmedOrInHouse** \
 * **UnassignUnitNotAllowedForReservationInThePast** \
 * **UnassignUnitNotAllowedForReservationNotInStatusConfirmed** \
 * **UnassignUnitNotAllowedForReservationWithoutUnit** \
 * **RemoveCityTaxNotAllowedForReservationNotInStatusConfirmedOrInHouse** \
 * **RemoveCityTaxNotAllowedForReservationWithPostedCharges** \
 * **RemoveCityTaxNotAllowedForReservationWithoutCityTax** \
 * **AddCityTaxNotAllowedForReservationNotInStatusConfirmedOrInHouse** \
 * **AddCityTaxNotAllowedForReservationWithCityTax** \
 * **AddCityTaxNotAllowedForReservationForRatePlanNotSubjectToCityTax** \
 * **AddCityTaxNotAllowedForReservationWithPostedCharges** \
 * **RemoveServiceNotAllowedForReservationNotInStatusConfirmedOrInHouse** \
 * **RemoveServiceNotAllowedForReservationInThePast**
 */
export type ActionReasonModelNotAllowedReservationActionReasonCode = string;

/** Known values of {@link Enum61} that the service accepts. */
export enum KnownEnum61 {
  BedRoom = 'BedRoom',
  MeetingRoom = 'MeetingRoom',
  EventSpace = 'EventSpace',
  ParkingLot = 'ParkingLot',
  Other = 'Other',
}

/**
 * Defines values for Enum61. \
 * {@link KnownEnum61} can be used interchangeably with Enum61,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BedRoom** \
 * **MeetingRoom** \
 * **EventSpace** \
 * **ParkingLot** \
 * **Other**
 */
export type Enum61 = string;

/** Known values of {@link Enum62} that the service accepts. */
export enum KnownEnum62 {
  Confirmed = 'Confirmed',
  InHouse = 'InHouse',
  CheckedOut = 'CheckedOut',
  Canceled = 'Canceled',
  NoShow = 'NoShow',
}

/**
 * Defines values for Enum62. \
 * {@link KnownEnum62} can be used interchangeably with Enum62,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Confirmed** \
 * **InHouse** \
 * **CheckedOut** \
 * **Canceled** \
 * **NoShow**
 */
export type Enum62 = string;

/** Known values of {@link Enum63} that the service accepts. */
export enum KnownEnum63 {
  Arrival = 'Arrival',
  Departure = 'Departure',
  Stay = 'Stay',
  Creation = 'Creation',
  Modification = 'Modification',
  Cancellation = 'Cancellation',
}

/**
 * Defines values for Enum63. \
 * {@link KnownEnum63} can be used interchangeably with Enum63,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Arrival** \
 * **Departure** \
 * **Stay** \
 * **Creation** \
 * **Modification** \
 * **Cancellation**
 */
export type Enum63 = string;

/** Known values of {@link Enum64} that the service accepts. */
export enum KnownEnum64 {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for Enum64. \
 * {@link KnownEnum64} can be used interchangeably with Enum64,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type Enum64 = string;

/** Known values of {@link Enum65} that the service accepts. */
export enum KnownEnum65 {
  OfferNotAvailable = 'OfferNotAvailable',
  AutoUnitAssignment = 'AutoUnitAssignment',
}

/**
 * Defines values for Enum65. \
 * {@link KnownEnum65} can be used interchangeably with Enum65,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OfferNotAvailable** \
 * **AutoUnitAssignment**
 */
export type Enum65 = string;

/** Known values of {@link Enum66} that the service accepts. */
export enum KnownEnum66 {
  TimeSlices = 'timeSlices',
  Services = 'services',
  Booker = 'booker',
  Actions = 'actions',
  Company = 'company',
  AssignedUnits = 'assignedUnits',
}

/**
 * Defines values for Enum66. \
 * {@link KnownEnum66} can be used interchangeably with Enum66,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **timeSlices** \
 * **services** \
 * **booker** \
 * **actions** \
 * **company** \
 * **assignedUnits**
 */
export type Enum66 = string;

/** Known values of {@link ReservationModelStatus} that the service accepts. */
export enum KnownReservationModelStatus {
  Confirmed = 'Confirmed',
  InHouse = 'InHouse',
  CheckedOut = 'CheckedOut',
  Canceled = 'Canceled',
  NoShow = 'NoShow',
}

/**
 * Defines values for ReservationModelStatus. \
 * {@link KnownReservationModelStatus} can be used interchangeably with ReservationModelStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Confirmed** \
 * **InHouse** \
 * **CheckedOut** \
 * **Canceled** \
 * **NoShow**
 */
export type ReservationModelStatus = string;

/** Known values of {@link ReservationModelChannelCode} that the service accepts. */
export enum KnownReservationModelChannelCode {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for ReservationModelChannelCode. \
 * {@link KnownReservationModelChannelCode} can be used interchangeably with ReservationModelChannelCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type ReservationModelChannelCode = string;

/** Known values of {@link ReservationModelGuaranteeType} that the service accepts. */
export enum KnownReservationModelGuaranteeType {
  PM6Hold = 'PM6Hold',
  CreditCard = 'CreditCard',
  Prepayment = 'Prepayment',
  Company = 'Company',
  Ota = 'Ota',
}

/**
 * Defines values for ReservationModelGuaranteeType. \
 * {@link KnownReservationModelGuaranteeType} can be used interchangeably with ReservationModelGuaranteeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PM6Hold** \
 * **CreditCard** \
 * **Prepayment** \
 * **Company** \
 * **Ota**
 */
export type ReservationModelGuaranteeType = string;

/** Known values of {@link ReservationModelTravelPurpose} that the service accepts. */
export enum KnownReservationModelTravelPurpose {
  Business = 'Business',
  Leisure = 'Leisure',
}

/**
 * Defines values for ReservationModelTravelPurpose. \
 * {@link KnownReservationModelTravelPurpose} can be used interchangeably with ReservationModelTravelPurpose,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Business** \
 * **Leisure**
 */
export type ReservationModelTravelPurpose = string;

/** Known values of {@link Enum71} that the service accepts. */
export enum KnownEnum71 {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for Enum71. \
 * {@link KnownEnum71} can be used interchangeably with Enum71,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type Enum71 = string;

/** Known values of {@link ReservationStayOfferModelMinGuaranteeType} that the service accepts. */
export enum KnownReservationStayOfferModelMinGuaranteeType {
  PM6Hold = 'PM6Hold',
  CreditCard = 'CreditCard',
  Prepayment = 'Prepayment',
  Company = 'Company',
}

/**
 * Defines values for ReservationStayOfferModelMinGuaranteeType. \
 * {@link KnownReservationStayOfferModelMinGuaranteeType} can be used interchangeably with ReservationStayOfferModelMinGuaranteeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PM6Hold** \
 * **CreditCard** \
 * **Prepayment** \
 * **Company**
 */
export type ReservationStayOfferModelMinGuaranteeType = string;

/** Known values of {@link ReservationStayOfferServiceModelPricingMode} that the service accepts. */
export enum KnownReservationStayOfferServiceModelPricingMode {
  Included = 'Included',
  Additional = 'Additional',
}

/**
 * Defines values for ReservationStayOfferServiceModelPricingMode. \
 * {@link KnownReservationStayOfferServiceModelPricingMode} can be used interchangeably with ReservationStayOfferServiceModelPricingMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Included** \
 * **Additional**
 */
export type ReservationStayOfferServiceModelPricingMode = string;

/** Known values of {@link Enum74} that the service accepts. */
export enum KnownEnum74 {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for Enum74. \
 * {@link KnownEnum74} can be used interchangeably with Enum74,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type Enum74 = string;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBlocksPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the bookingBlocksPost operation. */
export type ApaleoBookingAPIBookingBlocksPostResponse =
  ApaleoBookingAPIBookingBlocksPostHeaders & BlockCreatedModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBlocksGetOptionalParams
  extends coreClient.OperationOptions {
  /** Return blocks for the specific group */
  groupId?: string;
  /** Return blocks filtered by properties */
  propertyIds?: string[];
  /** Return blocks filtered by statuses */
  status?: Get2ItemsItem[];
  /** Return blocks with any of the specified unit groups */
  unitGroupIds?: string[];
  /** Return blocks with any of the specified rate plans */
  ratePlanIds?: string[];
  /** Return blocks with any of the specified time slice definitions */
  timeSliceDefinitionIds?: string[];
  /** Return blocks with any of the specified unit group types */
  unitGroupTypes?: Get6ItemsItem[];
  /** The time slice template, defaults to 'over night' */
  timeSliceTemplate?: Enum2;
  /**
   * The start of the time range. All blocks that are overlapping with the interval specified by from and to
   * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
   */
  fromParam?: Date;
  /**
   * The end of the time range. All blocks that are overlapping with the interval specified by from and to
   * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
   */
  to?: Date;
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /** List of all embedded resources that should be expanded in the response. Possible values are: actions, timeSlices. All other values will be silently ignored. */
  expand?: Get12ItemsItem[];
}

/** Contains response data for the bookingBlocksGet operation. */
export type ApaleoBookingAPIBookingBlocksGetResponse = BlockListModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBlocksCountGetOptionalParams
  extends coreClient.OperationOptions {
  /** Return blocks for the specific group */
  groupId?: string;
  /** Return blocks filtered by properties */
  propertyIds?: string[];
  /** Return blocks with any of the specified unit groups */
  unitGroupIds?: string[];
  /** Return blocks with any of the specified rate plans */
  ratePlanIds?: string[];
  /** Return blocks with any of the specified time slice definitions */
  timeSliceDefinitionIds?: string[];
  /**
   * The start of the time range. All blocks that are overlapping with the interval specified by from and to
   * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
   */
  fromParam?: Date;
  /**
   * The end of the time range. All blocks that are overlapping with the interval specified by from and to
   * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
   */
  to?: Date;
  /** Return blocks filtered by statuses */
  status?: Enum9[];
  /** Return blocks with any of the specified unit group types */
  unitGroupTypes?: Enum10[];
  /** The time slice template, defaults to 'over night' */
  timeSliceTemplate?: Enum11;
}

/** Contains response data for the bookingBlocksCountGet operation. */
export type ApaleoBookingAPIBookingBlocksCountGetResponse = CountModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBlocksByIdGetOptionalParams
  extends coreClient.OperationOptions {
  /** List of all embedded resources that should be expanded in the response. Possible values are: actions, timeSlices. All other values will be silently ignored. */
  expand?: Enum12[];
}

/** Contains response data for the bookingBlocksByIdGet operation. */
export type ApaleoBookingAPIBookingBlocksByIdGetResponse = BlockModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBlocksByIdPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingBlocksByIdPatch operation. */
export type ApaleoBookingAPIBookingBlocksByIdPatchResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBlocksByIdDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingBlocksByIdDelete operation. */
export type ApaleoBookingAPIBookingBlocksByIdDeleteResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBlocksByIdHeadOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBlockActionsByIdConfirmPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingBlockActionsByIdConfirmPut operation. */
export type ApaleoBookingAPIBookingBlockActionsByIdConfirmPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBlockActionsByIdReleasePutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingBlockActionsByIdReleasePut operation. */
export type ApaleoBookingAPIBookingBlockActionsByIdReleasePutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBlockActionsByIdCancelPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingBlockActionsByIdCancelPut operation. */
export type ApaleoBookingAPIBookingBlockActionsByIdCancelPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBlockActionsByIdWashPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingBlockActionsByIdWashPut operation. */
export type ApaleoBookingAPIBookingBlockActionsByIdWashPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBlockActionsByIdAmendPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingBlockActionsByIdAmendPut operation. */
export type ApaleoBookingAPIBookingBlockActionsByIdAmendPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBookingsPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the bookingBookingsPost operation. */
export type ApaleoBookingAPIBookingBookingsPostResponse =
  ApaleoBookingAPIBookingBookingsPostHeaders & BookingCreatedModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBookingsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Filter result by group id. The result set will contain all bookings having groups with the specified id */
  groupId?: string;
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /** Filter result by reservation id. The result set will contain all bookings having reservations with the specified id */
  reservationId?: string;
  /** Filter result by the channel code. The resul set will contain all bookings having reservations with the specified channel code */
  channelCode?: Enum23[];
  /** Filter result by the external code. The result set will contain all bookings having reservations with external code starting with provided value */
  externalCode?: string;
  /**
   * This will filter all bookings for the provided free text. Currently it only looks up if either the lastname, firstname, email or company name of the booker
   * contains one of the provided values
   */
  textSearch?: string;
  /** List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup, ratePlan, services, reservations. All other values will be silently ignored. */
  expand?: Get7ItemsItem[];
}

/** Contains response data for the bookingBookingsGet operation. */
export type ApaleoBookingAPIBookingBookingsGetResponse = BookingListModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBookingsForcePostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the bookingBookingsForcePost operation. */
export type ApaleoBookingAPIBookingBookingsForcePostResponse =
  ApaleoBookingAPIBookingBookingsForcePostHeaders & BookingCreatedModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBookingsByIdReservationsPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the bookingBookingsByIdReservationsPost operation. */
export type ApaleoBookingAPIBookingBookingsByIdReservationsPostResponse =
  ApaleoBookingAPIBookingBookingsByIdReservationsPostHeaders &
    ReservationsCreatedModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBookingsByIdReservationsForcePostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the bookingBookingsByIdReservationsForcePost operation. */
export type ApaleoBookingAPIBookingBookingsByIdReservationsForcePostResponse =
  ApaleoBookingAPIBookingBookingsByIdReservationsForcePostHeaders &
    ReservationsCreatedModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBookingsByIdGetOptionalParams
  extends coreClient.OperationOptions {
  /** List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup, ratePlan, services, reservations, propertyValues. All other values will be silently ignored. */
  expand?: Enum28[];
}

/** Contains response data for the bookingBookingsByIdGet operation. */
export type ApaleoBookingAPIBookingBookingsByIdGetResponse = BookingModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingBookingsByIdPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingBookingsByIdPatch operation. */
export type ApaleoBookingAPIBookingBookingsByIdPatchResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingGroupsPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the bookingGroupsPost operation. */
export type ApaleoBookingAPIBookingGroupsPostResponse =
  ApaleoBookingAPIBookingGroupsPostHeaders & GroupCreatedModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingGroupsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Filter result by requested properties */
  propertyIds?: string[];
  /**
   * The start of the time range. All groups that have blocks overlapping with the interval specified by from and to
   * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
   */
  fromParam?: Date;
  /**
   * The end of the time range. All groups that have blocks overlapping with the interval specified by from and to
   * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
   */
  to?: Date;
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /**
   * This will filter all group bookings for the provided free text. Currently it only looks up if either the group name, lastname,
   * firstname, email or company name of the booker contains one of the provided values
   */
  textSearch?: string;
  /** List of all embedded resources that should be expanded in the response. Possible values are: blocks, actions. All other values will be silently ignored. */
  expand?: Enum29[];
}

/** Contains response data for the bookingGroupsGet operation. */
export type ApaleoBookingAPIBookingGroupsGetResponse = GroupListModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingGroupsByIdGetOptionalParams
  extends coreClient.OperationOptions {
  /** List of all embedded resources that should be expanded in the response. Possible values are: blocks, actions. All other values will be silently ignored. */
  expand?: Enum31[];
}

/** Contains response data for the bookingGroupsByIdGet operation. */
export type ApaleoBookingAPIBookingGroupsByIdGetResponse = GroupModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingGroupsByIdPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingGroupsByIdPatch operation. */
export type ApaleoBookingAPIBookingGroupsByIdPatchResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingGroupsByIdDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingGroupsByIdDelete operation. */
export type ApaleoBookingAPIBookingGroupsByIdDeleteResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingGroupsByIdHeadOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ApaleoBookingAPIBookingGroupsCountGetOptionalParams
  extends coreClient.OperationOptions {
  /** Filter result by requested properties */
  propertyIds?: string[];
  /**
   * The start of the time range. All groups that have blocks overlapping with the interval specified by from and to
   * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
   */
  fromParam?: Date;
  /**
   * The end of the time range. All groups that have blocks overlapping with the interval specified by from and to
   * will be returned<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
   */
  to?: Date;
  /**
   * This will filter all group bookings for the provided free text. Currently it only looks up if either the group name, lastname,
   * firstname, email or company name of the booker contains one of the provided values
   */
  textSearch?: string;
}

/** Contains response data for the bookingGroupsCountGet operation. */
export type ApaleoBookingAPIBookingGroupsCountGetResponse = CountModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingGroupsByIdReservationsPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the bookingGroupsByIdReservationsPost operation. */
export type ApaleoBookingAPIBookingGroupsByIdReservationsPostResponse =
  ApaleoBookingAPIBookingGroupsByIdReservationsPostHeaders &
    ReservationsCreatedModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingOffersGetOptionalParams
  extends coreClient.OperationOptions {
  /** Unit group IDs, used to filter rate plans */
  unitGroupIds?: string[];
  /** Time slice definition IDs, used to filter rate plans */
  timeSliceDefinitionIds?: string[];
  /** The time slice template used to filter the rate plans, defaults to 'over night' */
  timeSliceTemplate?: Enum33;
  /** Unit group types, used to filter rate plans */
  unitGroupTypes?: Enum34[];
  /** Channel code, used to filter the rate plans */
  channelCode?: Enum35;
  /** The promo code associated with a certain special offer */
  promoCode?: string;
  /** The code associated with a corporate rate */
  corporateCode?: string;
  /** The ages of the children you want offers for */
  childrenAges?: number[];
  /** Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned */
  includeUnavailable?: boolean;
}

/** Contains response data for the bookingOffersGet operation. */
export type ApaleoBookingAPIBookingOffersGetResponse = StayOffersModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingRatePlanOffersGetOptionalParams
  extends coreClient.OperationOptions {
  /** The ages of the children you want offers for */
  childrenAges?: number[];
  /** Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned */
  includeUnavailable?: boolean;
  /** The channel code */
  channelCode?: Enum41;
  /** Desired prices for each timeslice */
  overridePrices?: number[];
}

/** Contains response data for the bookingRatePlanOffersGet operation. */
export type ApaleoBookingAPIBookingRatePlanOffersGetResponse = StayOffersModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingServiceOffersGetOptionalParams
  extends coreClient.OperationOptions {
  /** The ages of the children you want offers for */
  childrenAges?: number[];
  /** Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned */
  includeUnavailable?: boolean;
  /** The channel code used to filter the services */
  channelCode?: Enum42;
  /**
   * Depending on the postNextDay setting of a service it will be posted before or after midnight.
   * Breakfast is usually delivered on the next morning, having 'postNextDay' set to true. Its 'default dates' are from the day after
   * arrival until the departure day. For services like dinner 'postNextDay' is false, and default dates are day of arrival until one
   * day before departure.
   * With this query parameter set to 'false', you can also ask for dates outside of those default dates. It defaults to true.
   */
  onlyDefaultDates?: boolean;
}

/** Contains response data for the bookingServiceOffersGet operation. */
export type ApaleoBookingAPIBookingServiceOffersGetResponse =
  ServiceOffersModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingOfferIndexGetOptionalParams
  extends coreClient.OperationOptions {
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
}

/** Contains response data for the bookingOfferIndexGet operation. */
export type ApaleoBookingAPIBookingOfferIndexGetResponse = TimeSliceListModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Filter result by requested properties */
  propertyIds?: string[];
  /** Filter result by requested unit groups */
  unitGroupIds?: string[];
  /** Filter result by requested rate plans */
  ratePlanIds?: string[];
  /** The start of the time interval. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  fromParam?: Date;
  /** The end of the time interval, must be larger than 'from'. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to?: Date;
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /**
   * Filter result by the external code. The result set will contain all reservations that have an external code starting with the
   * provided value
   */
  externalCode?: string;
  /**
   * This will filter all reservations where the provided text is contained in: booker first name or last name or email or company name,
   * primary guest first name or last name or email or company name, external code, reservation id, unit name. The search is case insensitive.
   */
  textSearch?: string;
  /** Filter result by booking id */
  bookingId?: string;
  /** Filter result by requested companies */
  companyIds?: string[];
  /** Filter result by assigned units */
  unitIds?: string[];
  /** Filter result by requested unit group types */
  unitGroupTypes?: Enum45[];
  /** Filter result by requested blocks */
  blockIds?: string[];
  /** Filter result by reservation status */
  status?: Get8ItemsItem[];
  /**
   * Filter by date and time attributes of reservation. Use in combination with the 'To' and 'From' attributes.
   * All filters will check if the date specified by the filter type is between from (included) and to (excluded).
   * The exception being filtering for 'stay', which will return all reservations that are overlapping with the interval specified by from and to.
   */
  dateFilter?: Enum47;
  /** Filter result by the channel code */
  channelCode?: Enum48[];
  /** Filter result by source */
  sources?: string[];
  /** Filter result by validation message category */
  validationMessageCategory?: Get14ItemsItem[];
  /** This will filter reservations based on their balance.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7 */
  balanceFilter?: string[];
  /**
   * If set to {true}, returns only reservations, in which all folios are closed and have an invoice.
   * If set to {false}, returns only reservations, in which some of the folios are open or don't have an invoice
   */
  allFoliosHaveInvoice?: boolean;
  /** List of all fields that can be used to sort the results. Possible values are: arrival:asc, arrival:desc, departure:asc, departure:desc, created:asc, created:desc, updated:asc, updated:desc, id:asc, id:desc, firstname:asc, firstname:desc, lastname:asc, lastname:desc, unitname:asc, unitname:desc. All other values will be silently ignored. */
  sort?: Get21ItemsItem[];
  /** List of all embedded resources that should be expanded in the response. Possible values are: booker, actions, timeSlices, services, assignedUnits, company. All other values will be silently ignored. */
  expand?: Get22ItemsItem[];
}

/** Contains response data for the bookingReservationsGet operation. */
export type ApaleoBookingAPIBookingReservationsGetResponse =
  ReservationListModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationsCountGetOptionalParams
  extends coreClient.OperationOptions {
  /** Filter result by requested properties */
  propertyIds?: string[];
  /** Filter result by requested unit groups */
  unitGroupIds?: string[];
  /** Filter result by requested rate plans */
  ratePlanIds?: string[];
  /** The start of the time interval. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  fromParam?: Date;
  /** The end of the time interval, must be larger than 'from'. When filtering by date, at least one of 'from' and 'to' has to be specified<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to?: Date;
  /**
   * Filter result by the external code. The result set will contain all reservations that have an external code starting with the
   * provided value
   */
  externalCode?: string;
  /**
   * This will filter all reservations where the provided text is contained in: booker first name or last name or email or company name,
   * primary guest first name or last name or email or company name, external code, reservation id, unit name. The search is case insensitive.
   */
  textSearch?: string;
  /** Filter result by booking id */
  bookingId?: string;
  /** Filter result by requested companies */
  companyIds?: string[];
  /** Filter result by assigned units */
  unitIds?: string[];
  /** Filter result by requested blocks */
  blockIds?: string[];
  /** Filter result by source */
  sources?: string[];
  /** This will filter reservations based on their balance.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7 */
  balanceFilter?: string[];
  /**
   * If set to {true}, returns only reservations, in which all folios are closed and have an invoice.
   * If set to {false}, returns only reservations, in which some of the folios are open or don't have an invoice
   */
  allFoliosHaveInvoice?: boolean;
  /** Filter result by requested unit group types */
  unitGroupTypes?: Enum61[];
  /** Filter result by reservation status */
  status?: Enum62[];
  /**
   * Filter by date and time attributes of reservation. Use in combination with the 'To' and 'From' attributes.
   * All filters will check if the date specified by the filter type is between from (included) and to (excluded).
   * The exception being filtering for 'stay', which will return all reservations that are overlapping with the interval specified by from and to.
   */
  dateFilter?: Enum63;
  /** Filter result by the channel code */
  channelCode?: Enum64[];
  /** Filter result by validation message category */
  validationMessageCategory?: Enum65[];
}

/** Contains response data for the bookingReservationsCountGet operation. */
export type ApaleoBookingAPIBookingReservationsCountGetResponse = CountModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationsByIdGetOptionalParams
  extends coreClient.OperationOptions {
  /** List of all embedded resources that should be expanded in the response. Possible values are: timeSlices, services, booker, actions, company, assignedUnits. All other values will be silently ignored. */
  expand?: Enum66[];
}

/** Contains response data for the bookingReservationsByIdGet operation. */
export type ApaleoBookingAPIBookingReservationsByIdGetResponse =
  ReservationModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationsByIdPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingReservationsByIdPatch operation. */
export type ApaleoBookingAPIBookingReservationsByIdPatchResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationsByIdOffersGetOptionalParams
  extends coreClient.OperationOptions {
  /** The list of unit groups used to filter the offers. */
  unitGroupIds?: string[];
  /** The promo code associated with a certain special offer, like corporate rate */
  promoCode?: string;
  /** Ages of children */
  childrenAges?: number[];
  /** Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned */
  includeUnavailable?: boolean;
  /** Date and optional time of arrival<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  arrival?: string;
  /** Date and optional time of departure. Cannot be more than 5 years after arrival.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  departure?: string;
  /** Number of adults */
  adults?: number;
  /** The channel code used to filter the rate plans */
  channelCode?: Enum71;
  /**
   * Whether the offers should be re-quoted based on current prices, or only additions like change of number of adults should be calculated.
   * Defaults to 'false'
   */
  requote?: boolean;
}

/** Contains response data for the bookingReservationsByIdOffersGet operation. */
export type ApaleoBookingAPIBookingReservationsByIdOffersGetResponse =
  ReservationStayOffersModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationsByIdServiceOffersGetOptionalParams
  extends coreClient.OperationOptions {
  /** Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned */
  includeUnavailable?: boolean;
  /**
   * Depending on the postNextDay setting of a service it will by default be posted before or after midnight.
   * Breakfast is usually delivered on the next morning, so all the dates from the day after arrival to the departure day
   * are default dates and will have this flag set to true. For services like a dinner it is the other way around.
   * With this query parameter, you can also ask for the dates, that usually the service will not be booked. It defaults to true.
   */
  onlyDefaultDates?: boolean;
  /** The channel code used to filter the services */
  channelCode?: Enum74;
}

/** Contains response data for the bookingReservationsByIdServiceOffersGet operation. */
export type ApaleoBookingAPIBookingReservationsByIdServiceOffersGetResponse =
  ServiceOffersModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationsByIdServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingReservationsByIdServicesGet operation. */
export type ApaleoBookingAPIBookingReservationsByIdServicesGetResponse =
  ReservationServiceListModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationsByIdServicesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingReservationsByIdServicesDelete operation. */
export type ApaleoBookingAPIBookingReservationsByIdServicesDeleteResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationActionsByIdAssignUnitPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingReservationActionsByIdAssignUnitPut operation. */
export type ApaleoBookingAPIBookingReservationActionsByIdAssignUnitPutResponse =
  AutoAssignedUnitListModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationActionsByIdAssignUnitByUnitIdPutOptionalParams
  extends coreClient.OperationOptions {
  /** The start date and optional time for the unit assignment. If not specified, the reservation's arrival will be used.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  fromParam?: string;
  /** The end date and optional time for the unit assignment. If not specified, the reservation's departure will be used.<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to?: string;
}

/** Contains response data for the bookingReservationActionsByIdAssignUnitByUnitIdPut operation. */
export type ApaleoBookingAPIBookingReservationActionsByIdAssignUnitByUnitIdPutResponse =
  AssignedUnitModel;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationActionsByIdUnassignUnitsPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingReservationActionsByIdUnassignUnitsPut operation. */
export type ApaleoBookingAPIBookingReservationActionsByIdUnassignUnitsPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationActionsByIdCheckinPutOptionalParams
  extends coreClient.OperationOptions {
  /** Define if city tax should be added for this reservation or not. The default is "true". */
  withCityTax?: boolean;
}

/** Contains response data for the bookingReservationActionsByIdCheckinPut operation. */
export type ApaleoBookingAPIBookingReservationActionsByIdCheckinPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationActionsByIdCheckoutPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingReservationActionsByIdCheckoutPut operation. */
export type ApaleoBookingAPIBookingReservationActionsByIdCheckoutPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationActionsByIdCancelPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingReservationActionsByIdCancelPut operation. */
export type ApaleoBookingAPIBookingReservationActionsByIdCancelPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationActionsByIdNoshowPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingReservationActionsByIdNoshowPut operation. */
export type ApaleoBookingAPIBookingReservationActionsByIdNoshowPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationActionsByIdAmendPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingReservationActionsByIdAmendPut operation. */
export type ApaleoBookingAPIBookingReservationActionsByIdAmendPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationActionsByIdAmendForcePutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingReservationActionsByIdAmendForcePut operation. */
export type ApaleoBookingAPIBookingReservationActionsByIdAmendForcePutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationActionsByIdBookServicePutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingReservationActionsByIdBookServicePut operation. */
export type ApaleoBookingAPIBookingReservationActionsByIdBookServicePutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationActionsByIdBookServiceForcePutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingReservationActionsByIdBookServiceForcePut operation. */
export type ApaleoBookingAPIBookingReservationActionsByIdBookServiceForcePutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationActionsByIdRemoveCityTaxPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingReservationActionsByIdRemoveCityTaxPut operation. */
export type ApaleoBookingAPIBookingReservationActionsByIdRemoveCityTaxPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingReservationActionsByIdAddCityTaxPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingReservationActionsByIdAddCityTaxPut operation. */
export type ApaleoBookingAPIBookingReservationActionsByIdAddCityTaxPutResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface ApaleoBookingAPIBookingTypesSourcesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the bookingTypesSourcesGet operation. */
export type ApaleoBookingAPIBookingTypesSourcesGetResponse = SourceListModel;

/** Optional parameters. */
export interface ApaleoBookingAPIOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Overrides client endpoint. */
  endpoint?: string;
}
