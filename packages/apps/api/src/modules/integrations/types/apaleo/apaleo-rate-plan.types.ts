/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from '@azure/core-client';

export interface AgeCategoryModel {
  /** The age category id */
  id: string;
  /** The code for the age category */
  code: string;
  /** The id of the property for which the age category will be created */
  propertyId: string;
  /** The name for the age category */
  name: { [propertyName: string]: string };
  /** The minimum age for the age category. The specified value is included in the age range */
  minAge: number;
  /** The maximum age for the age category. The specified value is included in the age range */
  maxAge: number;
}

export interface MessageItemCollection {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly messages?: string[];
}

export interface Operation {
  /** Anything */
  value?: any;
  path?: string;
  op?: string;
  from?: string;
}

export interface CreateAgeCategoryModel {
  /** The code for the age category */
  code: string;
  /** The id of the property for which the age category will be created */
  propertyId: string;
  /** The name for the age category */
  name: { [propertyName: string]: string };
  /** The minimum age for the age category. The specified value is included in the age range */
  minAge: number;
  /**
   * The maximum age for the age category. The specified value is included in the age range and the maximum value
   * is 17
   */
  maxAge: number;
}

export interface AgeCategoryCreatedModel {
  /** The age category id */
  id: string;
}

export interface AgeCategoryListModel {
  /** List of age categories */
  ageCategories: AgeCategoryItemModel[];
  /** Total count of items */
  count: number;
}

export interface AgeCategoryItemModel {
  /** The age category id */
  id: string;
  /** The code for the age category */
  code: string;
  /** The id of the property for which the age category will be created */
  propertyId: string;
  /** The name for the age category */
  name: string;
  /** The minimum age for the age category. The specified value is included in the age range */
  minAge: number;
  /** The maximum age for the age category. The specified value is included in the age range */
  maxAge: number;
}

export interface CreateCancellationPolicyModel {
  /** The code for the cancellation policy, used to assemble its id */
  code: string;
  /** The name for the cancellation policy */
  name: { [propertyName: string]: string };
  /** The description for the cancellation policy */
  description: { [propertyName: string]: string };
  /** The id of the property where the cancellation policy will be created */
  propertyId: string;
  periodFromReference?: PeriodModel;
  /** The due date for the cancellation policy will be calculated based on this reference point */
  reference: CreateCancellationPolicyModelReference;
  fee: FeeDetailsModel;
}

export interface PeriodModel {
  /** The number of hours within the period */
  hours?: number;
  /** The number of days within the period */
  days?: number;
  /** The number of months within the period */
  months?: number;
}

export interface FeeDetailsModel {
  /** VAT that applies for the fee */
  vatType: FeeDetailsModelVatType;
  fixedValue?: MonetaryValueModel;
  percentValue?: PercentValueModel;
}

export interface MonetaryValueModel {
  amount: number;
  currency: string;
}

export interface PercentValueModel {
  /** Percent to take from the base. Must be between 0 and 100. */
  percent: number;
  /**
   * If set, limits the calculation base to the specified number of time slices, starting from the beginning.<br />
   * If not set, the entire stay will be used as a base.
   */
  limit?: number;
  /**
   * Services included in the calculation base. If none are set, only charges for the unit will be used.<br />
   * The services are only included, if they are part of the rate plan. Extra services are ignored.
   */
  includeServiceIds?: string[];
}

export interface CancellationPolicyCreatedModel {
  /** The cancellation policy ID */
  id: string;
}

export interface CancellationPolicyListModel {
  /** List of cancellation policies */
  cancellationPolicies: CancellationPolicyItemModel[];
  /** Total count of items */
  count: number;
}

export interface CancellationPolicyItemModel {
  /** Id */
  id: string;
  /** Name */
  name: string;
  /** The code for the cancellation policy */
  code: string;
  /** Description */
  description: string;
  /** The id of the property where the cancellation policy was created */
  propertyId: string;
  periodFromReference: PeriodModel;
  /**
   * The due date for the cancellation policy will be calculated based on this reference point, and the defined time period.
   * <br /><br />
   * Examples:<br />
   * - 1 day and 12 hours prior to arrival<br />
   * - 0 prior to arrival (meaning, cancellations are always free)<br />
   * - 24 hours after booking<br />
   * - 0 after booking (meaning, cancellations ar never free)
   */
  reference: CancellationPolicyItemModelReference;
  fee: FeeDetailsModel;
}

export interface CancellationPolicyModel {
  /** The cancellation policy id */
  id: string;
  /** The code for the policy */
  code: string;
  /** The name for the cancellation policy */
  name: { [propertyName: string]: string };
  /** The description for the cancellation policy */
  description: { [propertyName: string]: string };
  /** The id of the property where the cancellation policy was created */
  propertyId: string;
  periodFromReference: PeriodModel;
  /**
   * The due date for the cancellation policy will be calculated based on this reference point, and the defined time period.
   * <br /><br />
   * Examples:<br />
   * - 1 day and 12 hours prior to arrival<br />
   * - 0 prior to arrival (meaning, cancellations are always free)<br />
   * - 24 hours after booking<br />
   * - 0 after booking (meaning, cancellations ar never free)
   */
  reference: CancellationPolicyModelReference;
  fee: FeeDetailsModel;
}

export interface CreateCompanyModel {
  /** The code for the company */
  code: string;
  /** The ID of the property */
  propertyId: string;
  /** The name of the company */
  name: string;
  /** The tax ID of the company */
  taxId?: string;
  address: AddressModel;
  /** Whether or not the company is allowed to check out on AR / invoice */
  canCheckOutOnAr: boolean;
  /** Rate plans that can be booked by this company */
  ratePlans?: CreateRatePlanCompanyModel[];
}

export interface AddressModel {
  addressLine1: string;
  addressLine2?: string;
  postalCode: string;
  city: string;
  regionCode?: string;
  countryCode: string;
}

export interface CreateRatePlanCompanyModel {
  /** Rate plan ID that is used by this company */
  id: string;
  /**
   * Optional rate plan code that is used by this company. Default is companyCode-ratePlanCode.
   * Same code can be specified for several rate plans in one company.
   * No two companies can have a rate plan with the same code.
   */
  corporateCode?: string;
}

export interface CompanyCreatedModel {
  /** The company ID */
  id: string;
}

export interface CompanyListModel {
  /** List of companies */
  companies: CompanyModel[];
  /** Total count of items */
  count: number;
}

export interface CompanyModel {
  /** The ID of this company */
  id: string;
  /** The code for the company */
  code: string;
  /** The ID of the property */
  propertyId: string;
  /** The name of the company */
  name: string;
  /** The tax ID of the company */
  taxId?: string;
  address: CompanyAddressModel;
  /** Whether or not the company is allowed to check out on AR / invoice */
  canCheckOutOnAr: boolean;
  /** Rate plans that can be booked by this company */
  ratePlans?: RatePlanCompanyModel[];
}

export interface CompanyAddressModel {
  addressLine1: string;
  addressLine2?: string;
  postalCode: string;
  city: string;
  regionCode?: string;
  countryCode: string;
}

export interface RatePlanCompanyModel {
  /** Rate plan ID that is used by this company */
  id: string;
  /** Rate plan code that is used by this company */
  code: string;
  /** Company rate plan code, identifying the company + rate plan pair. Is used is offers. */
  corporateCode?: string;
  /** The name of the rate plan */
  name: string;
}

export interface CorporateCodeListModel {
  /** List of existing corporate codes */
  corporateCodes: CorporateCodeModel[];
  /** Total count of items */
  count: number;
}

export interface CorporateCodeModel {
  /** The corporate rate code */
  code: string;
}

export interface CreateNoShowPolicyModel {
  /** The code for the no-show policy, used to assemble its id */
  code: string;
  /** The name for the no-show policy */
  name: { [propertyName: string]: string };
  /** The description for the no-show policy */
  description: { [propertyName: string]: string };
  /** The id of the property where the no-show policy will be created */
  propertyId: string;
  fee: FeeDetailsModel;
}

export interface NoShowPolicyCreatedModel {
  /** The no-show policy ID */
  id: string;
}

export interface NoShowPolicyListModel {
  /** List of no-show policies */
  noShowPolicies: NoShowPolicyItemModel[];
  /** Total count of items */
  count: number;
}

export interface NoShowPolicyItemModel {
  /** The no-show policy id */
  id: string;
  /** The code for the policy */
  code: string;
  /** The name for the no-show policy */
  name: string;
  /** The description for the no-show policy */
  description: string;
  /** The id of the property where the no-show policy was created */
  propertyId: string;
  fee: FeeDetailsModel;
}

export interface NoShowPolicyModel {
  /** The no-show policy id */
  id: string;
  /** The code for the policy */
  code: string;
  /** The name for the no-show policy */
  name: { [propertyName: string]: string };
  /** The description for the no-show policy */
  description: { [propertyName: string]: string };
  /** The id of the property where the no-show policy was created */
  propertyId: string;
  fee: FeeDetailsModel;
}

export interface PromoCodeListModel {
  /** List of existing promo codes */
  promoCodes: PromoCodeModel[];
  /** Total count of items */
  count: number;
}

export interface PromoCodeModel {
  /**
   * The code of special rate or discount
   * or agreement between the hotel and an organization
   */
  code: string;
  /** All rate plan IDs having this code */
  relatedRateplanIds: string[];
}

export interface RateListModel {
  /** List of rates */
  rates: RateItemModel[];
  /** Total count of items */
  count: number;
}

export interface RateItemModel {
  /** Date and time the rate begins<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: Date;
  /** Date and time the rate ends<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: Date;
  price?: MonetaryValueModel;
  includedServicesPrice?: MonetaryValueModel;
  /** A list of prices for occupancies 2 or higher. Only set, if the rate plan defines surcharges for different occupancies */
  calculatedPrices?: CalculatedRateModel[];
  restrictions?: RateRestrictionsModel;
}

export interface CalculatedRateModel {
  /** Number of adults this rate is valid for */
  adults: number;
  price: MonetaryValueModel;
  includedServicesPrice?: MonetaryValueModel;
}

export interface RateRestrictionsModel {
  /**
   * The minimum length of stay in order to book the rate. If at least this number
   * of time slices are covered by the stay duration the rate will be offered.
   */
  minLengthOfStay?: number;
  /**
   * The maximum length of stay in order to book the rate. If not more than this number
   * of time slices are covered by the stay duration the rate will be offered.
   */
  maxLengthOfStay?: number;
  /** Whether the rate can be booked for a stay-through reservation */
  closed: boolean;
  /** Whether the rate can be booked on the reservation's arrival date */
  closedOnArrival: boolean;
  /** Whether the rate can be booked on the reservation's departure date */
  closedOnDeparture: boolean;
}

export interface ReplaceRateListModel {
  /** List of rates */
  rates: ReplaceRateModel[];
}

export interface ReplaceRateModel {
  /** Date and time the rate begins<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: Date;
  /** Date and time the rate ends<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: Date;
  price?: MonetaryValueModel;
  restrictions?: RateRestrictionsModel;
}

export interface CountModel {
  count: number;
}

export interface RatePlanListModel {
  /** List of rate plans */
  ratePlans: RatePlanItemModel[];
  /** Total count of items */
  count: number;
}

export interface RatePlanItemModel {
  /** The rate plan id */
  id: string;
  /** The code for the rate plan that can be shown in reports and table views */
  code: string;
  /** The name for the rate plan */
  name: string;
  /** The description for the rate plan */
  description: string;
  /**
   * The minimum guarantee to be provided when this rate plan is booked so
   * the reservation will be guaranteed to the guest
   */
  minGuaranteeType: RatePlanItemModelMinGuaranteeType;
  /**
   * The calculation mode is used when calculating the adults' surcharges and derived rates.
   * Defaults to Truncate. Example: for a rate of 125.99 and a surcharge of +10%,
   * when Truncate is selected, the result would be 125.99 + 12 = 137.99
   * When Round is selected, the result would be 125.99 + 12.60 = 138.59
   */
  priceCalculationMode?: RatePlanItemModelPriceCalculationMode;
  property: EmbeddedPropertyModel;
  unitGroup: EmbeddedUnitGroupModel;
  cancellationPolicy: EmbeddedCancellationPolicyModel;
  noShowPolicy: EmbeddedNoShowPolicyModel;
  /** The channel codes the rate plan is sold through */
  channelCodes: RatePlanItemModelChannelCodesItem[];
  /**
   * The rate codes for promotional and hidden rates. If at least one code is set the rate will be not publicly visible
   * anymore and only be offered when one of the promo codes is given in the offer request.
   * For backward compatibility it is still not possible to set multiple promo codes.
   */
  promoCodes?: string[];
  timeSliceDefinition: EmbeddedTimeSliceDefinitionModel;
  restrictions?: BookingRestrictionsModel;
  /** Time periods when the rate plan is bookable */
  bookingPeriods?: BookingPeriodModel[];
  /** Indicates whether the rate plan has an active booking period */
  isBookable: boolean;
  /** Whether the rate plan is subject to city tax or not */
  isSubjectToCityTax: boolean;
  pricingRule?: PricingRuleModel;
  /** Indicates whether the rates for this rate plan are derived from another rate plan */
  isDerived: boolean;
  /** Indicates the derivation level of the rate plan. When zero, it is a rate plan with manually managed prices. */
  derivationLevel: number;
  /** Additional charges for more than single occupancy. The percent or absolute value will be added to the manually defined or calculated derived rates. */
  surcharges?: SurchargeModel[];
  /** Additional charges per age category. */
  ageCategories?: RatePlanAgeCategoryModel[];
  /** Services that are included in the rate plan */
  includedServices?: RatePlanServiceItemModel[];
  /** Companies that can use this rate plan */
  companies?: CompanyRatePlanModel[];
  ratesRange?: RatesRangeModel;
  /** The collection of accounting configs with validity periods. */
  accountingConfigs: AccountingConfigModel[];
}

export interface EmbeddedPropertyModel {
  /** The property id */
  id: string;
  /** The code for the property that can be shown in reports and table views */
  code?: string;
  /** The name for the property */
  name?: string;
  /**
   * The description for the property
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

export interface EmbeddedUnitGroupModel {
  /** The unit group id */
  id: string;
  /** The code for the unit group that can be shown in reports and table views */
  code?: string;
  /** The name for the unit group */
  name?: string;
  /** The description for the unit group */
  description?: string;
  /** The unit group type */
  type?: EmbeddedUnitGroupModelType;
}

export interface EmbeddedCancellationPolicyModel {
  /** The cancellation policy id */
  id: string;
  /** The code for the cancellation policy that can be shown in reports and table views */
  code?: string;
  /** The name for the cancellation policy */
  name?: string;
  /** The description for the cancellation policy */
  description?: string;
  periodPriorToArrival?: PeriodModel;
}

export interface EmbeddedNoShowPolicyModel {
  /** The no-show policy id */
  id: string;
  /** The code for the no-show policy that can be shown in reports and table views */
  code?: string;
  /** The name for the no-show policy */
  name?: string;
  /** The description for the no-show policy */
  description?: string;
}

export interface EmbeddedTimeSliceDefinitionModel {
  /** The time slice definition id */
  id: string;
  /** The name for the time slice definition */
  name: string;
  /** The template used by the time slice defintion */
  template: EmbeddedTimeSliceDefinitionModelTemplate;
  /** The check-in time for reservations based on this rate plan<br />A time (without fractional second part) as defined in the <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  checkInTime: string;
  /** The check-out time for reservations based on this rate plan<br />A time (without fractional second part) as defined in the <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  checkOutTime: string;
}

export interface BookingRestrictionsModel {
  minAdvance?: PeriodModel;
  maxAdvance?: PeriodModel;
  /**
   * Time of day until the late booking can be made for this rate plan
   * Restrictions:
   * - the time has to be between the check-in (excl.) and check-out time (excl.)
   * - can only be set, if MinAdvance is not set<br />A time (without fractional second part) as defined in the <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a>
   */
  lateBookingUntil?: string;
}

export interface BookingPeriodModel {
  /** Start of booking period<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  from: Date;
  /** End of booking period<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO8601:2004</a> */
  to: Date;
}

export interface PricingRuleModel {
  baseRatePlan: EmbeddedRatePlanModel;
  /**
   * The type used to control the calculation of the difference to the rates of the defined base
   * rate plan
   */
  type: PricingRuleModelType;
  /**
   * The value used to control the calculation of the difference to the rates of the defined base
   * rate plan. It can be a positive and a negative value
   */
  value: number;
}

export interface EmbeddedRatePlanModel {
  /** The rate plan id */
  id: string;
  /** The code for the rate plan that can be shown in reports and table views */
  code?: string;
  /** The name for the rate plan */
  name?: string;
  /** The description for the rate plan */
  description?: string;
  /** Whether the rate plan is subject to city tax or not */
  isSubjectToCityTax: boolean;
}

export interface SurchargeModel {
  /** The total numbers of adults */
  adults: number;
  /** Specifies how to interpret 'Value' */
  type: SurchargeModelType;
  /** The percent or absolute value (in the rate plan's currency) of the surcharge */
  value: number;
}

export interface RatePlanAgeCategoryModel {
  /** The id of the age category */
  id: string;
  /**
   * Additional charges for the current age category. The absolute value will be added to the manually defined or calculated derived rates.
   * The values for 'adults' must be unique within the list, and starting from 1. Values equal or higher than
   * the maximum unit group occupancy will be silently ignored.
   */
  surcharges: AgeCategorySurchargeModel[];
}

export interface AgeCategorySurchargeModel {
  /** The number of adults */
  adults: number;
  /**
   * The absolute value in the currency of the rate plan as surcharge for each child accompanied by the given number of 'adults'.
   * The minimum value is 0.
   */
  value: number;
}

export interface RatePlanServiceItemModel {
  service: EmbeddedServiceModel;
  grossPrice: MonetaryValueModel;
  /** Whether the service price is included in or added to the base rate. The property defaults to `Included`. */
  pricingMode: RatePlanServiceItemModelPricingMode;
}

export interface EmbeddedServiceModel {
  /** The service id */
  id: string;
  /** The code for the service */
  code?: string;
  /** The name for the service */
  name?: string;
  /** The description for the service */
  description?: string;
}

export interface CompanyRatePlanModel {
  /** Company ID that can use this rate plan */
  id: string;
  /** The code of the company that can book this rate plan */
  code: string;
  /** Company rate plan code, identifying the company + rate plan pair. Is used is offers. */
  corporateCode: string;
  /** The name of the company that can book this rate plan */
  name: string;
}

export interface RatesRangeModel {
  /** The first date when the rate plan has rates set */
  from: Date;
  /** The last date when the rate plan has rates set */
  to: Date;
}

export interface AccountingConfigModel {
  /** The VAT type */
  vatType: AccountingConfigModelVatType;
  /** The service type */
  serviceType: AccountingConfigModelServiceType;
  /** The sub-accounts id */
  subAccountId?: string;
  /** Which date this configuration is valid from */
  validFrom: Date;
}

export interface CreateRatePlanModel {
  /** The code for the rate plan that can be shown in reports and table views */
  code: string;
  /** The id of the property for which the rate plan will be created */
  propertyId: string;
  /** The id of the unit group offered with this rate plan */
  unitGroupId: string;
  /** The id of the cancellation policy valid for this rate plan */
  cancellationPolicyId: string;
  /** The id of the no-show policy valid for this rate plan */
  noShowPolicyId?: string;
  /** The channel codes the rate plan is sold through */
  channelCodes: CreateRatePlanModelChannelCodesItem[];
  /**
   * The rate codes for promotional and hidden rates. If at least one code is set the rate will be not publicly visible
   * anymore and only be offered when one of the promo codes is given in the offer request.
   * For backward compatibility it is still not possible to set multiple promo codes.
   */
  promoCodes?: string[];
  /**
   * Whether the rate plan is subject to city tax or not.
   * Default value is {true}
   */
  isSubjectToCityTax?: boolean;
  /** Defines the time periods for which the unit group related to this rate plan is rented out */
  timeSliceDefinitionId: string;
  /** The name for the rate plan */
  name: { [propertyName: string]: string };
  /** The description for the rate plan */
  description: { [propertyName: string]: string };
  /**
   * The minimum guarantee to be provided when this rate plan is booked so
   * the reservation will be guaranteed to the guest
   */
  minGuaranteeType: CreateRatePlanModelMinGuaranteeType;
  /**
   * The calculation mode is used when calculating the adults' surcharges and derived rates.
   * Defaults to Truncate. Example: for a rate of 125.99 and a surcharge of +10%,
   * when Truncate is selected, the result would be 125.99 + 12 = 137.99
   * When Round is selected, the result would be 125.99 + 12.60 = 138.59
   */
  priceCalculationMode?: CreateRatePlanModelPriceCalculationMode;
  /** Time periods when the rate plan is bookable */
  bookingPeriods?: BookingPeriodModel[];
  restrictions?: BookingRestrictionsModel;
  pricingRule?: CreatePricingRuleModel;
  /**
   * Additional charges for more than single occupancy. The percent or absolute value will be added to
   * the manually defined or calculated derived rates.
   * The values for 'adults' must be unique within the list and starting from occupancy of 2 adults. Values higher than the maximum unit group occupancy will be silently ignored.
   * The surcharges are required for all possible occupancies defined by the 'MaxPersons' of the unit group.
   */
  surcharges?: SurchargeModel[];
  /** Additional charges per age category. */
  ageCategories?: RatePlanAgeCategoryModel[];
  /** Services that are included in the rate plan */
  includedServices?: RatePlanServiceModel[];
  /** Companies that can use this rate plan */
  companies?: CreateCompanyRatePlanModel[];
  /**
   * The collection of accounting configs with validity periods.
   * This is a temporary field, avoid using it.
   */
  accountingConfigs?: AccountingConfigModel[];
}

export interface CreatePricingRuleModel {
  /**
   * The id of the rate plan that will be used as base when calculating the rates.
   * The derivation level of the rate plan used as base rate plan cannot be greater than 2
   */
  baseRatePlanId: string;
  /**
   * The type used to control the calculation of the difference to the rates of the defined base
   * rate plan
   */
  type: CreatePricingRuleModelType;
  /**
   * The value used to control the calculation of the difference to the rates of the defined base
   * rate plan. It can be a positive and a negative value. The system will prevent you to define
   * a value that would lead to negative rates
   */
  value: number;
}

export interface RatePlanServiceModel {
  /** Service id to be included in the rate plan */
  serviceId: string;
  grossPrice: MonetaryValueModel;
  /** Whether the service price is included in or added to the base rate. The property defaults to `Included`. */
  pricingMode?: RatePlanServiceModelPricingMode;
}

export interface CreateCompanyRatePlanModel {
  /** Company ID that can use this rate plan */
  id: string;
  /**
   * Optional rate plan code that is used by the company. Default is companyCode-ratePlanCode.
   * Same code can be specified for several rate plans in one company.
   * No two companies can have a rate plan with the same code.
   */
  corporateCode?: string;
}

export interface RatePlanCreatedModel {
  /** The rate plan id */
  id: string;
}

export interface RatePlanModel {
  /** The rate plan  id */
  id: string;
  /** The code for the rate plan that can be shown in reports and table views */
  code: string;
  /** The name for the rate plan */
  name: { [propertyName: string]: string };
  /** The description for the rate plan */
  description: { [propertyName: string]: string };
  /**
   * The minimum guarantee to be provided when this rate plan is booked so
   * the reservation will be guaranteed to the guest
   */
  minGuaranteeType: RatePlanModelMinGuaranteeType;
  /**
   * The calculation mode is used when calculating the adults' surcharges and derived rates.
   * Defaults to Truncate. Example: for a rate of 125.99 and a surcharge of +10%,
   * when Truncate is selected, the result would be 125.99 + 12 = 137.99
   * When Round is selected, the result would be 125.99 + 12.60 = 138.59
   */
  priceCalculationMode?: RatePlanModelPriceCalculationMode;
  property: EmbeddedPropertyModel;
  unitGroup: EmbeddedUnitGroupModel;
  cancellationPolicy: EmbeddedCancellationPolicyModel;
  noShowPolicy: EmbeddedNoShowPolicyModel;
  /** The channel codes the rate plan is sold through */
  channelCodes: RatePlanModelChannelCodesItem[];
  /** The collection of accounting configs with validity periods. */
  accountingConfigs: AccountingConfigModel[];
  /**
   * The rate codes for promotional and hidden rates. If at least one code is set the rate will be not publicly visible
   * anymore and only be offered when one of the promo codes is given in the offer request.
   * For backward compatibility it is still not possible to set multiple promo codes.
   */
  promoCodes?: string[];
  timeSliceDefinition: EmbeddedTimeSliceDefinitionModel;
  restrictions?: BookingRestrictionsModel;
  /** Time periods when the rate plan is bookable */
  bookingPeriods?: BookingPeriodModel[];
  /** Indicates whether the rate plan has an active booking period */
  isBookable: boolean;
  /**
   * Whether the rate plan is subject to city tax or not.
   * Default value is {true}
   */
  isSubjectToCityTax: boolean;
  pricingRule?: PricingRuleModel;
  /** Indicates whether the rates for this rate plan are derived from another rate plan */
  isDerived: boolean;
  /** Indicates the derivation level of the rate plan. When zero, it is a rate plan with manually managed prices. */
  derivationLevel: number;
  /** Additional charges for more than single occupancy. The percent or absolute value will be added to the manually defined or calculated derived rates. */
  surcharges?: SurchargeModel[];
  /** Additional charges per age category. */
  ageCategories?: RatePlanAgeCategoryModel[];
  /** Services that are included in the rate plan */
  includedServices?: RatePlanServiceModel[];
  /** Companies that can use this rate plan */
  companies?: CompanyRatePlanModel[];
  ratesRange?: RatesRangeModel;
}

export interface ReplaceRatePlanModel {
  /** The name for the rate plan */
  name: { [propertyName: string]: string };
  /** The description for the rate plan */
  description: { [propertyName: string]: string };
  /**
   * The minimum guarantee to be provided when this rate plan is booked so
   * the reservation will be guaranteed to the guest
   */
  minGuaranteeType: ReplaceRatePlanModelMinGuaranteeType;
  /**
   * The calculation mode is used when calculating the adults' surcharges and derived rates.
   * Defaults to Truncate. Example: for a rate of 125.99 and a surcharge of +10%,
   * when Truncate is selected, the result would be 125.99 + 12 = 137.99
   * When Round is selected, the result would be 125.99 + 12.60 = 138.59
   */
  priceCalculationMode?: ReplaceRatePlanModelPriceCalculationMode;
  /** The channel codes the rate plan is sold through */
  channelCodes: ReplaceRatePlanModelChannelCodesItem[];
  /**
   * The rate codes for promotional and hidden rates. If at least one code is set the rate will be not publicly visible
   * anymore and only be offered when one of the promo codes is given in the offer request.
   * For backward compatibility it is still not possible to set multiple promo codes.
   */
  promoCodes?: string[];
  /**
   * Whether the rate plan is subject to city tax or not.
   * Default value is {true}
   */
  isSubjectToCityTax?: boolean;
  /** The id of the cancellation policy valid for this rate plan */
  cancellationPolicyId: string;
  /** The id of the no-show policy valid for this rate plan */
  noShowPolicyId?: string;
  /** Time periods when the rate plan is bookable */
  bookingPeriods?: BookingPeriodModel[];
  restrictions?: BookingRestrictionsModel;
  /** Services that are included in the rate plan */
  includedServices?: RatePlanServiceModel[];
  /** Companies that can use this rate plan */
  companies?: ReplaceCompanyRatePlanModel[];
  pricingRule?: CreatePricingRuleModel;
  /**
   * Additional charges for more than single occupancy. The percent or absolute value will be added to the manually defined or calculated derived rates.
   * The values for 'adults' must be unique within the list and starting from occupancy of 2 adults. Values higher than the maximum unit group occupancy will be silently ignored.
   * The surcharges are required for all possible occupancies defined by the 'MaxPersons' of the unit group.
   */
  surcharges?: SurchargeModel[];
  /** Additional charges per age category. */
  ageCategories?: RatePlanAgeCategoryModel[];
  /** The collection of accounting configs with validity periods. */
  accountingConfigs?: AccountingConfigModel[];
}

export interface ReplaceCompanyRatePlanModel {
  /** Company ID that can use this rate plan */
  id: string;
  /**
   * Optional rate plan code that is used by the company. Default is companyCode-ratePlanCode.
   * Same code can be specified for several rate plans in one company.
   * No two companies can have a rate plan with the same code.
   */
  corporateCode?: string;
}

export interface RatePlanCodeListModel {
  /** List of existing rate plan codes */
  ratePlanCodes: RatePlanCodeModel[];
  /** Total count of items */
  count: number;
}

export interface RatePlanCodeModel {
  /** The rate plan code */
  code: string;
}

export interface CreateServiceModel {
  /** The code for the service that can be shown in reports and table views */
  code: string;
  /** The name for the service */
  name: { [propertyName: string]: string };
  /** The description for the service */
  description: { [propertyName: string]: string };
  /** The id of the property where the item will be created */
  propertyId: string;
  defaultGrossPrice: MonetaryValueModel;
  /** Defines the granularity for which this item is offered and priced. */
  pricingUnit: CreateServiceModelPricingUnit;
  /** Whether the service is delivered and posted on same business date as the accommodation, or on the next day. */
  postNextDay: boolean;
  availability?: AvailabilityModel;
  /** The channel codes the service is sold through. When no channels are defined, the service is sold only in a package */
  channelCodes?: CreateServiceModelChannelCodesItem[];
  /**
   * The collection of accounting configs with validity periods.
   * This is a temporary field, avoid using it.
   */
  accountingConfigs?: AccountingConfigModel[];
}

export interface AvailabilityModel {
  /**
   * You can choose if the service will only be offered
   * for the arrival or departure time slice like early check-in or a final cleaning service. You can also define
   * a service that is available to be booked for the whole stay. The property defaults to 'Daily'.
   */
  mode: AvailabilityModelMode;
}

export interface ServiceCreatedModel {
  /** The item id */
  id: string;
}

export interface ServiceListModel {
  /** List of packages */
  services: ServiceItemModel[];
  /** Total count of items */
  count: number;
}

export interface ServiceItemModel {
  /** Id */
  id: string;
  /** Name */
  name: string;
  /** The code for the service */
  code: string;
  /** Description */
  description: string;
  defaultGrossPrice: MonetaryValueModel;
  /** Defines per which unit (flat, room, person) this item is offered and priced */
  pricingUnit?: ServiceItemModelPricingUnit;
  /** The service type, used by accounting to determine the correct revenue account */
  serviceType: ServiceItemModelServiceType;
  /** The vat type, used by accounting to determine the correct vat amount and account */
  vatType: ServiceItemModelVatType;
  availability: AvailabilityModel;
  property: EmbeddedPropertyModel;
  /** ID of the custom sub-account, used by accounting to determine the correct revenue account */
  subAccountId?: string;
  /** The channel codes the service is sold through */
  channelCodes?: ServiceItemModelChannelCodesItem[];
}

export interface ServiceModel {
  /** The service id */
  id: string;
  /** The code for the service */
  code: string;
  /** The name for the service */
  name: { [propertyName: string]: string };
  /** The description for the service */
  description: { [propertyName: string]: string };
  defaultGrossPrice: MonetaryValueModel;
  /** Defines the granularity (room, person) for which this item is offered and priced */
  pricingUnit: ServiceModelPricingUnit;
  /** Whether the service is delivered and posted on the same business date as the accommodation, or on the next day. */
  postNextDay: boolean;
  availability: AvailabilityModel;
  /** The collection of accounting configs with validity periods. */
  accountingConfigs: AccountingConfigModel[];
  property: EmbeddedPropertyModel;
  /** The channel codes the service is sold through. When no channels are defined, the service is sold only in a package */
  channelCodes?: ServiceModelChannelCodesItem[];
}

/** Defines headers for ApaleoRatePlanAPI_settingsAgeCategoriesPost operation. */
export interface ApaleoRatePlanAPISettingsAgeCategoriesPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoRatePlanAPI_rateplanCancellationPoliciesPost operation. */
export interface ApaleoRatePlanAPIRateplanCancellationPoliciesPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoRatePlanAPI_rateplanCompaniesPost operation. */
export interface ApaleoRatePlanAPIRateplanCompaniesPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoRatePlanAPI_rateplanNoShowPoliciesPost operation. */
export interface ApaleoRatePlanAPIRateplanNoShowPoliciesPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoRatePlanAPI_rateplanRatePlansPost operation. */
export interface ApaleoRatePlanAPIRateplanRatePlansPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Defines headers for ApaleoRatePlanAPI_rateplanServicesPost operation. */
export interface ApaleoRatePlanAPIRateplanServicesPostHeaders {
  /** The location of the created resource. */
  location?: string;
}

/** Known values of {@link CreateCancellationPolicyModelReference} that the service accepts. */
export enum KnownCreateCancellationPolicyModelReference {
  PriorToArrival = 'PriorToArrival',
  AfterBooking = 'AfterBooking',
}

/**
 * Defines values for CreateCancellationPolicyModelReference. \
 * {@link KnownCreateCancellationPolicyModelReference} can be used interchangeably with CreateCancellationPolicyModelReference,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PriorToArrival** \
 * **AfterBooking**
 */
export type CreateCancellationPolicyModelReference = string;

/** Known values of {@link FeeDetailsModelVatType} that the service accepts. */
export enum KnownFeeDetailsModelVatType {
  Null = 'Null',
  VeryReduced = 'VeryReduced',
  Reduced = 'Reduced',
  Normal = 'Normal',
  Without = 'Without',
  Special = 'Special',
  ReducedCovid19 = 'ReducedCovid19',
  NormalCovid19 = 'NormalCovid19',
}

/**
 * Defines values for FeeDetailsModelVatType. \
 * {@link KnownFeeDetailsModelVatType} can be used interchangeably with FeeDetailsModelVatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Null** \
 * **VeryReduced** \
 * **Reduced** \
 * **Normal** \
 * **Without** \
 * **Special** \
 * **ReducedCovid19** \
 * **NormalCovid19**
 */
export type FeeDetailsModelVatType = string;

/** Known values of {@link CancellationPolicyItemModelReference} that the service accepts. */
export enum KnownCancellationPolicyItemModelReference {
  PriorToArrival = 'PriorToArrival',
  AfterBooking = 'AfterBooking',
}

/**
 * Defines values for CancellationPolicyItemModelReference. \
 * {@link KnownCancellationPolicyItemModelReference} can be used interchangeably with CancellationPolicyItemModelReference,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PriorToArrival** \
 * **AfterBooking**
 */
export type CancellationPolicyItemModelReference = string;

/** Known values of {@link CancellationPolicyModelReference} that the service accepts. */
export enum KnownCancellationPolicyModelReference {
  PriorToArrival = 'PriorToArrival',
  AfterBooking = 'AfterBooking',
}

/**
 * Defines values for CancellationPolicyModelReference. \
 * {@link KnownCancellationPolicyModelReference} can be used interchangeably with CancellationPolicyModelReference,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PriorToArrival** \
 * **AfterBooking**
 */
export type CancellationPolicyModelReference = string;

/** Known values of {@link Patch3ItemsItem} that the service accepts. */
export enum KnownPatch3ItemsItem {
  Monday = 'Monday',
  Tuesday = 'Tuesday',
  Wednesday = 'Wednesday',
  Thursday = 'Thursday',
  Friday = 'Friday',
  Saturday = 'Saturday',
  Sunday = 'Sunday',
}

/**
 * Defines values for Patch3ItemsItem. \
 * {@link KnownPatch3ItemsItem} can be used interchangeably with Patch3ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Monday** \
 * **Tuesday** \
 * **Wednesday** \
 * **Thursday** \
 * **Friday** \
 * **Saturday** \
 * **Sunday**
 */
export type Patch3ItemsItem = string;

/** Known values of {@link Get3ItemsItem} that the service accepts. */
export enum KnownGet3ItemsItem {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for Get3ItemsItem. \
 * {@link KnownGet3ItemsItem} can be used interchangeably with Get3ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type Get3ItemsItem = string;

/** Known values of {@link Get9ItemsItem} that the service accepts. */
export enum KnownGet9ItemsItem {
  BedRoom = 'BedRoom',
  MeetingRoom = 'MeetingRoom',
  EventSpace = 'EventSpace',
  ParkingLot = 'ParkingLot',
  Other = 'Other',
}

/**
 * Defines values for Get9ItemsItem. \
 * {@link KnownGet9ItemsItem} can be used interchangeably with Get9ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BedRoom** \
 * **MeetingRoom** \
 * **EventSpace** \
 * **ParkingLot** \
 * **Other**
 */
export type Get9ItemsItem = string;

/** Known values of {@link Enum7} that the service accepts. */
export enum KnownEnum7 {
  DayUse = 'DayUse',
  OverNight = 'OverNight',
}

/**
 * Defines values for Enum7. \
 * {@link KnownEnum7} can be used interchangeably with Enum7,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DayUse** \
 * **OverNight**
 */
export type Enum7 = string;

/** Known values of {@link Get11ItemsItem} that the service accepts. */
export enum KnownGet11ItemsItem {
  PM6Hold = 'PM6Hold',
  CreditCard = 'CreditCard',
  Prepayment = 'Prepayment',
  Company = 'Company',
}

/**
 * Defines values for Get11ItemsItem. \
 * {@link KnownGet11ItemsItem} can be used interchangeably with Get11ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PM6Hold** \
 * **CreditCard** \
 * **Prepayment** \
 * **Company**
 */
export type Get11ItemsItem = string;

/** Known values of {@link Get18ItemsItem} that the service accepts. */
export enum KnownGet18ItemsItem {
  Property = 'property',
  UnitGroup = 'unitGroup',
  CancellationPolicy = 'cancellationPolicy',
  Services = 'services',
  BookingPeriods = 'bookingPeriods',
  Surcharges = 'surcharges',
  AgeCategories = 'ageCategories',
}

/**
 * Defines values for Get18ItemsItem. \
 * {@link KnownGet18ItemsItem} can be used interchangeably with Get18ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **property** \
 * **unitGroup** \
 * **cancellationPolicy** \
 * **services** \
 * **bookingPeriods** \
 * **surcharges** \
 * **ageCategories**
 */
export type Get18ItemsItem = string;

/** Known values of {@link RatePlanItemModelMinGuaranteeType} that the service accepts. */
export enum KnownRatePlanItemModelMinGuaranteeType {
  PM6Hold = 'PM6Hold',
  CreditCard = 'CreditCard',
  Prepayment = 'Prepayment',
  Company = 'Company',
}

/**
 * Defines values for RatePlanItemModelMinGuaranteeType. \
 * {@link KnownRatePlanItemModelMinGuaranteeType} can be used interchangeably with RatePlanItemModelMinGuaranteeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PM6Hold** \
 * **CreditCard** \
 * **Prepayment** \
 * **Company**
 */
export type RatePlanItemModelMinGuaranteeType = string;

/** Known values of {@link RatePlanItemModelPriceCalculationMode} that the service accepts. */
export enum KnownRatePlanItemModelPriceCalculationMode {
  Truncate = 'Truncate',
  Round = 'Round',
}

/**
 * Defines values for RatePlanItemModelPriceCalculationMode. \
 * {@link KnownRatePlanItemModelPriceCalculationMode} can be used interchangeably with RatePlanItemModelPriceCalculationMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Truncate** \
 * **Round**
 */
export type RatePlanItemModelPriceCalculationMode = string;

/** Known values of {@link EmbeddedUnitGroupModelType} that the service accepts. */
export enum KnownEmbeddedUnitGroupModelType {
  BedRoom = 'BedRoom',
  MeetingRoom = 'MeetingRoom',
  EventSpace = 'EventSpace',
  ParkingLot = 'ParkingLot',
  Other = 'Other',
}

/**
 * Defines values for EmbeddedUnitGroupModelType. \
 * {@link KnownEmbeddedUnitGroupModelType} can be used interchangeably with EmbeddedUnitGroupModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BedRoom** \
 * **MeetingRoom** \
 * **EventSpace** \
 * **ParkingLot** \
 * **Other**
 */
export type EmbeddedUnitGroupModelType = string;

/** Known values of {@link RatePlanItemModelChannelCodesItem} that the service accepts. */
export enum KnownRatePlanItemModelChannelCodesItem {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for RatePlanItemModelChannelCodesItem. \
 * {@link KnownRatePlanItemModelChannelCodesItem} can be used interchangeably with RatePlanItemModelChannelCodesItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type RatePlanItemModelChannelCodesItem = string;

/** Known values of {@link EmbeddedTimeSliceDefinitionModelTemplate} that the service accepts. */
export enum KnownEmbeddedTimeSliceDefinitionModelTemplate {
  DayUse = 'DayUse',
  OverNight = 'OverNight',
}

/**
 * Defines values for EmbeddedTimeSliceDefinitionModelTemplate. \
 * {@link KnownEmbeddedTimeSliceDefinitionModelTemplate} can be used interchangeably with EmbeddedTimeSliceDefinitionModelTemplate,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DayUse** \
 * **OverNight**
 */
export type EmbeddedTimeSliceDefinitionModelTemplate = string;

/** Known values of {@link PricingRuleModelType} that the service accepts. */
export enum KnownPricingRuleModelType {
  Absolute = 'Absolute',
  Percent = 'Percent',
}

/**
 * Defines values for PricingRuleModelType. \
 * {@link KnownPricingRuleModelType} can be used interchangeably with PricingRuleModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Absolute** \
 * **Percent**
 */
export type PricingRuleModelType = string;

/** Known values of {@link SurchargeModelType} that the service accepts. */
export enum KnownSurchargeModelType {
  Absolute = 'Absolute',
  Percent = 'Percent',
}

/**
 * Defines values for SurchargeModelType. \
 * {@link KnownSurchargeModelType} can be used interchangeably with SurchargeModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Absolute** \
 * **Percent**
 */
export type SurchargeModelType = string;

/** Known values of {@link RatePlanServiceItemModelPricingMode} that the service accepts. */
export enum KnownRatePlanServiceItemModelPricingMode {
  Included = 'Included',
  Additional = 'Additional',
}

/**
 * Defines values for RatePlanServiceItemModelPricingMode. \
 * {@link KnownRatePlanServiceItemModelPricingMode} can be used interchangeably with RatePlanServiceItemModelPricingMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Included** \
 * **Additional**
 */
export type RatePlanServiceItemModelPricingMode = string;

/** Known values of {@link AccountingConfigModelVatType} that the service accepts. */
export enum KnownAccountingConfigModelVatType {
  Null = 'Null',
  VeryReduced = 'VeryReduced',
  Reduced = 'Reduced',
  Normal = 'Normal',
  Without = 'Without',
  Special = 'Special',
  ReducedCovid19 = 'ReducedCovid19',
  NormalCovid19 = 'NormalCovid19',
}

/**
 * Defines values for AccountingConfigModelVatType. \
 * {@link KnownAccountingConfigModelVatType} can be used interchangeably with AccountingConfigModelVatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Null** \
 * **VeryReduced** \
 * **Reduced** \
 * **Normal** \
 * **Without** \
 * **Special** \
 * **ReducedCovid19** \
 * **NormalCovid19**
 */
export type AccountingConfigModelVatType = string;

/** Known values of {@link AccountingConfigModelServiceType} that the service accepts. */
export enum KnownAccountingConfigModelServiceType {
  Other = 'Other',
  Accommodation = 'Accommodation',
  FoodAndBeverages = 'FoodAndBeverages',
}

/**
 * Defines values for AccountingConfigModelServiceType. \
 * {@link KnownAccountingConfigModelServiceType} can be used interchangeably with AccountingConfigModelServiceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Other** \
 * **Accommodation** \
 * **FoodAndBeverages**
 */
export type AccountingConfigModelServiceType = string;

/** Known values of {@link CreateRatePlanModelChannelCodesItem} that the service accepts. */
export enum KnownCreateRatePlanModelChannelCodesItem {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for CreateRatePlanModelChannelCodesItem. \
 * {@link KnownCreateRatePlanModelChannelCodesItem} can be used interchangeably with CreateRatePlanModelChannelCodesItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type CreateRatePlanModelChannelCodesItem = string;

/** Known values of {@link CreateRatePlanModelMinGuaranteeType} that the service accepts. */
export enum KnownCreateRatePlanModelMinGuaranteeType {
  PM6Hold = 'PM6Hold',
  CreditCard = 'CreditCard',
  Prepayment = 'Prepayment',
  Company = 'Company',
}

/**
 * Defines values for CreateRatePlanModelMinGuaranteeType. \
 * {@link KnownCreateRatePlanModelMinGuaranteeType} can be used interchangeably with CreateRatePlanModelMinGuaranteeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PM6Hold** \
 * **CreditCard** \
 * **Prepayment** \
 * **Company**
 */
export type CreateRatePlanModelMinGuaranteeType = string;

/** Known values of {@link CreateRatePlanModelPriceCalculationMode} that the service accepts. */
export enum KnownCreateRatePlanModelPriceCalculationMode {
  Truncate = 'Truncate',
  Round = 'Round',
}

/**
 * Defines values for CreateRatePlanModelPriceCalculationMode. \
 * {@link KnownCreateRatePlanModelPriceCalculationMode} can be used interchangeably with CreateRatePlanModelPriceCalculationMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Truncate** \
 * **Round**
 */
export type CreateRatePlanModelPriceCalculationMode = string;

/** Known values of {@link CreatePricingRuleModelType} that the service accepts. */
export enum KnownCreatePricingRuleModelType {
  Absolute = 'Absolute',
  Percent = 'Percent',
}

/**
 * Defines values for CreatePricingRuleModelType. \
 * {@link KnownCreatePricingRuleModelType} can be used interchangeably with CreatePricingRuleModelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Absolute** \
 * **Percent**
 */
export type CreatePricingRuleModelType = string;

/** Known values of {@link RatePlanServiceModelPricingMode} that the service accepts. */
export enum KnownRatePlanServiceModelPricingMode {
  Included = 'Included',
  Additional = 'Additional',
}

/**
 * Defines values for RatePlanServiceModelPricingMode. \
 * {@link KnownRatePlanServiceModelPricingMode} can be used interchangeably with RatePlanServiceModelPricingMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Included** \
 * **Additional**
 */
export type RatePlanServiceModelPricingMode = string;

/** Known values of {@link Enum25} that the service accepts. */
export enum KnownEnum25 {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for Enum25. \
 * {@link KnownEnum25} can be used interchangeably with Enum25,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type Enum25 = string;

/** Known values of {@link Enum26} that the service accepts. */
export enum KnownEnum26 {
  BedRoom = 'BedRoom',
  MeetingRoom = 'MeetingRoom',
  EventSpace = 'EventSpace',
  ParkingLot = 'ParkingLot',
  Other = 'Other',
}

/**
 * Defines values for Enum26. \
 * {@link KnownEnum26} can be used interchangeably with Enum26,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BedRoom** \
 * **MeetingRoom** \
 * **EventSpace** \
 * **ParkingLot** \
 * **Other**
 */
export type Enum26 = string;

/** Known values of {@link Enum27} that the service accepts. */
export enum KnownEnum27 {
  DayUse = 'DayUse',
  OverNight = 'OverNight',
}

/**
 * Defines values for Enum27. \
 * {@link KnownEnum27} can be used interchangeably with Enum27,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DayUse** \
 * **OverNight**
 */
export type Enum27 = string;

/** Known values of {@link Enum28} that the service accepts. */
export enum KnownEnum28 {
  PM6Hold = 'PM6Hold',
  CreditCard = 'CreditCard',
  Prepayment = 'Prepayment',
  Company = 'Company',
}

/**
 * Defines values for Enum28. \
 * {@link KnownEnum28} can be used interchangeably with Enum28,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PM6Hold** \
 * **CreditCard** \
 * **Prepayment** \
 * **Company**
 */
export type Enum28 = string;

/** Known values of {@link Enum29} that the service accepts. */
export enum KnownEnum29 {
  Property = 'property',
  CancellationPolicy = 'cancellationPolicy',
}

/**
 * Defines values for Enum29. \
 * {@link KnownEnum29} can be used interchangeably with Enum29,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **property** \
 * **cancellationPolicy**
 */
export type Enum29 = string;

/** Known values of {@link RatePlanModelMinGuaranteeType} that the service accepts. */
export enum KnownRatePlanModelMinGuaranteeType {
  PM6Hold = 'PM6Hold',
  CreditCard = 'CreditCard',
  Prepayment = 'Prepayment',
  Company = 'Company',
}

/**
 * Defines values for RatePlanModelMinGuaranteeType. \
 * {@link KnownRatePlanModelMinGuaranteeType} can be used interchangeably with RatePlanModelMinGuaranteeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PM6Hold** \
 * **CreditCard** \
 * **Prepayment** \
 * **Company**
 */
export type RatePlanModelMinGuaranteeType = string;

/** Known values of {@link RatePlanModelPriceCalculationMode} that the service accepts. */
export enum KnownRatePlanModelPriceCalculationMode {
  Truncate = 'Truncate',
  Round = 'Round',
}

/**
 * Defines values for RatePlanModelPriceCalculationMode. \
 * {@link KnownRatePlanModelPriceCalculationMode} can be used interchangeably with RatePlanModelPriceCalculationMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Truncate** \
 * **Round**
 */
export type RatePlanModelPriceCalculationMode = string;

/** Known values of {@link RatePlanModelChannelCodesItem} that the service accepts. */
export enum KnownRatePlanModelChannelCodesItem {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for RatePlanModelChannelCodesItem. \
 * {@link KnownRatePlanModelChannelCodesItem} can be used interchangeably with RatePlanModelChannelCodesItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type RatePlanModelChannelCodesItem = string;

/** Known values of {@link ReplaceRatePlanModelMinGuaranteeType} that the service accepts. */
export enum KnownReplaceRatePlanModelMinGuaranteeType {
  PM6Hold = 'PM6Hold',
  CreditCard = 'CreditCard',
  Prepayment = 'Prepayment',
  Company = 'Company',
}

/**
 * Defines values for ReplaceRatePlanModelMinGuaranteeType. \
 * {@link KnownReplaceRatePlanModelMinGuaranteeType} can be used interchangeably with ReplaceRatePlanModelMinGuaranteeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PM6Hold** \
 * **CreditCard** \
 * **Prepayment** \
 * **Company**
 */
export type ReplaceRatePlanModelMinGuaranteeType = string;

/** Known values of {@link ReplaceRatePlanModelPriceCalculationMode} that the service accepts. */
export enum KnownReplaceRatePlanModelPriceCalculationMode {
  Truncate = 'Truncate',
  Round = 'Round',
}

/**
 * Defines values for ReplaceRatePlanModelPriceCalculationMode. \
 * {@link KnownReplaceRatePlanModelPriceCalculationMode} can be used interchangeably with ReplaceRatePlanModelPriceCalculationMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Truncate** \
 * **Round**
 */
export type ReplaceRatePlanModelPriceCalculationMode = string;

/** Known values of {@link ReplaceRatePlanModelChannelCodesItem} that the service accepts. */
export enum KnownReplaceRatePlanModelChannelCodesItem {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for ReplaceRatePlanModelChannelCodesItem. \
 * {@link KnownReplaceRatePlanModelChannelCodesItem} can be used interchangeably with ReplaceRatePlanModelChannelCodesItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type ReplaceRatePlanModelChannelCodesItem = string;

/** Known values of {@link CreateServiceModelPricingUnit} that the service accepts. */
export enum KnownCreateServiceModelPricingUnit {
  Room = 'Room',
  Person = 'Person',
}

/**
 * Defines values for CreateServiceModelPricingUnit. \
 * {@link KnownCreateServiceModelPricingUnit} can be used interchangeably with CreateServiceModelPricingUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Room** \
 * **Person**
 */
export type CreateServiceModelPricingUnit = string;

/** Known values of {@link AvailabilityModelMode} that the service accepts. */
export enum KnownAvailabilityModelMode {
  Arrival = 'Arrival',
  Departure = 'Departure',
  Daily = 'Daily',
}

/**
 * Defines values for AvailabilityModelMode. \
 * {@link KnownAvailabilityModelMode} can be used interchangeably with AvailabilityModelMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Arrival** \
 * **Departure** \
 * **Daily**
 */
export type AvailabilityModelMode = string;

/** Known values of {@link CreateServiceModelChannelCodesItem} that the service accepts. */
export enum KnownCreateServiceModelChannelCodesItem {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for CreateServiceModelChannelCodesItem. \
 * {@link KnownCreateServiceModelChannelCodesItem} can be used interchangeably with CreateServiceModelChannelCodesItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type CreateServiceModelChannelCodesItem = string;

/** Known values of {@link Enum39} that the service accepts. */
export enum KnownEnum39 {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for Enum39. \
 * {@link KnownEnum39} can be used interchangeably with Enum39,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type Enum39 = string;

/** Known values of {@link ServiceItemModelPricingUnit} that the service accepts. */
export enum KnownServiceItemModelPricingUnit {
  Room = 'Room',
  Person = 'Person',
}

/**
 * Defines values for ServiceItemModelPricingUnit. \
 * {@link KnownServiceItemModelPricingUnit} can be used interchangeably with ServiceItemModelPricingUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Room** \
 * **Person**
 */
export type ServiceItemModelPricingUnit = string;

/** Known values of {@link ServiceItemModelServiceType} that the service accepts. */
export enum KnownServiceItemModelServiceType {
  Other = 'Other',
  Accommodation = 'Accommodation',
  FoodAndBeverages = 'FoodAndBeverages',
}

/**
 * Defines values for ServiceItemModelServiceType. \
 * {@link KnownServiceItemModelServiceType} can be used interchangeably with ServiceItemModelServiceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Other** \
 * **Accommodation** \
 * **FoodAndBeverages**
 */
export type ServiceItemModelServiceType = string;

/** Known values of {@link ServiceItemModelVatType} that the service accepts. */
export enum KnownServiceItemModelVatType {
  Null = 'Null',
  VeryReduced = 'VeryReduced',
  Reduced = 'Reduced',
  Normal = 'Normal',
  Without = 'Without',
  Special = 'Special',
  ReducedCovid19 = 'ReducedCovid19',
  NormalCovid19 = 'NormalCovid19',
}

/**
 * Defines values for ServiceItemModelVatType. \
 * {@link KnownServiceItemModelVatType} can be used interchangeably with ServiceItemModelVatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Null** \
 * **VeryReduced** \
 * **Reduced** \
 * **Normal** \
 * **Without** \
 * **Special** \
 * **ReducedCovid19** \
 * **NormalCovid19**
 */
export type ServiceItemModelVatType = string;

/** Known values of {@link ServiceItemModelChannelCodesItem} that the service accepts. */
export enum KnownServiceItemModelChannelCodesItem {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for ServiceItemModelChannelCodesItem. \
 * {@link KnownServiceItemModelChannelCodesItem} can be used interchangeably with ServiceItemModelChannelCodesItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type ServiceItemModelChannelCodesItem = string;

/** Known values of {@link ServiceModelPricingUnit} that the service accepts. */
export enum KnownServiceModelPricingUnit {
  Room = 'Room',
  Person = 'Person',
}

/**
 * Defines values for ServiceModelPricingUnit. \
 * {@link KnownServiceModelPricingUnit} can be used interchangeably with ServiceModelPricingUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Room** \
 * **Person**
 */
export type ServiceModelPricingUnit = string;

/** Known values of {@link ServiceModelChannelCodesItem} that the service accepts. */
export enum KnownServiceModelChannelCodesItem {
  Direct = 'Direct',
  BookingCom = 'BookingCom',
  Ibe = 'Ibe',
  ChannelManager = 'ChannelManager',
  Expedia = 'Expedia',
  Homelike = 'Homelike',
  Hrs = 'Hrs',
}

/**
 * Defines values for ServiceModelChannelCodesItem. \
 * {@link KnownServiceModelChannelCodesItem} can be used interchangeably with ServiceModelChannelCodesItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **BookingCom** \
 * **Ibe** \
 * **ChannelManager** \
 * **Expedia** \
 * **Homelike** \
 * **Hrs**
 */
export type ServiceModelChannelCodesItem = string;

/** Optional parameters. */
export interface SettingsAgeCategoriesByIdGetOptionalParams
  extends coreClient.OperationOptions {
  /** 'all' or comma separated list of two-letter language codes (ISO Alpha-2) */
  languages?: string[];
}

/** Contains response data for the settingsAgeCategoriesByIdGet operation. */
export type SettingsAgeCategoriesByIdGetResponse = AgeCategoryModel;

/** Optional parameters. */
export interface SettingsAgeCategoriesByIdPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the settingsAgeCategoriesByIdPatch operation. */
export type SettingsAgeCategoriesByIdPatchResponse = MessageItemCollection;

/** Optional parameters. */
export interface SettingsAgeCategoriesByIdDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the settingsAgeCategoriesByIdDelete operation. */
export type SettingsAgeCategoriesByIdDeleteResponse = MessageItemCollection;

/** Optional parameters. */
export interface SettingsAgeCategoriesPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the settingsAgeCategoriesPost operation. */
export type SettingsAgeCategoriesPostResponse =
  ApaleoRatePlanAPISettingsAgeCategoriesPostHeaders & AgeCategoryCreatedModel;

/** Optional parameters. */
export interface SettingsAgeCategoriesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the settingsAgeCategoriesGet operation. */
export type SettingsAgeCategoriesGetResponse = AgeCategoryListModel;

/** Optional parameters. */
export interface RateplanCancellationPoliciesPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the rateplanCancellationPoliciesPost operation. */
export type RateplanCancellationPoliciesPostResponse =
  ApaleoRatePlanAPIRateplanCancellationPoliciesPostHeaders &
    CancellationPolicyCreatedModel;

/** Optional parameters. */
export interface RateplanCancellationPoliciesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Filter cancellation policies by the specified property */
  propertyId?: string;
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
}

/** Contains response data for the rateplanCancellationPoliciesGet operation. */
export type RateplanCancellationPoliciesGetResponse =
  CancellationPolicyListModel;

/** Optional parameters. */
export interface RateplanCancellationPoliciesByIdGetOptionalParams
  extends coreClient.OperationOptions {
  /** 'all' or comma separated list of two-letter language codes (ISO Alpha-2) */
  languages?: string[];
}

/** Contains response data for the rateplanCancellationPoliciesByIdGet operation. */
export type RateplanCancellationPoliciesByIdGetResponse =
  CancellationPolicyModel;

/** Optional parameters. */
export interface RateplanCancellationPoliciesByIdPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanCancellationPoliciesByIdPatch operation. */
export type RateplanCancellationPoliciesByIdPatchResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface RateplanCancellationPoliciesByIdDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanCancellationPoliciesByIdDelete operation. */
export type RateplanCancellationPoliciesByIdDeleteResponse =
  MessageItemCollection;

/** Optional parameters. */
export interface RateplanCompaniesPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the rateplanCompaniesPost operation. */
export type RateplanCompaniesPostResponse =
  ApaleoRatePlanAPIRateplanCompaniesPostHeaders & CompanyCreatedModel;

/** Optional parameters. */
export interface RateplanCompaniesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Filter by the specified property */
  propertyId?: string;
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /** Return companies with any of the specified rate plans */
  ratePlanIds?: string[];
  /** Return companies that have any of the requested corporate codes */
  corporateCodes?: string[];
  /**
   * This will filter all companies for the provided free text.
   * Currently it only looks up if the company name contains one of the provided values
   */
  textSearch?: string;
}

/** Contains response data for the rateplanCompaniesGet operation. */
export type RateplanCompaniesGetResponse = CompanyListModel;

/** Optional parameters. */
export interface RateplanCompaniesByIdGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanCompaniesByIdGet operation. */
export type RateplanCompaniesByIdGetResponse = CompanyModel;

/** Optional parameters. */
export interface RateplanCompaniesByIdPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanCompaniesByIdPatch operation. */
export type RateplanCompaniesByIdPatchResponse = MessageItemCollection;

/** Optional parameters. */
export interface RateplanCompaniesByIdDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanCompaniesByIdDelete operation. */
export type RateplanCompaniesByIdDeleteResponse = MessageItemCollection;

/** Optional parameters. */
export interface RateplanCorporateCodesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Return codes for a specific property */
  propertyId?: string;
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
}

/** Contains response data for the rateplanCorporateCodesGet operation. */
export type RateplanCorporateCodesGetResponse = CorporateCodeListModel;

/** Optional parameters. */
export interface RateplanNoShowPoliciesPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the rateplanNoShowPoliciesPost operation. */
export type RateplanNoShowPoliciesPostResponse =
  ApaleoRatePlanAPIRateplanNoShowPoliciesPostHeaders & NoShowPolicyCreatedModel;

/** Optional parameters. */
export interface RateplanNoShowPoliciesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Filter no-show policies by the specified property */
  propertyId?: string;
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
}

/** Contains response data for the rateplanNoShowPoliciesGet operation. */
export type RateplanNoShowPoliciesGetResponse = NoShowPolicyListModel;

/** Optional parameters. */
export interface RateplanNoShowPoliciesByIdGetOptionalParams
  extends coreClient.OperationOptions {
  /** 'all' or comma separated list of two-letter language codes (ISO Alpha-2) */
  languages?: string[];
}

/** Contains response data for the rateplanNoShowPoliciesByIdGet operation. */
export type RateplanNoShowPoliciesByIdGetResponse = NoShowPolicyModel;

/** Optional parameters. */
export interface RateplanNoShowPoliciesByIdPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanNoShowPoliciesByIdPatch operation. */
export type RateplanNoShowPoliciesByIdPatchResponse = MessageItemCollection;

/** Optional parameters. */
export interface RateplanNoShowPoliciesByIdDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanNoShowPoliciesByIdDelete operation. */
export type RateplanNoShowPoliciesByIdDeleteResponse = MessageItemCollection;

/** Optional parameters. */
export interface RateplanPromoCodesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Return codes for a specific property */
  propertyId?: string;
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
}

/** Contains response data for the rateplanPromoCodesGet operation. */
export type RateplanPromoCodesGetResponse = PromoCodeListModel;

/** Optional parameters. */
export interface RateplanRatePlansByIdRatesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
}

/** Contains response data for the rateplanRatePlansByIdRatesGet operation. */
export type RateplanRatePlansByIdRatesGetResponse = RateListModel;

/** Optional parameters. */
export interface RateplanRatePlansByIdRatesPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanRatePlansByIdRatesPut operation. */
export type RateplanRatePlansByIdRatesPutResponse = MessageItemCollection;

/** Optional parameters. */
export interface RateplanRatePlansByIdRatesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanRatePlansByIdRatesDelete operation. */
export type RateplanRatePlansByIdRatesDeleteResponse = MessageItemCollection;

/** Optional parameters. */
export interface RateplanRatePlansByIdRatesCountGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanRatePlansByIdRatesCountGet operation. */
export type RateplanRatePlansByIdRatesCountGetResponse = CountModel;

/** Optional parameters. */
export interface RateplanRatesPatchOptionalParams
  extends coreClient.OperationOptions {
  /** The weekdays that will be patched. If not specified, all weekdays will be patched. */
  weekDays?: Patch3ItemsItem[];
}

/** Contains response data for the rateplanRatesPatch operation. */
export type RateplanRatesPatchResponse = MessageItemCollection;

/** Optional parameters. */
export interface RateplanRatePlansGetOptionalParams
  extends coreClient.OperationOptions {
  /** Return rate plans for the specific property */
  propertyId?: string;
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /** Return rate plans filtered by requested codes */
  ratePlanCodes?: string[];
  /** Return rate plans that have any of the requested included services */
  includedServiceIds?: string[];
  /** Return rate plans that are sold though any of the specified channels */
  channelCodes?: Get3ItemsItem[];
  /** Return rate plans that have any of the requested promo codes */
  promoCodes?: string[];
  /** Return rate plans filtered by requested companies */
  companyIds?: string[];
  /** Return rate plans derived from any of the specified rate plans */
  baseRatePlanIds?: string[];
  /** Return rate plans with any of the specified unit groups */
  unitGroupIds?: string[];
  /** Return rate plans with any of the specified time slice definitions */
  timeSliceDefinitionIds?: string[];
  /** Return rate plans with any of the specified unit group types */
  unitGroupTypes?: Get9ItemsItem[];
  /** The time slice template, defaults to 'over night' */
  timeSliceTemplate?: Enum7;
  /** Return rate plans with any of the specified min guarantee types */
  minGuaranteeTypes?: Get11ItemsItem[];
  /** Return rate plans with any of the specified cancellation policies */
  cancellationPolicyIds?: string[];
  /** Return rate plans with any of the specified no-show policies */
  noShowPolicyIds?: string[];
  /** Return only derived or base rate plans */
  isDerived?: boolean;
  /** This will filter rate plans based on their derivation level.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7 */
  derivationLevelFilter?: string[];
  /** List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup, cancellationPolicy, services, bookingPeriods, surcharges, ageCategories. All other values will be silently ignored. */
  expand?: Get18ItemsItem[];
}

/** Contains response data for the rateplanRatePlansGet operation. */
export type RateplanRatePlansGetResponse = RatePlanListModel;

/** Optional parameters. */
export interface RateplanRatePlansPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the rateplanRatePlansPost operation. */
export type RateplanRatePlansPostResponse =
  ApaleoRatePlanAPIRateplanRatePlansPostHeaders & RatePlanCreatedModel;

/** Optional parameters. */
export interface RateplanRatePlansPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanRatePlansPatch operation. */
export type RateplanRatePlansPatchResponse = MessageItemCollection;

/** Optional parameters. */
export interface RateplanRatePlansDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanRatePlansDelete operation. */
export type RateplanRatePlansDeleteResponse = MessageItemCollection;

/** Optional parameters. */
export interface RateplanRatePlansCountGetOptionalParams
  extends coreClient.OperationOptions {
  /** Return rate plans for the specific property */
  propertyId?: string;
  /** Return rate plans filtered by requested codes */
  ratePlanCodes?: string[];
  /** Return rate plans that have any of the requested included services */
  includedServiceIds?: string[];
  /** Return rate plans that have any of the requested promo codes */
  promoCodes?: string[];
  /** Return rate plans filtered by requested companies */
  companyIds?: string[];
  /** Return rate plans derived from any of the specified rate plans */
  baseRatePlanIds?: string[];
  /** Return rate plans with any of the specified unit groups */
  unitGroupIds?: string[];
  /** Return rate plans with any of the specified time slice definitions */
  timeSliceDefinitionIds?: string[];
  /** Return rate plans with any of the specified cancellation policies */
  cancellationPolicyIds?: string[];
  /** Return rate plans with any of the specified no-show policies */
  noShowPolicyIds?: string[];
  /** Return only derived or base rate plans */
  isDerived?: boolean;
  /** This will filter rate plans based on their derivation level.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7 */
  derivationLevelFilter?: string[];
  /** Return rate plans that are sold though any of the specified channels */
  channelCodes?: Enum25[];
  /** Return rate plans with any of the specified unit group types */
  unitGroupTypes?: Enum26[];
  /** The time slice template, defaults to 'over night' */
  timeSliceTemplate?: Enum27;
  /** Return rate plans with any of the specified min guarantee types */
  minGuaranteeTypes?: Enum28[];
}

/** Contains response data for the rateplanRatePlansCountGet operation. */
export type RateplanRatePlansCountGetResponse = CountModel;

/** Optional parameters. */
export interface RateplanRatePlansByIdHeadOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface RateplanRatePlansByIdGetOptionalParams
  extends coreClient.OperationOptions {
  /** 'all' or comma separated list of two-letter language codes (ISO Alpha-2) */
  languages?: string[];
  /** List of all embedded resources that should be expanded in the response. Possible values are: property, cancellationPolicy. All other values will be silently ignored. */
  expand?: Enum29[];
}

/** Contains response data for the rateplanRatePlansByIdGet operation. */
export type RateplanRatePlansByIdGetResponse = RatePlanModel;

/** Optional parameters. */
export interface RateplanRatePlansByIdPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanRatePlansByIdPut operation. */
export type RateplanRatePlansByIdPutResponse = MessageItemCollection;

/** Optional parameters. */
export interface RateplanRatePlansByIdDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanRatePlansByIdDelete operation. */
export type RateplanRatePlansByIdDeleteResponse = MessageItemCollection;

/** Optional parameters. */
export interface RateplanCodesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Return codes for a specific property */
  propertyId?: string;
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
}

/** Contains response data for the rateplanCodesGet operation. */
export type RateplanCodesGetResponse = RatePlanCodeListModel;

/** Optional parameters. */
export interface RateplanServicesPostOptionalParams
  extends coreClient.OperationOptions {
  /**
   * Unique key for safely retrying requests without accidentally performing the same operation twice.
   * We'll always send back the same response for requests made with the same key,
   * and keys can't be reused with different request parameters. Keys expire after 24 hours.
   */
  idempotencyKey?: string;
}

/** Contains response data for the rateplanServicesPost operation. */
export type RateplanServicesPostResponse =
  ApaleoRatePlanAPIRateplanServicesPostHeaders & ServiceCreatedModel;

/** Optional parameters. */
export interface RateplanServicesGetOptionalParams
  extends coreClient.OperationOptions {
  /** Filter services by the specified property */
  propertyId?: string;
  /** Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page. */
  pageNumber?: number;
  /** Page size. If this is not set, the pageNumber will be ignored and all values returned. */
  pageSize?: number;
  /** If set to true, return only services that can be sold as extras. Otherwise, it returns both, extras, and include-only. */
  onlySoldAsExtras?: boolean;
  /** The channel codes the service is sold through */
  channelCodes?: Enum39[];
  /** List of all embedded resources that should be expanded in the response. Possible values are: property. All other values will be silently ignored. */
  expand?: string[];
}

/** Contains response data for the rateplanServicesGet operation. */
export type RateplanServicesGetResponse = ServiceListModel;

/** Optional parameters. */
export interface RateplanServicesByIdPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanServicesByIdPatch operation. */
export type RateplanServicesByIdPatchResponse = MessageItemCollection;

/** Optional parameters. */
export interface RateplanServicesByIdGetOptionalParams
  extends coreClient.OperationOptions {
  /** 'all' or comma separated list of two-letter language codes (ISO Alpha-2) */
  languages?: string[];
  /** List of all embedded resources that should be expanded in the response. Possible values are: property. All other values will be silently ignored. */
  expand?: string[];
}

/** Contains response data for the rateplanServicesByIdGet operation. */
export type RateplanServicesByIdGetResponse = ServiceModel;

/** Optional parameters. */
export interface RateplanServicesByIdHeadOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface RateplanServicesByIdDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanServicesByIdDelete operation. */
export type RateplanServicesByIdDeleteResponse = MessageItemCollection;

/** Optional parameters. */
export interface RateplanServicesCountGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the rateplanServicesCountGet operation. */
export type RateplanServicesCountGetResponse = CountModel;

/** Optional parameters. */
export interface ApaleoRatePlanAPIOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Overrides client endpoint. */
  endpoint?: string;
}
